{
	"auto_complete":
	{
		"selected_items":
		[
			[
				"view",
				"viewportDimensions"
			],
			[
				"back",
				"backdropElement"
			],
			[
				"modal",
				"modalElement"
			],
			[
				"bac",
				"backdropElement"
			],
			[
				"bsT",
				"bsTabsCtrl"
			],
			[
				"get",
				"getHours"
			],
			[
				"tab-content",
				"tab-content-primary"
			],
			[
				"mode",
				"modelValue"
			],
			[
				"bs",
				"bsTabsCtrl"
			],
			[
				"selecte",
				"selectedIcon"
			],
			[
				"tran",
				"trancludeElem"
			],
			[
				"on",
				"onResize"
			],
			[
				"offset",
				"offsetBottom"
			],
			[
				"ini",
				"initialOffsetTop"
			],
			[
				"isN",
				"isNaN"
			],
			[
				"firs",
				"firstDate"
			],
			[
				"pars",
				"parsedOptions"
			],
			[
				"mul",
				"multipleEl"
			],
			[
				"today",
				"todayDate"
			],
			[
				"pre",
				"preventDefault"
			],
			[
				"selec",
				"selectedMonth"
			],
			[
				"date",
				"dateValue"
			],
			[
				"selected",
				"selectedIndex"
			],
			[
				"tem",
				"templateEl"
			],
			[
				"content",
				"contentTemplate"
			],
			[
				"parse",
				"parsedTime"
			],
			[
				"compile",
				"compileDirective"
			],
			[
				"locale",
				"localeProvider"
			],
			[
				"requ",
				"requestAnimationFrame"
			],
			[
				"is",
				"isSelected"
			],
			[
				"_w",
				"_week"
			],
			[
				"lan",
				"langData"
			],
			[
				"off",
				"offsetParent"
			],
			[
				"con",
				"controller"
			],
			[
				"act",
				"activeElement"
			],
			[
				"active",
				"activeIndex"
			],
			[
				"length",
				"minLength"
			],
			[
				"par",
				"parsedOptions"
			],
			[
				"Sel",
				"SelectFactory"
			],
			[
				"type",
				"typeahead"
			],
			[
				"s",
				"selectedAddress"
			],
			[
				"group",
				"groupByFn"
			],
			[
				"sand",
				"sandboxEl"
			],
			[
				"san",
				"sandboxEl"
			],
			[
				"auto",
				"autoprefixer"
			],
			[
				"sor",
				"sortedElements"
			],
			[
				"so",
				"sortedElements"
			],
			[
				"activa",
				"activateElement"
			],
			[
				"b",
				"body"
			],
			[
				"tracke",
				"trackedElements"
			],
			[
				"track",
				"trackedOffsets"
			],
			[
				"target",
				"targetElement"
			],
			[
				"tooltip",
				"tooltipScope"
			],
			[
				"offs",
				"offsetWidth"
			],
			[
				"over",
				"overflow-y"
			],
			[
				"body",
				"bodyElement"
			],
			[
				"elem",
				"elementPosition"
			],
			[
				"clo",
				"clonedElement"
			],
			[
				"actu",
				"actualWidth"
			],
			[
				"ba",
				"backdropElement"
			],
			[
				"defe",
				"deferred"
			],
			[
				"show",
				"showBackdrop"
			],
			[
				"pop",
				"popoverProvider"
			],
			[
				"code",
				"codeElement"
			],
			[
				"spli",
				"splitString"
			],
			[
				"elemen",
				"elementHtml"
			],
			[
				"trigger",
				"triggerHandler"
			],
			[
				"Apple",
				"AppleIncRootCertificate"
			],
			[
				"csr",
				"csrFixture"
			],
			[
				"As",
				"AsciiValue"
			],
			[
				"publi",
				"publicKey"
			],
			[
				"cryp",
				"cryptoCredentials"
			],
			[
				"res",
				"response"
			],
			[
				"fil",
				"readFileSync"
			],
			[
				"icon",
				"iconExclamationSign"
			],
			[
				"full",
				"fullNameUserList"
			],
			[
				"ne",
				"networkUpdated"
			],
			[
				"upda",
				"updatedUserList"
			],
			[
				"print_r",
				"printer_draw_rectangle"
			],
			[
				"strto",
				"strtolower"
			],
			[
				"device",
				"deviceContact"
			],
			[
				"user",
				"userDevices"
			],
			[
				"netwo",
				"networkCounts"
			],
			[
				"net",
				"networkCounts"
			],
			[
				"Mesage",
				"MessageBox"
			],
			[
				"te",
				"templateHelpers"
			],
			[
				"tar",
				"targetUserList2"
			],
			[
				"byPla",
				"byPlatformCount"
			],
			[
				"network",
				"networkCounts"
			],
			[
				"popover",
				"popoverInstance"
			],
			[
				"popove",
				"popoverInstance"
			],
			[
				"User",
				"UsersFormCtrl"
			],
			[
				"mongo",
				"mongoDatabase"
			],
			[
				"match",
				"matchingUsers"
			],
			[
				"facebook",
				"facebookEnabled"
			],
			[
				"array_inte",
				"array_intersect_key"
			],
			[
				"mat",
				"matchingUsers"
			],
			[
				"Success",
				"successfully"
			],
			[
				"forma",
				"formattedCards"
			],
			[
				"field",
				"fieldGroupFields"
			],
			[
				"ma",
				"matchingInvite"
			],
			[
				"delega",
				"delegateEvents"
			],
			[
				"response",
				"responseText"
			],
			[
				"firl",
				"fieldGroupFields"
			],
			[
				"templa",
				"templateOptions"
			],
			[
				"dynam",
				"dynamicCollapse"
			],
			[
				"record",
				"recordPhoneNumbers"
			],
			[
				"ava",
				"availableContacts"
			],
			[
				"auth",
				"authUserNetwork"
			],
			[
				"array_in",
				"array_intersect_key"
			],
			[
				"upd",
				"updatedCards"
			],
			[
				"func_",
				"func_get_args"
			],
			[
				"targe",
				"targetUserDevices"
			],
			[
				"js",
				"JSON"
			],
			[
				"has",
				"hasMatchingEmail"
			],
			[
				"hasM",
				"hasMatchingPhoneNumber"
			],
			[
				"matching",
				"matchingRecord"
			],
			[
				"Sync",
				"SyncContact"
			],
			[
				"web",
				"webkit-transition"
			],
			[
				"stop",
				"stopPropagation  (function)"
			],
			[
				"class",
				"class_exists"
			],
			[
				"clien",
				"clientAccessToken"
			],
			[
				"server",
				"serverAccessToken"
			],
			[
				"respon",
				"responseText"
			],
			[
				"function",
				"function_exists"
			],
			[
				"Inter",
				"InternalErrorException  (class)"
			],
			[
				"Not",
				"NotFoundException  (class)"
			],
			[
				"url",
				"urlencode"
			]
		]
	},
	"buffers":
	[
		{
			"file": "src/datepicker/test/datepicker.spec.js",
			"settings":
			{
				"buffer_size": 67040,
				"line_ending": "Unix"
			}
		},
		{
			"contents": "Searching 112 files for \"find\"\n\n/Users/olivier/Projects/angular-strap/src/affix/test/affix.spec.js:\n   79      it('should set affix-top class on top of scroll', function() {\n   80        var scrollTarget = compileDirective('default');\n   81:       var affix = scrollTarget.find('[bs-affix]');\n   82        expect(affix).toHaveClass('affix-top');\n   83        expect(affix).not.toHaveClass('affix');\n   ..\n   86      it('should set affix class', function(done) {\n   87        var scrollTarget = compileDirective('default');\n   88:       var affix = scrollTarget.find('[bs-affix]');\n   89        scrollTarget.scrollTop(50);\n   90  \n   ..\n   97      it('should keep width while affixed', function(done) {\n   98        var scrollTarget = compileDirective('default');\n   99:       var affix = scrollTarget.find('[bs-affix]');\n  100        var width = affix.width();\n  101  \n  ...\n  114      it('should not remove width when it had been defined', function() {\n  115        var scrollTarget = compileDirective('implicitWidth');\n  116:       var affix = scrollTarget.find('[bs-affix]');\n  117  \n  118        expect(affix.css('width')).not.toBe('');\n  ...\n  129      it('should not have inline styling applied if inline-styles=false', function(done) {\n  130        var scrollTarget = compileDirective('noAddedInlineStyles');\n  131:       var affix = scrollTarget.find('[bs-affix]');\n  132  \n  133        expect(affix.css('position')).toBe('static');\n\n/Users/olivier/Projects/angular-strap/src/alert/test/alert.spec.js:\n   97        var elm = compileDirective('default');\n   98        angular.element(elm[0]).triggerHandler('click');\n   99:       expect(sandboxEl.find('.alert > strong').html()).toBe(scope.alert.title);\n  100:       expect(sandboxEl.find('.alert > span').html()).toBe(scope.alert.content);\n  101      });\n  102  \n  ...\n  104        var elm = compileDirective('markup-scope');\n  105        angular.element(elm[0]).triggerHandler('click');\n  106:       expect(sandboxEl.find('.alert > strong').html()).toBe(scope.alert.title);\n  107:       expect(sandboxEl.find('.alert > span').html()).toBe(scope.alert.content);\n  108      });\n  109  \n  110      it('should support ngRepeat markup inside', function() {\n  111        var elm = compileDirective('markup-ngRepeat');\n  112:       angular.element(elm.find('[bs-alert]')).triggerHandler('click');\n  113:       expect(sandboxEl.find('.alert > strong').html()).toBe(scope.items[0].alert.title);\n  114:       expect(sandboxEl.find('.alert > span').html()).toBe(scope.items[0].alert.content);\n  115      });\n  116  \n  ...\n  118        var elm = compileDirective('default-no-title');\n  119        angular.element(elm[0]).triggerHandler('click');\n  120:       expect(sandboxEl.find('.alert > strong').html()).toBe('');\n  121:       expect(sandboxEl.find('.alert > span').html()).toBe(scope.alert.content);\n  122      });\n  123  \n  ...\n  194          var elm = compileDirective('default', {alert: {title: 'title<br>next', content: 'content<br>next'}});\n  195          angular.element(elm[0]).triggerHandler('click');\n  196:         expect(sandboxEl.find('.alert > strong').html()).not.toBe('title<br>next');\n  197:         expect(sandboxEl.find('.alert > span').html()).not.toBe('content<br>next');\n  198        });\n  199  \n  ...\n  201          var elm = compileDirective('options-html', {html: 'true'});\n  202          angular.element(elm[0]).triggerHandler('click');\n  203:         expect(sandboxEl.find('.alert > strong').html()).toBe('title<br>next');\n  204:         expect(sandboxEl.find('.alert > span').html()).toBe('content<br>next');\n  205        });\n  206  \n  ...\n  208          var elm = compileDirective('options-html', {html: 'false'});\n  209          angular.element(elm[0]).triggerHandler('click');\n  210:         expect(sandboxEl.find('.alert > strong').html()).not.toBe('title<br>next');\n  211:         expect(sandboxEl.find('.alert > span').html()).not.toBe('content<br>next');\n  212        });\n  213  \n  ...\n  221          var elm = compileDirective('options-template');\n  222          angular.element(elm[0]).triggerHandler('click');\n  223:         expect(sandboxEl.find('.alert-inner').text()).toBe('foo: ' + scope.alert.title);\n  224        });\n  225  \n  ...\n  228          var elm = compileDirective('options-template');\n  229          angular.element(elm[0]).triggerHandler('click');\n  230:         expect(sandboxEl.find('.alert-inner').text()).toBe('foobarbaz');\n  231          // Consecutive toggles\n  232          angular.element(elm[0]).triggerHandler('click');\n  233          angular.element(elm[0]).triggerHandler('click');\n  234:         expect(sandboxEl.find('.alert-inner').text()).toBe('foobarbaz');\n  235        });\n  236  \n  ...\n  239          var elm = compileDirective('options-template');\n  240          angular.element(elm[0]).triggerHandler('click');\n  241:         expect(angular.element(sandboxEl.find('.alert-inner > .btn')[0]).triggerHandler('click'));\n  242          expect(scope.alert.counter).toBe(1);\n  243          // Consecutive toggles\n  244          angular.element(elm[0]).triggerHandler('click');\n  245          angular.element(elm[0]).triggerHandler('click');\n  246:         expect(angular.element(sandboxEl.find('.alert-inner > .btn')[0]).triggerHandler('click'));\n  247          expect(scope.alert.counter).toBe(2);\n  248        });\n  ...\n  258        it('should remove alert when data-keyboard is truthy', function() {\n  259          var elm = compileDirective('options-keyboard', {keyboard: 'true'});\n  260:         expect(bodyEl.find('.alert').length).toBe(0);\n  261          angular.element(elm[0]).triggerHandler('click');\n  262:         var alert = bodyEl.find('.alert');\n  263          expect(alert.length).toBe(1);\n  264          var evt = jQuery.Event( 'keyup', { keyCode: 27, which: 27 } );\n  265          alert.triggerHandler(evt)\n  266:         expect(bodyEl.find('.alert').length).toBe(0);\n  267        });\n  268  \n  269        it('should NOT remove alert when data-keyboard is falsy', function() {\n  270          var elm = compileDirective('options-keyboard', {keyboard: 'false'});\n  271:         expect(bodyEl.find('.alert').length).toBe(0);\n  272          angular.element(elm[0]).triggerHandler('click');\n  273:         var alert = bodyEl.find('.alert');\n  274          expect(alert.length).toBe(1);\n  275          var evt = jQuery.Event( 'keyup', { keyCode: 27, which: 27 } );\n  276          alert.triggerHandler(evt)\n  277:         expect(bodyEl.find('.alert').length).toBe(1);\n  278        });\n  279  \n  ...\n  301          var elm = compileDirective('options-container', angular.extend({}, templates['default'].scope.alert, {container: 'false'}));\n  302          angular.element(elm[0]).triggerHandler('click');\n  303:         expect(sandboxEl.find('.alert').length).toBe(1);\n  304        });\n  305  \n  ...\n  311          var elm = compileDirective('default');\n  312          angular.element(elm[0]).triggerHandler('click');\n  313:         expect(sandboxEl.find('.alert button').length).toBe(1);\n  314        })\n  315  \n  ...\n  317          var elm = compileDirective('options-dismissable', {dismissable: 'true'});\n  318          angular.element(elm[0]).triggerHandler('click');\n  319:         expect(sandboxEl.find('.alert button').length).toBe(1);\n  320        })\n  321  \n  ...\n  323          var elm = compileDirective('options-dismissable', {dismissable: 'false'});\n  324          angular.element(elm[0]).triggerHandler('click');\n  325:         expect(sandboxEl.find('.alert button').length).toBe(0);\n  326        })\n  327  \n\n/Users/olivier/Projects/angular-strap/src/aside/test/aside.spec.js:\n   89        var elm = compileDirective('default');\n   90        angular.element(elm[0]).triggerHandler('click');\n   91:       expect(sandboxEl.find('.aside-title').html()).toBe(scope.aside.title);\n   92:       expect(sandboxEl.find('.aside-body').html()).toBe(scope.aside.content);\n   93      });\n   94  \n   ..\n   96        var elm = compileDirective('markup-scope');\n   97        angular.element(elm[0]).triggerHandler('click');\n   98:       expect(sandboxEl.find('.aside-title').html()).toBe(scope.aside.title);\n   99:       expect(sandboxEl.find('.aside-body').html()).toBe(scope.aside.content);\n  100      });\n  101  \n  102      it('should support ngRepeat markup inside', function() {\n  103        var elm = compileDirective('markup-ngRepeat');\n  104:       angular.element(elm.find('[bs-aside]')).triggerHandler('click');\n  105:       expect(sandboxEl.find('.aside-title').html()).toBe(scope.items[0].aside.title);\n  106:       expect(sandboxEl.find('.aside-body').html()).toBe(scope.items[0].aside.content);\n  107      });\n  108  \n  ...\n  143          var elm = compileDirective('default', {aside: {title: 'title<br>next', content: 'content<br>next'}});\n  144          angular.element(elm[0]).triggerHandler('click');\n  145:         expect(sandboxEl.find('.aside-title').html()).not.toBe('title<br>next');\n  146:         expect(sandboxEl.find('.aside-body').html()).not.toBe('content<br>next');\n  147        });\n  148  \n  ...\n  150          var elm = compileDirective('options-html', {html: 'true'});\n  151          angular.element(elm[0]).triggerHandler('click');\n  152:         expect(sandboxEl.find('.aside-title').html()).toBe('title<br>next');\n  153:         expect(sandboxEl.find('.aside-body').html()).toBe('content<br>next');\n  154        });\n  155  \n  ...\n  157          var elm = compileDirective('options-html', {html: 'false'});\n  158          angular.element(elm[0]).triggerHandler('click');\n  159:         expect(sandboxEl.find('.aside-title').html()).not.toBe('title<br>next');\n  160:         expect(sandboxEl.find('.aside-body').html()).not.toBe('content<br>next');\n  161        });\n  162  \n  ...\n  169          var elm = compileDirective('options-template');\n  170          angular.element(elm[0]).triggerHandler('click');\n  171:         expect(sandboxEl.find('.aside-inner').text()).toBe('foo: ' + scope.aside.title);\n  172        });\n  173  \n  ...\n  176          var elm = compileDirective('options-template');\n  177          angular.element(elm[0]).triggerHandler('click');\n  178:         expect(sandboxEl.find('.aside-inner').text()).toBe('foobarbaz');\n  179          // Consecutive toggles\n  180          angular.element(elm[0]).triggerHandler('click');\n  181          angular.element(elm[0]).triggerHandler('click');\n  182:         expect(sandboxEl.find('.aside-inner').text()).toBe('foobarbaz');\n  183        });\n  184  \n  ...\n  187          var elm = compileDirective('options-template');\n  188          angular.element(elm[0]).triggerHandler('click');\n  189:         expect(angular.element(sandboxEl.find('.aside-inner > .btn')[0]).triggerHandler('click'));\n  190          expect(scope.aside.counter).toBe(1);\n  191          // Consecutive toggles\n  192          angular.element(elm[0]).triggerHandler('click');\n  193          angular.element(elm[0]).triggerHandler('click');\n  194:         expect(angular.element(sandboxEl.find('.aside-inner > .btn')[0]).triggerHandler('click'));\n  195          expect(scope.aside.counter).toBe(2);\n  196        });\n  ...\n  211          // before counting the number of scopes expected.\n  212          angular.element(elm[0]).triggerHandler('click');\n  213:         expect(angular.element(sandboxEl.find('.aside-inner > .btn')[0]).triggerHandler('click'));\n  214  \n  215          // repeat process to test creation/destruction of inner scopes\n  ...\n  220  \n  221            // hide aside\n  222:           expect(angular.element(sandboxEl.find('.aside-inner > .btn')[0]).triggerHandler('click'));\n  223          }\n  224  \n  ...\n  238        it('should show backdrop by default', function() {\n  239          var elm = compileDirective('default');\n  240:         expect(bodyEl.find('.aside-backdrop').length).toBe(0);\n  241          angular.element(elm[0]).triggerHandler('click');\n  242:         expect(bodyEl.find('.aside-backdrop').length).toBe(1);\n  243        });\n  244  \n  245        it('should show backdrop if data-backdrop is truthy', function() {\n  246          var elm = compileDirective('options-backdrop', {backdrop: 'true'});\n  247:         expect(bodyEl.find('.aside-backdrop').length).toBe(0);\n  248          angular.element(elm[0]).triggerHandler('click');\n  249:         expect(bodyEl.find('.aside-backdrop').length).toBe(1);\n  250        });\n  251  \n  252        it('should not show backdrop if data-backdrop is false', function() {\n  253          var elm = compileDirective('options-backdrop', {backdrop: 'false'});\n  254:         expect(bodyEl.find('.aside-backdrop').length).toBe(0);\n  255          angular.element(elm[0]).triggerHandler('click');\n  256:         expect(bodyEl.find('.aside-backdrop').length).toBe(0);\n  257        });\n  258  \n  ...\n  263        it('should remove aside when data-keyboard is truthy', function() {\n  264          var elm = compileDirective('options-keyboard', {keyboard: 'true'});\n  265:         expect(bodyEl.find('.aside').length).toBe(0);\n  266          angular.element(elm[0]).triggerHandler('click');\n  267:         var aside = bodyEl.find('.aside');\n  268          expect(aside.length).toBe(1);\n  269          var evt = jQuery.Event( 'keyup', { keyCode: 27, which: 27 } );\n  270          aside.triggerHandler(evt)\n  271:         expect(bodyEl.find('.aside').length).toBe(0);\n  272        });\n  273  \n  274        it('should NOT remove aside when data-keyboard is falsy', function() {\n  275          var elm = compileDirective('options-keyboard', {keyboard: 'false'});\n  276:         expect(bodyEl.find('.aside').length).toBe(0);\n  277          angular.element(elm[0]).triggerHandler('click');\n  278:         var aside = bodyEl.find('.aside');\n  279          expect(aside.length).toBe(1);\n  280          var evt = jQuery.Event( 'keyup', { keyCode: 27, which: 27 } );\n  281          aside.triggerHandler(evt)\n  282:         expect(bodyEl.find('.aside').length).toBe(1);\n  283        });\n  284  \n  ...\n  306          var elm = compileDirective('options-container', angular.extend({}, templates['default'].scope.aside, {container: 'false'}));\n  307          angular.element(elm[0]).triggerHandler('click');\n  308:         expect(sandboxEl.find('.aside').length).toBe(1);\n  309        });\n  310  \n\n/Users/olivier/Projects/angular-strap/src/button/test/button.checkbox.spec.js:\n  157      it('with ngrepeat markup', function () {\n  158        var element = compileDirective('checkbox-with-ngrepeat', {checkbox: {value: {left: false, right: true}}});\n  159:       var childInputs = element.find('input');\n  160        expect(childInputs.eq(1).parent('label')).toHaveClass('active');\n  161      });\n  ...\n  220      it('correctly compile the markup', function () {\n  221        var element = compileDirective('checkbox-group', {checkbox: {value: {left: false, right: true}}});\n  222:       var firstChild = element.find('input').eq(0);\n  223        expect(element.attr('data-toggle')).toBe('buttons');\n  224        expect(firstChild.attr('ng-model')).toBe('checkbox.value.left');\n  ...\n  228      it('correctly link children directives', function () {\n  229        var element = compileDirective('checkbox-group', {checkbox: {value: {left: false, right: true}}});\n  230:       var secondChild = element.find('input').eq(1);\n  231        expect(secondChild.parent('label')).toHaveClass('active');\n  232      });\n\n/Users/olivier/Projects/angular-strap/src/button/test/button.radio.spec.js:\n  251      it('with ngrepeat markup', function () {\n  252        var element = compileDirective('radio-with-ngrepeat', {radio: {value: 'right'}});\n  253:       var childInputs = element.find('input');\n  254        expect(childInputs.eq(1).parent('label')).toHaveClass('active');\n  255      });\n  ...\n  333      it('correctly compile the markup', function () {\n  334        var element = compileDirective('radio-group', {radio: {value: 'right'}});\n  335:       var firstChild = element.find('input').eq(0);\n  336        expect(element.attr('data-toggle')).toBe('buttons');\n  337        expect(firstChild.attr('ng-model')).toBe('radio.value');\n  ...\n  341      it('correctly link children directives', function () {\n  342        var element = compileDirective('radio-group', {radio: {value: 'right'}});\n  343:       var secondChild = element.find('input').eq(1);\n  344        expect(secondChild.parent('label')).toHaveClass('active');\n  345      });\n\n/Users/olivier/Projects/angular-strap/src/collapse/test/collapse.spec.js:\n  102      it('should navigate between panels on click', function() {\n  103        var elm = compileDirective('default');\n  104:       expect(sandboxEl.find('[bs-collapse-target]:eq(0)').hasClass('in')).toBeTruthy();\n  105:       sandboxEl.find('[bs-collapse-toggle]:eq(1)').triggerHandler('click');\n  106:       expect(sandboxEl.find('[bs-collapse-target]:eq(0)').hasClass('in')).toBeFalsy();\n  107:       expect(sandboxEl.find('[bs-collapse-target]:eq(1)').hasClass('in')).toBeTruthy();\n  108:       sandboxEl.find('[bs-collapse-toggle]:eq(1)').triggerHandler('click');\n  109:       expect(sandboxEl.find('[bs-collapse-target]:eq(1)').hasClass('in')).toBeFalsy();\n  110      });\n  111  \n  ...\n  116      it('should navigate between panels on click', function() {\n  117        var elm = compileDirective('jade-attributes');\n  118:       expect(sandboxEl.find('[bs-collapse-target]:eq(0)').hasClass('in')).toBeTruthy();\n  119:       sandboxEl.find('[bs-collapse-toggle]:eq(1)').triggerHandler('click');\n  120:       expect(sandboxEl.find('[bs-collapse-target]:eq(0)').hasClass('in')).toBeFalsy();\n  121:       expect(sandboxEl.find('[bs-collapse-target]:eq(1)').hasClass('in')).toBeTruthy();\n  122:       sandboxEl.find('[bs-collapse-toggle]:eq(1)').triggerHandler('click');\n  123:       expect(sandboxEl.find('[bs-collapse-target]:eq(1)').hasClass('in')).toBeFalsy();\n  124      });\n  125  \n  ...\n  130      it('should navigate between panels on click', function() {\n  131        var elm = compileDirective('template-ngRepeat');\n  132:       expect(sandboxEl.find('[bs-collapse-target]:eq(0)').hasClass('in')).toBeTruthy();\n  133:       sandboxEl.find('[bs-collapse-toggle]:eq(1)').triggerHandler('click');\n  134:       expect(sandboxEl.find('[bs-collapse-target]:eq(0)').hasClass('in')).toBeFalsy();\n  135:       expect(sandboxEl.find('[bs-collapse-target]:eq(1)').hasClass('in')).toBeTruthy();\n  136      });\n  137  \n  ...\n  148  \n  149        scope.$digest();\n  150:       sandboxEl.find('[bs-collapse-toggle]:eq(2)').triggerHandler('click');\n  151        expect(scope.panels.length).toBe(3);\n  152        expect(scope.panel.active).toBe(2);\n  ...\n  160        var elm = compileDirective('binding-ngModel');\n  161        expect(scope.panel.active).toBe(1);\n  162:       expect(sandboxEl.find('[bs-collapse-target].in').parent('.panel-default').index()).toBe(scope.panel.active);\n  163        scope.panel.active = 0;\n  164        scope.$digest();\n  165:       expect(sandboxEl.find('[bs-collapse-target].in').parent('.panel-default').index()).toBe(scope.panel.active);\n  166      });\n  167  \n  ...\n  169        var elm = compileDirective('binding-ngModel');\n  170        expect(scope.panel.active).toBe(1);\n  171:       sandboxEl.find('[bs-collapse-toggle]:eq(0)').triggerHandler('click');\n  172        expect(scope.panel.active).toBe(0);\n  173      });\n  ...\n  186        it('should default to `am-collapse` animation', function() {\n  187          var elm = compileDirective('default');\n  188:         expect(sandboxEl.find('[bs-collapse-target]').hasClass('am-collapse')).toBeTruthy();\n  189        });\n  190  \n  191        it('should support custom animation', function() {\n  192          var elm = compileDirective('options-animation');\n  193:         expect(sandboxEl.find('[bs-collapse-target]').hasClass('am-flip-x')).toBeTruthy();\n  194        });\n  195  \n  ...\n  200        it('should support custom activeClass', function() {\n  201          var elm = compileDirective('options-activeClass');\n  202:         expect(sandboxEl.find('[bs-collapse-target]:eq(0)').hasClass('in')).toBeFalsy();\n  203:         expect(sandboxEl.find('[bs-collapse-target]:eq(0)').hasClass('active')).toBeTruthy();\n  204:         sandboxEl.find('[bs-collapse-toggle]:eq(1)').triggerHandler('click');\n  205:         expect(sandboxEl.find('[bs-collapse-target]:eq(0)').hasClass('active')).toBeFalsy();\n  206:         expect(sandboxEl.find('[bs-collapse-target]:eq(1)').hasClass('active')).toBeTruthy();\n  207        });\n  208  \n  ...\n  213        it('should support disallowToggle flag if true', function() {\n  214          var elm = compileDirective('options-disallowToggle-true');\n  215:         var $heading = sandboxEl.find('a[bs-collapse-toggle]:eq(0)');\n  216:         var $target = sandboxEl.find('[bs-collapse-target]:eq(0)');\n  217          expect($target.hasClass('in')).toBeTruthy();\n  218          $heading.triggerHandler('click');\n  ...\n  222        it('should NOT support disallowToggle flag if false', function() {\n  223          var elm = compileDirective('options-disallowToggle-false');\n  224:         var $heading = sandboxEl.find('a[bs-collapse-toggle]:eq(0)');\n  225:         var $target = sandboxEl.find('[bs-collapse-target]:eq(0)');\n  226          expect($target.hasClass('in')).toBeTruthy();\n  227          $heading.triggerHandler('click');\n  ...\n  235        it('should support startCollapsed flag when true', function() {\n  236          var elm = compileDirective('options-startCollapsed-true');\n  237:         expect(sandboxEl.find('[bs-collapse-target]').hasClass('in')).toBeFalsy();\n  238:         sandboxEl.find('[bs-collapse-toggle]:eq(0)').triggerHandler('click');\n  239:         expect(sandboxEl.find('[bs-collapse-target]:eq(0)').hasClass('in')).toBeTruthy();\n  240:         sandboxEl.find('[bs-collapse-toggle]:eq(0)').triggerHandler('click');\n  241:         expect(sandboxEl.find('[bs-collapse-target]:eq(0)').hasClass('in')).toBeFalsy();\n  242        });\n  243  \n  244        it('should NOT support startCollapsed flag when false', function() {\n  245          var elm = compileDirective('options-startCollapsed-false');\n  246:         expect(sandboxEl.find('[bs-collapse-target]').hasClass('in')).toBeTruthy();\n  247:         sandboxEl.find('[bs-collapse-toggle]:eq(0)').triggerHandler('click');\n  248:         expect(sandboxEl.find('[bs-collapse-target]:eq(0)').hasClass('in')).toBeFalsy();\n  249:         sandboxEl.find('[bs-collapse-toggle]:eq(0)').triggerHandler('click');\n  250:         expect(sandboxEl.find('[bs-collapse-target]:eq(0)').hasClass('in')).toBeTruthy();\n  251        });\n  252  \n  ...\n  259          it('should open each panel on click when allowMultiple is true', function() {\n  260            var elm = compileDirective('default-multiple-true');\n  261:           expect(sandboxEl.find('[bs-collapse-target]:eq(0)').hasClass('in')).toBeTruthy();\n  262:           expect(sandboxEl.find('[bs-collapse-target]:eq(1)').hasClass('in')).toBeFalsy();\n  263:           sandboxEl.find('[bs-collapse-toggle]:eq(1)').triggerHandler('click');\n  264:           expect(sandboxEl.find('[bs-collapse-target]:eq(0)').hasClass('in')).toBeTruthy();\n  265:           expect(sandboxEl.find('[bs-collapse-target]:eq(1)').hasClass('in')).toBeTruthy();\n  266:           sandboxEl.find('[bs-collapse-toggle]:eq(1)').triggerHandler('click');\n  267:           expect(sandboxEl.find('[bs-collapse-target]:eq(0)').hasClass('in')).toBeTruthy();\n  268:           expect(sandboxEl.find('[bs-collapse-target]:eq(1)').hasClass('in')).toBeFalsy();\n  269          });\n  270  \n  271          it('should open each panel on click when allowMultiple is false', function() {\n  272            var elm = compileDirective('default-multiple-false');\n  273:           expect(sandboxEl.find('[bs-collapse-target]:eq(0)').hasClass('in')).toBeTruthy();\n  274:           expect(sandboxEl.find('[bs-collapse-target]:eq(1)').hasClass('in')).toBeFalsy();\n  275:           sandboxEl.find('[bs-collapse-toggle]:eq(1)').triggerHandler('click');\n  276:           expect(sandboxEl.find('[bs-collapse-target]:eq(0)').hasClass('in')).toBeFalsy();\n  277:           expect(sandboxEl.find('[bs-collapse-target]:eq(1)').hasClass('in')).toBeTruthy();\n  278          });\n  279  \n  ...\n  285            var elm = compileDirective('binding-ngModel-multiple', { panel: { active: [1,2] } });\n  286            expect(scope.panel.active).toEqual([1,2]);\n  287:           expect(sandboxEl.find('[bs-collapse-target]:eq(0)').hasClass('in')).toBeFalsy();\n  288:           expect(sandboxEl.find('[bs-collapse-target]:eq(1)').hasClass('in')).toBeTruthy();\n  289:           expect(sandboxEl.find('[bs-collapse-target]:eq(2)').hasClass('in')).toBeTruthy();\n  290          });\n  291  \n  ...\n  293            var elm = compileDirective('binding-ngModel-multiple');\n  294            expect(scope.panel.active).toEqual([1]);\n  295:           expect(sandboxEl.find('[bs-collapse-target]:eq(0)').hasClass('in')).toBeFalsy();\n  296:           expect(sandboxEl.find('[bs-collapse-target]:eq(1)').hasClass('in')).toBeTruthy();\n  297:           expect(sandboxEl.find('[bs-collapse-target]:eq(2)').hasClass('in')).toBeFalsy();\n  298            scope.panel.active = [0,2];\n  299            scope.$digest();\n  300:           expect(sandboxEl.find('[bs-collapse-target]:eq(0)').hasClass('in')).toBeTruthy();\n  301:           expect(sandboxEl.find('[bs-collapse-target]:eq(1)').hasClass('in')).toBeFalsy();\n  302:           expect(sandboxEl.find('[bs-collapse-target]:eq(2)').hasClass('in')).toBeTruthy();\n  303          });\n  304  \n  ...\n  307            var elm = compileDirective('binding-ngModel-multiple', {panel: {active: outerModel}});\n  308            expect(scope.panel.active).toEqual([1]);\n  309:           sandboxEl.find('[bs-collapse-toggle]:eq(0)').triggerHandler('click');\n  310            expect(scope.panel.active).toEqual([1,0]);\n  311            expect(scope.panel.active).toEqual(outerModel);\n  ...\n  318          it('should support custom activeClass', function() {\n  319            var elm = compileDirective('options-activeClass-multiple');\n  320:           expect(sandboxEl.find('[bs-collapse-target]:eq(0)').hasClass('in')).toBeFalsy();\n  321:           expect(sandboxEl.find('[bs-collapse-target]:eq(0)').hasClass('active')).toBeTruthy();\n  322:           sandboxEl.find('[bs-collapse-toggle]:eq(1)').triggerHandler('click');\n  323:           expect(sandboxEl.find('[bs-collapse-target]:eq(0)').hasClass('in')).toBeFalsy();\n  324:           expect(sandboxEl.find('[bs-collapse-target]:eq(0)').hasClass('active')).toBeTruthy();\n  325:           expect(sandboxEl.find('[bs-collapse-target]:eq(1)').hasClass('in')).toBeFalsy();\n  326:           expect(sandboxEl.find('[bs-collapse-target]:eq(1)').hasClass('active')).toBeTruthy();\n  327          });\n  328  \n\n/Users/olivier/Projects/angular-strap/src/datepicker/test/datepicker.spec.js:\n  256        var elm = compileDirective('default');\n  257        angular.element(elm[0]).triggerHandler('focus');\n  258:       expect(sandboxEl.find('.dropdown-menu tbody td').length).toBe(7 * 6);\n  259:       expect(sandboxEl.find('.dropdown-menu tbody td .btn').length).toBe(7 * 6);\n  260:       expect(sandboxEl.find('.dropdown-menu thead button:eq(1)').text()).toBe(dateFilter(today, 'MMMM yyyy'));\n  261        var todayDate = today.getDate();\n  262:       var firstDate = sandboxEl.find('.dropdown-menu tbody .btn:eq(0)').text() * 1;\n  263        expect(new Date(today.getFullYear(), today.getMonth() - (firstDate !== 1 ? 1 : 0), firstDate).getDay()).toBe($datepicker.defaults.startWeek);\n  264      });\n  ...\n  267        var elm = compileDirective('default');\n  268        angular.element(elm[0]).triggerHandler('focus');\n  269:       expect(sandboxEl.find('.dropdown-menu tbody td .btn-primary').text().trim() * 1).toBe(today.getDate());\n  270        expect(elm.val()).toBe((today.getMonth() + 1) + '/' + today.getDate() + '/' + (today.getFullYear() + '').substr(2));\n  271      });\n  ...\n  274        var elm = compileDirective('default');\n  275        angular.element(elm[0]).triggerHandler('focus');\n  276:       angular.element(sandboxEl.find('.dropdown-menu tbody .btn:contains(15)')[0]).triggerHandler('click');\n  277        expect(elm.val()).toBe((today.getMonth() + 1) + '/15/' + (today.getFullYear() + '').substr(2));\n  278      });\n  ...\n  283  \n  284        // change to next month\n  285:       angular.element(sandboxEl.find('.dropdown-menu thead button:eq(2)')[0]).triggerHandler('click');\n  286  \n  287        // select the first day of the month\n  288:       angular.element(sandboxEl.find('.dropdown-menu tbody .btn:contains(01)')[0]).triggerHandler('click');\n  289:       expect(sandboxEl.find('.dropdown-menu tbody td .btn-primary').text().trim() * 1).toBe(1);\n  290        expect(elm.val()).toBe((today.getMonth() + 1 + 1) + '/1/' + (today.getFullYear() + '').substr(2));\n  291      });\n  ...\n  330        for (var nextMonth = 1; nextMonth < 12; nextMonth++) {\n  331          // should show next month view when selecting next month button\n  332:         angular.element(sandboxEl.find('.dropdown-menu thead button:eq(2)')[0]).triggerHandler('click');\n  333:         expect(sandboxEl.find('.dropdown-menu thead button:eq(1)').text()).toBe(dateFilter(new Date(2014, nextMonth, 1), 'MMMM yyyy'));\n  334        }\n  335      });\n  ...\n  344        for (var previousMonth = 10; previousMonth > -1; previousMonth--) {\n  345          // should show previous month view when selecting previous month button\n  346:         angular.element(sandboxEl.find('.dropdown-menu thead button:eq(0)')[0]).triggerHandler('click');\n  347:         expect(sandboxEl.find('.dropdown-menu thead button:eq(1)').text()).toBe(dateFilter(new Date(2014, previousMonth, 1), 'MMMM yyyy'));\n  348        }\n  349      });\n  ...\n  354        angular.element(elm[0]).triggerHandler('focus');\n  355        expect(scope.$$childHead.$mode).toBe(0);\n  356:       angular.element(sandboxEl.find('.dropdown-menu thead button:eq(1)')[0]).triggerHandler('click');\n  357        expect(scope.$$childHead.$mode).toBe(1);\n  358      });\n  ...\n  363          var elm = compileDirective('default');\n  364          angular.element(elm[0]).triggerHandler('focus');\n  365:         angular.element(sandboxEl.find('.dropdown-menu thead button:eq(1)')[0]).triggerHandler('click');\n  366:         expect(sandboxEl.find('.dropdown-menu tbody td').length).toBe(4 * 3);\n  367:         expect(sandboxEl.find('.dropdown-menu tbody .btn').length).toBe(4 * 3);\n  368:         expect(sandboxEl.find('.dropdown-menu thead button:eq(1)').text()).toBe(dateFilter(today, 'yyyy'));\n  369        });\n  370  \n  ...\n  372          var elm = compileDirective('default');\n  373          angular.element(elm[0]).triggerHandler('focus');\n  374:         angular.element(sandboxEl.find('.dropdown-menu thead button:eq(1)')[0]).triggerHandler('click');\n  375:         expect(sandboxEl.find('.dropdown-menu tbody td .btn-primary').text()).toBe(dateFilter(today, 'MMM'));\n  376        });\n  377  \n  ...\n  383        angular.element(elm[0]).triggerHandler('focus');\n  384        expect(scope.$$childHead.$mode).toBe(0);\n  385:       angular.element(sandboxEl.find('.dropdown-menu thead button:eq(1)')[0]).triggerHandler('click');\n  386:       angular.element(sandboxEl.find('.dropdown-menu thead button:eq(1)')[0]).triggerHandler('click');\n  387        expect(scope.$$childHead.$mode).toBe(2);\n  388      });\n  ...\n  393          var elm = compileDirective('default');\n  394          angular.element(elm[0]).triggerHandler('focus');\n  395:         angular.element(sandboxEl.find('.dropdown-menu thead button:eq(1)')[0]).triggerHandler('click');\n  396:         angular.element(sandboxEl.find('.dropdown-menu thead button:eq(1)')[0]).triggerHandler('click');\n  397:         expect(sandboxEl.find('.dropdown-menu tbody td').length).toBe(4 * 3);\n  398:         expect(sandboxEl.find('.dropdown-menu tbody .btn').length).toBe(4 * 3);\n  399:         // expect(sandboxEl.find('.dropdown-menu thead button:eq(1)').text()).toBe(dateFilter(today, 'yyyy'));\n  400        });\n  401  \n  ...\n  403          var elm = compileDirective('default');\n  404          angular.element(elm[0]).triggerHandler('focus');\n  405:         angular.element(sandboxEl.find('.dropdown-menu thead button:eq(1)')[0]).triggerHandler('click');\n  406:         angular.element(sandboxEl.find('.dropdown-menu thead button:eq(1)')[0]).triggerHandler('click');\n  407:         expect(sandboxEl.find('.dropdown-menu tbody td .btn-primary').text()).toBe(dateFilter(today, 'yyyy'));\n  408        });\n  409  \n  ...\n  414        angular.element(elm[0]).triggerHandler('focus');\n  415        expect(elm.val()).toBe('');\n  416:       expect(sandboxEl.find('.dropdown-menu tbody td').length).toBe(7 * 6);\n  417:       expect(sandboxEl.find('.dropdown-menu tbody .btn').length).toBe(7 * 6);\n  418        elm.val('0');\n  419        angular.element(elm[0]).triggerHandler('change');\n  ...\n  424        angular.element(elm[0]).triggerHandler('focus');\n  425        expect(elm.val()).toBe('');\n  426:       expect(sandboxEl.find('.dropdown-menu tbody td').length).toBe(7 * 6);\n  427:       expect(sandboxEl.find('.dropdown-menu tbody .btn').length).toBe(7 * 6);\n  428        elm.val('0');\n  429        angular.element(elm[0]).triggerHandler('change');\n  ...\n  435        angular.element(elm[0]).triggerHandler('change');\n  436        angular.element(elm[0]).triggerHandler('focus');\n  437:       expect(sandboxEl.find('.dropdown-menu tbody td .btn-primary').text().trim() * 1).toBe(today.getDate());\n  438:       angular.element(sandboxEl.find('.dropdown-menu tbody td .btn-primary')[0]).triggerHandler('click');\n  439      });\n  440  \n  ...\n  448      it('should support ngRepeat markup', function() {\n  449        var elm = compileDirective('markup-ngRepeat');\n  450:       angular.element(elm.find('[bs-datepicker]:eq(0)')).triggerHandler('focus');\n  451:       expect(sandboxEl.find('.dropdown-menu tbody td').length).toBe(7 * 6);\n  452:       expect(sandboxEl.find('.dropdown-menu tbody .btn').length).toBe(7 * 6);\n  453      });\n  454  \n  ...\n  457        angular.element(elm[0]).triggerHandler('focus');\n  458        var spy = spyOn(scope, 'onChange').and.callThrough();\n  459:       angular.element(sandboxEl.find('.dropdown-menu tbody .btn:eq(1)')[0]).triggerHandler('click');\n  460        expect(spy).toHaveBeenCalled();\n  461      });\n  ...\n  470  \n  471        angular.element(elm[0]).triggerHandler('focus');\n  472:       expect(sandboxEl.find('.dropdown-menu tbody td .btn-primary').text().trim() * 1).toBe(testDate.getDate());\n  473        expect(elm.val()).toBe((testDate.getMonth() + 1) + '/' + testDate.getDate() + '/' + (testDate.getFullYear() + '').substr(2));\n  474      });\n  ...\n  539          elm = compileDirective('default', { selectedDate: new Date(2012, monthToCheck, 1) });\n  540          angular.element(elm[0]).triggerHandler('focus');\n  541:         firstDay = sandboxEl.find('.dropdown-menu tbody .btn:eq(0)').text() * 1;\n  542          previousDay = firstDay - 1;\n  543        });\n  ...\n  551            // 6 rows (weeks) * 7 columns (days)\n  552            for(var index = 0; index < 7 * 6; index++) {\n  553:             var indexDay = sandboxEl.find('.dropdown-menu tbody td .btn:eq(' + index + ')').text() * 1;\n  554              expect(indexDay).toBeNextDayOrFirstDay(previousDay);\n  555              previousDay = indexDay;\n  ...\n  593  \n  594        for (var i = 0; i < 10; i++) {\n  595:         angular.element(sandboxEl.find('.dropdown-menu thead button:eq(2)')[0]).triggerHandler('click');\n  596          scope.$digest();\n  597        }\n  ...\n  769          expect(sandboxEl.children('.dropdown-menu.datepicker').length).toBe(0);\n  770          angular.element(elm[0]).triggerHandler('focus');\n  771:         angular.element(sandboxEl.find('.dropdown-menu tbody .btn:first')).triggerHandler('click');\n  772          $timeout.flush();\n  773          expect(sandboxEl.children('.dropdown-menu.datepicker').length).toBe(0);\n  ...\n  778          expect(sandboxEl.children('.dropdown-menu.datepicker').length).toBe(0);\n  779          angular.element(elm[0]).triggerHandler('focus');\n  780:         angular.element(sandboxEl.find('.dropdown-menu tbody .btn:first')).triggerHandler('click');\n  781          $timeout.flush();\n  782          expect(sandboxEl.children('.dropdown-menu.datepicker').length).not.toBe(0);\n  ...\n  833          var elm = compileDirective('options-template');\n  834          angular.element(elm[0]).triggerHandler('focus');\n  835:         expect(sandboxEl.find('.dropdown-inner').text()).toBe('foo: \"' + scope.selectedDate.toISOString() + '\"');\n  836        });\n  837  \n  ...\n  840          var elm = compileDirective('options-template');\n  841          angular.element(elm[0]).triggerHandler('focus');\n  842:         expect(sandboxEl.find('.dropdown-inner').text()).toBe('123');\n  843          // Consecutive toggles\n  844          angular.element(elm[0]).triggerHandler('blur');\n  845          angular.element(elm[0]).triggerHandler('focus');\n  846:         expect(sandboxEl.find('.dropdown-inner').text()).toBe('123');\n  847        });\n  848  \n  ...\n  852          scope.dropdown = {counter: 0};\n  853          angular.element(elm[0]).triggerHandler('focus');\n  854:         expect(angular.element(sandboxEl.find('.dropdown-inner > .btn')[0]).triggerHandler('click'));\n  855          expect(scope.dropdown.counter).toBe(1);\n  856          // Consecutive toggles\n  857          angular.element(elm[0]).triggerHandler('blur');\n  858          angular.element(elm[0]).triggerHandler('focus');\n  859:         expect(angular.element(sandboxEl.find('.dropdown-inner > .btn')[0]).triggerHandler('click'));\n  860          expect(scope.dropdown.counter).toBe(2);\n  861        });\n  ...\n  869          expect(elm.val()).toBe('22/02/1986');\n  870          angular.element(elm[0]).triggerHandler('focus');\n  871:         angular.element(sandboxEl.find('.dropdown-menu tbody .btn:contains(16)')).triggerHandler('click');\n  872          expect(elm.val()).toBe('16/02/1986');\n  873        });\n  ...\n  877          expect(elm.val()).toBe('2014-04-11');\n  878          angular.element(elm[0]).triggerHandler('focus');\n  879:         angular.element(sandboxEl.find('.dropdown-menu tbody .btn:contains(16)')).triggerHandler('click');\n  880          expect(elm.val()).toBe('2014-04-16');\n  881        });\n  ...\n  885          expect(elm.val()).toBe('3/22/86');\n  886          angular.element(elm[0]).triggerHandler('focus');\n  887:         angular.element(sandboxEl.find('.dropdown-menu tbody .btn:contains(16)')).triggerHandler('click');\n  888          expect(elm.val()).toBe('3/16/86');\n  889        });\n  ...\n  893          expect(elm.val()).toBe('3/22/86');\n  894          angular.element(elm[0]).triggerHandler('focus');\n  895:         angular.element(sandboxEl.find('.dropdown-menu tbody .btn:contains(16)')).triggerHandler('click');\n  896          expect(elm.val()).toBe('3/16/86');\n  897        });\n  ...\n  901          expect(elm.val()).toBe('12/26/14');\n  902          angular.element(elm[0]).triggerHandler('focus');\n  903:         angular.element(sandboxEl.find('.dropdown-menu tbody .btn:contains(16)')).triggerHandler('click');\n  904          expect(elm.val()).toBe('12/16/14');\n  905        });\n  ...\n  913          expect(elm.val()).toBe('1986-02-22');\n  914          angular.element(elm[0]).triggerHandler('focus');\n  915:         angular.element(sandboxEl.find('.dropdown-menu tbody .btn:contains(24)')).triggerHandler('click');\n  916          expect(elm.val()).toBe('1986-02-24');\n  917        });\n  ...\n  921          expect(elm.val()).toBe('Saturday February 22, 1986');\n  922          angular.element(elm[0]).triggerHandler('focus');\n  923:         angular.element(sandboxEl.find('.dropdown-menu tbody .btn:contains(24)')).triggerHandler('click');\n  924          expect(elm.val()).toBe('Monday February 24, 1986');\n  925        });\n  ...\n  929          expect(elm.val()).toBe('Feb 22, 1986');\n  930          angular.element(elm[0]).triggerHandler('focus');\n  931:         angular.element(sandboxEl.find('.dropdown-menu tbody .btn:contains(24)')).triggerHandler('click');\n  932          expect(elm.val()).toBe('Feb 24, 1986');\n  933        });\n  ...\n  958            expect(scope.selectedDate.toDateString()).toBe(dates[i].toDateString());\n  959            angular.element(elm[0]).triggerHandler('focus');\n  960:           angular.element(sandboxEl.find('.dropdown-menu tbody .btn:contains(15)')).triggerHandler('click');\n  961            expect(elm.val()).toBe(dateFilter(dates[i], 'yyyy-MM-\\'15\\'', 'UTC'));\n  962          });\n  ...\n  983          var elm = compileDirective('options-minDate');\n  984          angular.element(elm[0]).triggerHandler('focus');\n  985:         expect(sandboxEl.find('.dropdown-menu tbody button:contains(19)').is(':disabled')).toBeTruthy();\n  986:         expect(sandboxEl.find('.dropdown-menu tbody button:contains(20)').is(':disabled')).toBeFalsy();\n  987          scope.minDate = '02/12/86';\n  988          scope.$digest();\n  989:         expect(sandboxEl.find('.dropdown-menu tbody button:contains(11)').is(':disabled')).toBeTruthy();\n  990:         expect(sandboxEl.find('.dropdown-menu tbody button:contains(12)').is(':disabled')).toBeFalsy();\n  991        });\n  992  \n  ...\n  995          angular.element(elm[0]).triggerHandler('focus');\n  996          var todayDate = today.getDate();\n  997:         expect(sandboxEl.find('.dropdown-menu tbody button[disabled]').length > 0).toBeTruthy();\n  998:         expect(sandboxEl.find('.dropdown-menu tbody button:contains(' + todayDate + ').btn-primary').length).toBe(1);\n  999:         expect(sandboxEl.find('.dropdown-menu tbody button:contains(' + todayDate + ').btn-primary').is(':disabled')).toBeFalsy();\n 1000        });\n 1001  \n ....\n 1003          var elm = compileDirective('options-minDate-number');\n 1004          angular.element(elm[0]).triggerHandler('focus');\n 1005:         expect(sandboxEl.find('.dropdown-menu tbody button:contains(19)').is(':disabled')).toBeTruthy();\n 1006:         expect(sandboxEl.find('.dropdown-menu tbody button:contains(20)').is(':disabled')).toBeFalsy();\n 1007        });\n 1008  \n ....\n 1010          var elm = compileDirective('options-minDate-date');\n 1011          angular.element(elm[0]).triggerHandler('focus');\n 1012:         expect(sandboxEl.find('.dropdown-menu tbody button:contains(19)').is(':disabled')).toBeTruthy();\n 1013:         expect(sandboxEl.find('.dropdown-menu tbody button:contains(20)').is(':disabled')).toBeFalsy();\n 1014        });\n 1015  \n ....\n 1028          var elm = compileDirective('options-minDate');\n 1029          angular.element(elm[0]).triggerHandler('focus');\n 1030:         expect(sandboxEl.find('.dropdown-menu tbody button:contains(19)').is(':disabled')).toBeTruthy();\n 1031:         expect(sandboxEl.find('.dropdown-menu tbody button:contains(20)').is(':disabled')).toBeFalsy();\n 1032          scope.minDate = '';\n 1033          scope.$digest();\n 1034:         expect(sandboxEl.find('.dropdown-menu tbody button:contains(19)').is(':disabled')).toBeFalsy();\n 1035:         expect(sandboxEl.find('.dropdown-menu tbody button:contains(20)').is(':disabled')).toBeFalsy();\n 1036        });\n 1037  \n ....\n 1043          var elm = compileDirective('options-maxDate');\n 1044          angular.element(elm[0]).triggerHandler('focus');\n 1045:         expect(sandboxEl.find('.dropdown-menu tbody button:contains(24)').is(':disabled')).toBeFalsy();\n 1046:         expect(sandboxEl.find('.dropdown-menu tbody button:contains(25)').is(':disabled')).toBeTruthy();\n 1047          scope.maxDate = '02/12/86';\n 1048          scope.$digest();\n 1049          // @TODO fixme\n 1050:         // expect(sandboxEl.find('.dropdown-menu tbody button:contains(12)').is(':disabled')).toBeFalsy();\n 1051:         expect(sandboxEl.find('.dropdown-menu tbody button:contains(13)').is(':disabled')).toBeTruthy();\n 1052        });\n 1053  \n ....\n 1056          angular.element(elm[0]).triggerHandler('focus');\n 1057          var todayDate = today.getDate();\n 1058:         expect(sandboxEl.find('.dropdown-menu tbody button[disabled]').length > 0).toBeTruthy();\n 1059:         expect(sandboxEl.find('.dropdown-menu tbody button:contains(' + todayDate + ').btn-primary').length).toBe(1);\n 1060:         expect(sandboxEl.find('.dropdown-menu tbody button:contains(' + todayDate + ').btn-primary').is(':disabled')).toBeFalsy();\n 1061        });\n 1062  \n ....\n 1064          var elm = compileDirective('options-maxDate-number');\n 1065          angular.element(elm[0]).triggerHandler('focus');\n 1066:         expect(sandboxEl.find('.dropdown-menu tbody button:contains(24)').is(':disabled')).toBeFalsy();\n 1067:         expect(sandboxEl.find('.dropdown-menu tbody button:contains(25)').is(':disabled')).toBeTruthy();\n 1068        });\n 1069  \n ....\n 1071          var elm = compileDirective('options-maxDate-date');\n 1072          angular.element(elm[0]).triggerHandler('focus');\n 1073:         expect(sandboxEl.find('.dropdown-menu tbody button:contains(24)').is(':disabled')).toBeFalsy();\n 1074:         expect(sandboxEl.find('.dropdown-menu tbody button:contains(25)').is(':disabled')).toBeTruthy();\n 1075        });\n 1076  \n ....\n 1089          var elm = compileDirective('options-maxDate');\n 1090          angular.element(elm[0]).triggerHandler('focus');\n 1091:         expect(sandboxEl.find('.dropdown-menu tbody button:contains(24)').is(':disabled')).toBeFalsy();\n 1092:         expect(sandboxEl.find('.dropdown-menu tbody button:contains(25)').is(':disabled')).toBeTruthy();\n 1093          scope.maxDate = '';\n 1094          scope.$digest();\n 1095:         expect(sandboxEl.find('.dropdown-menu tbody button:contains(24)').is(':disabled')).toBeFalsy();\n 1096:         expect(sandboxEl.find('.dropdown-menu tbody button:contains(25)').is(':disabled')).toBeFalsy();\n 1097        });\n 1098  \n ....\n 1104          var elm = compileDirective('options-startWeek');\n 1105          angular.element(elm[0]).triggerHandler('focus');\n 1106:         expect(sandboxEl.find('.dropdown-menu thead tr:eq(1) th:eq(0)').text()).toBe('Mon');\n 1107:         expect(sandboxEl.find('.dropdown-menu tbody button:eq(0)').text()).toBe('27');\n 1108        });\n 1109  \n ....\n 1111          var elm = compileDirective('options-startWeek-bis');\n 1112          angular.element(elm[0]).triggerHandler('focus');\n 1113:         expect(sandboxEl.find('.dropdown-menu thead tr:eq(1) th:eq(0)').text()).toBe('Sat');\n 1114:         expect(sandboxEl.find('.dropdown-menu tbody button:eq(0)').text()).toBe('28');\n 1115        });\n 1116  \n ....\n 1122          var elm = compileDirective('options-startDate');\n 1123          angular.element(elm[0]).triggerHandler('focus');\n 1124:         expect(sandboxEl.find('.dropdown-menu thead button:eq(1)').text()).toBe(dateFilter(new Date(scope.startDate), 'MMMM yyyy'));\n 1125        });\n 1126  \n ....\n 1128          var elm = compileDirective('options-startDate', {startDate: new Date(2014, 2, 2)});\n 1129          angular.element(elm[0]).triggerHandler('focus');\n 1130:         expect(sandboxEl.find('.dropdown-menu thead button:eq(1)').text()).toBe(dateFilter(scope.startDate, 'MMMM yyyy'));\n 1131        });\n 1132  \n ....\n 1150          var elm = compileDirective('options-container', {container: '#testElm'});\n 1151          angular.element(elm[0]).triggerHandler('focus');\n 1152:         expect(testElm.find('.datepicker').length).toBe(1);\n 1153        })\n 1154  \n ....\n 1156          var elm = compileDirective('options-container', {container: 'false'});\n 1157          angular.element(elm[0]).triggerHandler('focus');\n 1158:         expect(sandboxEl.find('.datepicker').length).toBe(1);\n 1159        })\n 1160  \n ....\n 1173        // Should correctly set the model value if set via the datepicker\n 1174        angular.element(elm[0]).triggerHandler('focus');\n 1175:       angular.element(sandboxEl.find('.dropdown-menu tbody .btn:contains(24)')).triggerHandler('click');\n 1176        expect(elm.val()).toBe('24/12/2014');\n 1177        expect(scope.selectedDate).toBe('2014-12-24');\n ....\n 1193        // Should correctly set the model value if set via the datepicker\n 1194        angular.element(elm[0]).triggerHandler('focus');\n 1195:       angular.element(sandboxEl.find('.dropdown-menu tbody .btn:contains(24)')).triggerHandler('click');\n 1196        expect(elm.val()).toBe('12/24/14');\n 1197        expect(scope.selectedDate).toBe('December 24, 2014');\n ....\n 1211          var elm = compileDirective('options-daysOfWeekDisabled');\n 1212          angular.element(elm[0]).triggerHandler('focus');\n 1213:         expect(sandboxEl.find('.dropdown-menu tbody button:contains(20)').is(':disabled')).toBeFalsy();\n 1214:         expect(sandboxEl.find('.dropdown-menu tbody button:contains(21)').is(':disabled')).toBeFalsy();\n 1215:         expect(sandboxEl.find('.dropdown-menu tbody button:contains(22)').is(':disabled')).toBeFalsy();\n 1216:         expect(sandboxEl.find('.dropdown-menu tbody button:contains(23)').is(':disabled')).toBeFalsy();\n 1217:         expect(sandboxEl.find('.dropdown-menu tbody button:contains(24)').is(':disabled')).toBeFalsy();\n 1218:         expect(sandboxEl.find('.dropdown-menu tbody button:contains(25)').is(':disabled')).toBeFalsy();\n 1219:         expect(sandboxEl.find('.dropdown-menu tbody button:contains(26)').is(':disabled')).toBeFalsy();\n 1220        });\n 1221  \n ....\n 1223          var elm = compileDirective('options-daysOfWeekDisabled-bis');\n 1224          angular.element(elm[0]).triggerHandler('focus');\n 1225:         expect(sandboxEl.find('.dropdown-menu tbody button:contains(20)').is(':disabled')).toBeTruthy();\n 1226:         expect(sandboxEl.find('.dropdown-menu tbody button:contains(21)').is(':disabled')).toBeFalsy();\n 1227:         expect(sandboxEl.find('.dropdown-menu tbody button:contains(22)').is(':disabled')).toBeTruthy();\n 1228:         expect(sandboxEl.find('.dropdown-menu tbody button:contains(23)').is(':disabled')).toBeFalsy();\n 1229:         expect(sandboxEl.find('.dropdown-menu tbody button:contains(24)').is(':disabled')).toBeTruthy();\n 1230:         expect(sandboxEl.find('.dropdown-menu tbody button:contains(25)').is(':disabled')).toBeFalsy();\n 1231:         expect(sandboxEl.find('.dropdown-menu tbody button:contains(26)').is(':disabled')).toBeTruthy();\n 1232        });\n 1233  \n ....\n 1242        var elem = compileDirective('options-disabledDates', disabledScopeProperty);\n 1243        angular.element(elem[0]).triggerHandler('focus');\n 1244:       expect(sandboxEl.find('.dropdown-menu tbody button:contains(20)').is(':disabled')).toBeFalsy();\n 1245:       expect(sandboxEl.find('.dropdown-menu tbody button:contains(21)').is(':disabled')).toBeFalsy();\n 1246:       expect(sandboxEl.find('.dropdown-menu tbody button:contains(22)').is(':disabled')).toBeFalsy();\n 1247:       expect(sandboxEl.find('.dropdown-menu tbody button:contains(23)').is(':disabled')).toBeFalsy();\n 1248:       expect(sandboxEl.find('.dropdown-menu tbody button:contains(24)').is(':disabled')).toBeFalsy();\n 1249:       expect(sandboxEl.find('.dropdown-menu tbody button:contains(25)').is(':disabled')).toBeFalsy();\n 1250:       expect(sandboxEl.find('.dropdown-menu tbody button:contains(26)').is(':disabled')).toBeFalsy();\n 1251      });\n 1252  \n ....\n 1259        var elem = compileDirective('options-disabledDates', disabledScopeProperty);\n 1260        angular.element(elem[0]).triggerHandler('focus');\n 1261:       expect(sandboxEl.find('.dropdown-menu tbody button:contains(20)').is(':disabled')).toBeFalsy();\n 1262:       expect(sandboxEl.find('.dropdown-menu tbody button:contains(21)').is(':disabled')).toBeFalsy();\n 1263:       expect(sandboxEl.find('.dropdown-menu tbody button:contains(22)').is(':disabled')).toBeTruthy();\n 1264:       expect(sandboxEl.find('.dropdown-menu tbody button:contains(23)').is(':disabled')).toBeTruthy();\n 1265:       expect(sandboxEl.find('.dropdown-menu tbody button:contains(24)').is(':disabled')).toBeTruthy();\n 1266:       expect(sandboxEl.find('.dropdown-menu tbody button:contains(25)').is(':disabled')).toBeTruthy();\n 1267:       expect(sandboxEl.find('.dropdown-menu tbody button:contains(26)').is(':disabled')).toBeFalsy();\n 1268      });\n 1269  \n ....\n 1277        var elem = compileDirective('options-disabledDates', disabledScopeProperty);\n 1278        angular.element(elem[0]).triggerHandler('focus');\n 1279:       expect(sandboxEl.find('.dropdown-menu tbody button:contains(20)').is(':disabled')).toBeFalsy();\n 1280:       expect(sandboxEl.find('.dropdown-menu tbody button:contains(21)').is(':disabled')).toBeTruthy();\n 1281:       expect(sandboxEl.find('.dropdown-menu tbody button:contains(22)').is(':disabled')).toBeTruthy();\n 1282:       expect(sandboxEl.find('.dropdown-menu tbody button:contains(23)').is(':disabled')).toBeFalsy();\n 1283:       expect(sandboxEl.find('.dropdown-menu tbody button:contains(24)').is(':disabled')).toBeTruthy();\n 1284:       expect(sandboxEl.find('.dropdown-menu tbody button:contains(25)').is(':disabled')).toBeFalsy();\n 1285:       expect(sandboxEl.find('.dropdown-menu tbody button:contains(26)').is(':disabled')).toBeFalsy();\n 1286      });\n 1287  \n ....\n 1295        var elem = compileDirective('options-disabledDates', disabledScopeProperty);\n 1296        angular.element(elem[0]).triggerHandler('focus');\n 1297:       expect(sandboxEl.find('.dropdown-menu tbody button:contains(20)').is(':disabled')).toBeFalsy();\n 1298:       expect(sandboxEl.find('.dropdown-menu tbody button:contains(21)').is(':disabled')).toBeTruthy();\n 1299:       expect(sandboxEl.find('.dropdown-menu tbody button:contains(22)').is(':disabled')).toBeTruthy();\n 1300:       expect(sandboxEl.find('.dropdown-menu tbody button:contains(23)').is(':disabled')).toBeFalsy();\n 1301:       expect(sandboxEl.find('.dropdown-menu tbody button:contains(24)').is(':disabled')).toBeTruthy();\n 1302:       expect(sandboxEl.find('.dropdown-menu tbody button:contains(25)').is(':disabled')).toBeFalsy();\n 1303:       expect(sandboxEl.find('.dropdown-menu tbody button:contains(26)').is(':disabled')).toBeFalsy();\n 1304      });\n 1305  \n ....\n 1312        var elem = compileDirective('options-disabledDates-minmax', disabledScopeProperty);\n 1313        angular.element(elem[0]).triggerHandler('focus');\n 1314:       expect(sandboxEl.find('.dropdown-menu tbody button:contains(20)').is(':disabled')).toBeTruthy();\n 1315:       expect(sandboxEl.find('.dropdown-menu tbody button:contains(21)').is(':disabled')).toBeFalsy();\n 1316:       expect(sandboxEl.find('.dropdown-menu tbody button:contains(22)').is(':disabled')).toBeFalsy();\n 1317:       expect(sandboxEl.find('.dropdown-menu tbody button:contains(23)').is(':disabled')).toBeTruthy();\n 1318:       expect(sandboxEl.find('.dropdown-menu tbody button:contains(24)').is(':disabled')).toBeTruthy();\n 1319:       expect(sandboxEl.find('.dropdown-menu tbody button:contains(25)').is(':disabled')).toBeFalsy();\n 1320:       expect(sandboxEl.find('.dropdown-menu tbody button:contains(26)').is(':disabled')).toBeTruthy();\n 1321      });\n 1322  \n ....\n 1329        var elem = compileDirective('options-disabledDates-daysOfWeek', disabledScopeProperty);\n 1330        angular.element(elem[0]).triggerHandler('focus');\n 1331:       expect(sandboxEl.find('.dropdown-menu tbody button:contains(20)').is(':disabled')).toBeTruthy(); // July 25, 2014 is a Sunday, disabled\n 1332:       expect(sandboxEl.find('.dropdown-menu tbody button:contains(21)').is(':disabled')).toBeFalsy();\n 1333:       expect(sandboxEl.find('.dropdown-menu tbody button:contains(22)').is(':disabled')).toBeTruthy();\n 1334:       expect(sandboxEl.find('.dropdown-menu tbody button:contains(23)').is(':disabled')).toBeFalsy();\n 1335:       expect(sandboxEl.find('.dropdown-menu tbody button:contains(24)').is(':disabled')).toBeFalsy();\n 1336:       expect(sandboxEl.find('.dropdown-menu tbody button:contains(25)').is(':disabled')).toBeFalsy();\n 1337:       expect(sandboxEl.find('.dropdown-menu tbody button:contains(26)').is(':disabled')).toBeFalsy();\n 1338      });\n 1339  \n\n/Users/olivier/Projects/angular-strap/src/dropdown/test/dropdown.spec.js:\n  111        var elm = compileDirective('default');\n  112        angular.element(elm[0]).triggerHandler('click');\n  113:       expect(sandboxEl.find('.dropdown-menu li').length).toBe(scope.dropdown.length);\n  114:       expect(sandboxEl.find('.dropdown-menu a:eq(0)').text()).toBe(scope.dropdown[0].text);\n  115:       expect(sandboxEl.find('.dropdown-menu a:eq(0)').attr('href')).toBe(scope.dropdown[0].href);\n  116:       expect(sandboxEl.find('.dropdown-menu a:eq(0)').attr('ng-click')).toBeUndefined();\n  117:       expect(sandboxEl.find('.dropdown-menu a:eq(1)').text()).toBe(scope.dropdown[1].text);\n  118:       expect(sandboxEl.find('.dropdown-menu a:eq(1)').attr('href')).toBe(scope.dropdown[1].href);\n  119:       expect(sandboxEl.find('.dropdown-menu a:eq(1)').attr('target')).toBe(scope.dropdown[1].target);\n  120:       expect(sandboxEl.find('.dropdown-menu a:eq(1)').attr('ng-click')).toBeUndefined();\n  121:       expect(sandboxEl.find('.dropdown-menu a:eq(2)').attr('href')).toBeDefined();\n  122:       expect(sandboxEl.find('.dropdown-menu a:eq(2)').attr('ng-click')).toBe('$eval(item.click);$hide()');\n  123      });\n  124  \n  125      it('should support ngRepeat markup', function() {\n  126        var elm = compileDirective('markup-ngRepeat');\n  127:       angular.element(elm.find('[bs-dropdown]:eq(0)')).triggerHandler('click');\n  128:       expect(sandboxEl.find('.dropdown-menu li').length).toBe(scope.dropdown.length);\n  129:       expect(sandboxEl.find('.dropdown-menu a:eq(0)').text()).toBe(scope.dropdown[0].text);\n  130      });\n  131  \n  ...\n  236      it('should add class .open to the parent <li> when dropdown is open', function() {\n  237        var elm = compileDirective('in-navbar');\n  238:       angular.element(elm.find('a')).triggerHandler('click');\n  239:       expect(sandboxEl.find('.dropdown').hasClass('open')).toBeTruthy();\n  240:       angular.element(elm.find('a')).triggerHandler('click');\n  241:       expect(sandboxEl.find('.dropdown').hasClass('open')).toBeFalsy();\n  242      });\n  243    });\n  ...\n  352          var elm = compileDirective('options-html', {html: 'true'});\n  353          angular.element(elm[0]).triggerHandler('click');\n  354:         expect(sandboxEl.find('.dropdown-menu li').length).toBe(scope.dropdown.length);\n  355:         expect(sandboxEl.find('.dropdown-menu a:eq(0)').html()).toBe(scope.dropdown[0].text);\n  356        });\n  357  \n  ...\n  359          var elm = compileDirective('options-html', {html: 'false'});\n  360          angular.element(elm[0]).triggerHandler('click');\n  361:         expect(sandboxEl.find('.dropdown-menu li').length).toBe(scope.dropdown.length);\n  362:         expect(sandboxEl.find('.dropdown-menu a:eq(0)').html()).not.toBe(scope.dropdown[0].text);\n  363        });\n  364  \n  ...\n  371          var elm = compileDirective('options-template');\n  372          angular.element(elm[0]).triggerHandler('click');\n  373:         expect(sandboxEl.find('.dropdown-inner').text()).toBe('foo: ' + scope.dropdown.length);\n  374        });\n  375  \n  ...\n  378          var elm = compileDirective('options-template');\n  379          angular.element(elm[0]).triggerHandler('click');\n  380:         expect(sandboxEl.find('.dropdown-inner').text()).toBe('01234');\n  381          // Consecutive toggles\n  382          angular.element(elm[0]).triggerHandler('click');\n  383          angular.element(elm[0]).triggerHandler('click');\n  384:         expect(sandboxEl.find('.dropdown-inner').text()).toBe('01234');\n  385        });\n  386  \n  ...\n  389          var elm = compileDirective('options-template');\n  390          angular.element(elm[0]).triggerHandler('click');\n  391:         expect(angular.element(sandboxEl.find('.dropdown-inner > .btn')[0]).triggerHandler('click'));\n  392          expect(scope.dropdown.counter).toBe(1);\n  393          // Consecutive toggles\n  394          angular.element(elm[0]).triggerHandler('click');\n  395          angular.element(elm[0]).triggerHandler('click');\n  396:         expect(angular.element(sandboxEl.find('.dropdown-inner > .btn')[0]).triggerHandler('click'));\n  397          expect(scope.dropdown.counter).toBe(2);\n  398        });\n\n/Users/olivier/Projects/angular-strap/src/helpers/compiler.js:\n  111          .then(function(templates) {\n  112            var templateEl = angular.element(templates[0]);\n  113:           var contentEl = findElement('[ng-bind=\"content\"]', templateEl[0]).removeAttr('ng-bind').html(templates[1]);\n  114            // Drop the default footer as you probably don't want it if you use a custom contentTemplate\n  115            if(!options.templateUrl) contentEl.next().remove();\n  ...\n  160    };\n  161  \n  162:   function findElement(query, element) {\n  163      return angular.element((element || document).querySelectorAll(query));\n  164    }\n\n/Users/olivier/Projects/angular-strap/src/helpers/test/dimensions.spec.js:\n   72        angular.forEach(templates, function(template, name) {\n   73          var element = compileDirective(name);\n   74:         if(!element.is('.btn')) element = element.find('.btn:first');\n   75          var top = dimensions.css(element[0], 'top');\n   76          var jQueryTop = element.css('top');\n   ..\n   89        angular.forEach(templates, function(template, name) {\n   90          var element = compileDirective(name);\n   91:         if(!element.is('.btn')) element = element.find('.btn:first');\n   92          var offset = dimensions.offset(element[0]);\n   93          var jQueryOffset = element.offset();\n   ..\n  104        angular.forEach(templates, function(template, name) {\n  105          var element = compileDirective(name);\n  106:         if(!element.is('.btn')) element = element.find('.btn:first');\n  107          var offset = dimensions.offset(element[0]);\n  108          var jQueryOffset = element.offset();\n  ...\n  119        angular.forEach(templates, function(template, name) {\n  120          var element = compileDirective(name);\n  121:         if(!element.is('.btn')) element = element.find('.btn:first');\n  122          var position = dimensions.position(element[0]);\n  123          var jQueryPosition = element.position();\n\n/Users/olivier/Projects/angular-strap/src/modal/modal.js:\n  115            } else {\n  116              if (options.container) {\n  117:               parent = findElement(options.container);\n  118                after = parent[0] && parent[0].lastChild ? angular.element(parent[0].lastChild) : null;\n  119              } else {\n  ...\n  304        }\n  305  \n  306:       function findElement(query, element) {\n  307          return angular.element((element || document).querySelectorAll(query));\n  308        }\n\n/Users/olivier/Projects/angular-strap/src/modal/test/modal.spec.js:\n  129        var elm = compileDirective('default');\n  130        angular.element(elm[0]).triggerHandler('click');\n  131:       expect(sandboxEl.find('.modal-title').html()).toBe(scope.modal.title);\n  132:       expect(sandboxEl.find('.modal-body').html()).toBe(scope.modal.content);\n  133      });\n  134  \n  ...\n  136        var elm = compileDirective('markup-scope');\n  137        angular.element(elm[0]).triggerHandler('click');\n  138:       expect(sandboxEl.find('.modal-title').html()).toBe(scope.modal.title);\n  139:       expect(sandboxEl.find('.modal-body').html()).toBe(scope.modal.content);\n  140      });\n  141  \n  142      it('should support ngRepeat markup inside', function() {\n  143        var elm = compileDirective('markup-ngRepeat');\n  144:       angular.element(elm.find('[bs-modal]')).triggerHandler('click');\n  145:       expect(sandboxEl.find('.modal-title').html()).toBe(scope.items[0].modal.title);\n  146:       expect(sandboxEl.find('.modal-body').html()).toBe(scope.items[0].modal.content);\n  147      });\n  148  \n  ...\n  410        it('should remove modal when data-keyboard is truthy', function() {\n  411          var elm = compileDirective('options-keyboard', {keyboard: 'true'});\n  412:         expect(bodyEl.find('.modal').length).toBe(0);\n  413          angular.element(elm[0]).triggerHandler('click');\n  414:         var modal = bodyEl.find('.modal');\n  415          expect(modal.length).toBe(1);\n  416          var evt = jQuery.Event( 'keyup', { keyCode: 27, which: 27 } );\n  417          modal.triggerHandler(evt)\n  418:         expect(bodyEl.find('.modal').length).toBe(0);\n  419        });\n  420  \n  421        it('should NOT remove modal when data-keyboard is falsy', function() {\n  422          var elm = compileDirective('options-keyboard', {keyboard: 'false'});\n  423:         expect(bodyEl.find('.modal').length).toBe(0);\n  424          angular.element(elm[0]).triggerHandler('click');\n  425:         var modal = bodyEl.find('.modal');\n  426          expect(modal.length).toBe(1);\n  427          var evt = jQuery.Event( 'keyup', { keyCode: 27, which: 27 } );\n  428          modal.triggerHandler(evt)\n  429:         expect(bodyEl.find('.modal').length).toBe(1);\n  430        });\n  431  \n  ...\n  437          var elm = compileDirective('options-controller');\n  438          angular.element(elm[0]).triggerHandler('click');\n  439:         expect(sandboxEl.find('.modal-title').html()).toBe('foo');\n  440:         expect(sandboxEl.find('.modal-body').html()).toBe('bar');\n  441        });\n  442  \n  ...\n  470          var elm = compileDirective('default', {modal: {title: 'title<br>next', content: 'content<br>next</span>'}});\n  471          angular.element(elm[0]).triggerHandler('click');\n  472:         expect(sandboxEl.find('.modal-title').html()).not.toBe('title<br>next');\n  473:         expect(sandboxEl.find('.modal-body').html()).not.toBe('content<br>next');\n  474        });\n  475  \n  ...\n  477          var elm = compileDirective('options-html', {html: true});\n  478          angular.element(elm[0]).triggerHandler('click');\n  479:         expect(sandboxEl.find('.modal-title').html()).toBe('title<br>next');\n  480:         expect(sandboxEl.find('.modal-body').html()).toBe('content<br>next');\n  481        });\n  482  \n  ...\n  484          var elm = compileDirective('options-html', {html: 'true'});\n  485          angular.element(elm[0]).triggerHandler('click');\n  486:         expect(sandboxEl.find('.modal-title').html()).toBe('title<br>next');\n  487:         expect(sandboxEl.find('.modal-body').html()).toBe('content<br>next');\n  488        });\n  489  \n  ...\n  492          var elm = compileDirective('options-html', {html: false});\n  493          angular.element(elm[0]).triggerHandler('click');\n  494:         expect(sandboxEl.find('.modal-title').html()).not.toBe('title<br>next');\n  495:         expect(sandboxEl.find('.modal-body').html()).not.toBe('content<br>next');\n  496        });\n  497  \n  ...\n  499          var elm = compileDirective('options-html', {html: 'False'});\n  500          angular.element(elm[0]).triggerHandler('click');\n  501:         expect(sandboxEl.find('.modal-title').html()).not.toBe('title<br>next');\n  502:         expect(sandboxEl.find('.modal-body').html()).not.toBe('content<br>next');\n  503        });\n  504  \n  ...\n  506          var elm = compileDirective('options-html', {html: '0'});\n  507          angular.element(elm[0]).triggerHandler('click');\n  508:         expect(sandboxEl.find('.modal-title').html()).not.toBe('title<br>next');\n  509:         expect(sandboxEl.find('.modal-body').html()).not.toBe('content<br>next');\n  510        });\n  511  \n  ...\n  513          var elm = compileDirective('options-html', {html: ''});\n  514          angular.element(elm[0]).triggerHandler('click');\n  515:         expect(sandboxEl.find('.modal-title').html()).not.toBe('title<br>next');\n  516:         expect(sandboxEl.find('.modal-body').html()).not.toBe('content<br>next');\n  517        });\n  518  \n  ...\n  525          var elm = compileDirective('options-template');\n  526          angular.element(elm[0]).triggerHandler('click');\n  527:         expect(sandboxEl.find('.modal-inner').text()).toBe('foo: ' + scope.modal.title);\n  528        });\n  529  \n  ...\n  532          var elm = compileDirective('options-template');\n  533          angular.element(elm[0]).triggerHandler('click');\n  534:         expect(sandboxEl.find('.modal-inner').text()).toBe('foo: ' + scope.modal.title);\n  535        });\n  536  \n  ...\n  540          $httpBackend.flush();\n  541          angular.element(elm[0]).triggerHandler('click');\n  542:         expect(sandboxEl.find('.modal-inner').text()).toBe('foo: ' + scope.modal.title);\n  543        });\n  544  \n  ...\n  549          $httpBackend.flush();\n  550          angular.element(elm[0]).triggerHandler('click');\n  551:         expect(sandboxEl.find('.modal-inner').text()).toBe('foo: ' + scope.modal.title);\n  552        });\n  553  \n  ...\n  556          var elm = compileDirective('options-template');\n  557          angular.element(elm[0]).triggerHandler('click');\n  558:         expect(sandboxEl.find('.modal-inner').text()).toBe('foobarbaz');\n  559          // Consecutive toggles\n  560          angular.element(elm[0]).triggerHandler('click');\n  561          angular.element(elm[0]).triggerHandler('click');\n  562:         expect(sandboxEl.find('.modal-inner').text()).toBe('foobarbaz');\n  563        });\n  564  \n  ...\n  567          var elm = compileDirective('options-template');\n  568          angular.element(elm[0]).triggerHandler('click');\n  569:         expect(angular.element(sandboxEl.find('.modal-inner > .btn')[0]).triggerHandler('click'));\n  570          expect(scope.modal.counter).toBe(1);\n  571          // Consecutive toggles\n  572          angular.element(elm[0]).triggerHandler('click');\n  573          angular.element(elm[0]).triggerHandler('click');\n  574:         expect(angular.element(sandboxEl.find('.modal-inner > .btn')[0]).triggerHandler('click'));\n  575          expect(scope.modal.counter).toBe(2);\n  576        });\n  ...\n  591          // before counting the number of scopes expected.\n  592          angular.element(elm[0]).triggerHandler('click');\n  593:         expect(angular.element(sandboxEl.find('.modal-inner > .btn')[0]).triggerHandler('click'));\n  594  \n  595          // repeat process to test creation/destruction of inner scopes\n  ...\n  600  \n  601            // hide modal\n  602:           expect(angular.element(sandboxEl.find('.modal-inner > .btn')[0]).triggerHandler('click'));\n  603          }\n  604  \n  ...\n  621          var elm = compileDirective('options-contentTemplate');\n  622          angular.element(elm[0]).triggerHandler('click');\n  623:         expect(sandboxEl.find('.modal-body').text()).toBe('baz: ' + scope.modal.title);\n  624        });\n  625  \n  ...\n  646          var elm = compileDirective('options-container', angular.extend({}, templates['default'].scope.modal, {container: 'false'}));\n  647          angular.element(elm[0]).triggerHandler('click');\n  648:         expect(sandboxEl.find('.modal').length).toBe(1);\n  649        });\n  650  \n  ...\n  654        it('should show backdrop by default', function() {\n  655          var elm = compileDirective('default');\n  656:         expect(bodyEl.find('.modal-backdrop').length).toBe(0);\n  657          angular.element(elm[0]).triggerHandler('click');\n  658:         expect(bodyEl.find('.modal-backdrop').length).toBe(1);\n  659        });\n  660  \n  661        it('should show backdrop if data-backdrop is truthy', function() {\n  662          var elm = compileDirective('options-backdrop', {backdrop: 'anything'});\n  663:         expect(bodyEl.find('.modal-backdrop').length).toBe(0);\n  664          angular.element(elm[0]).triggerHandler('click');\n  665:         expect(bodyEl.find('.modal-backdrop').length).toBe(1);\n  666        });\n  667  \n  668        it('should not show backdrop if data-backdrop is false', function() {\n  669          var elm = compileDirective('options-backdrop', {backdrop: 'false'});\n  670:         expect(bodyEl.find('.modal-backdrop').length).toBe(0);\n  671          angular.element(elm[0]).triggerHandler('click');\n  672:         expect(bodyEl.find('.modal-backdrop').length).toBe(0);\n  673        });\n  674  \n\n/Users/olivier/Projects/angular-strap/src/navbar/test/navbar.spec.js:\n   62        $location.path('/network');\n   63        scope.$digest();\n   64:       expect(elm.find('li:nth-child(1)')).toHaveClass('active');\n   65        $location.path('/profile');\n   66        scope.$digest();\n   67:       expect(elm.find('li:nth-child(1)')).not.toHaveClass('active');\n   68:       expect(elm.find('li:nth-child(2)')).toHaveClass('active');\n   69      });\n   70  \n   ..\n   73        $location.path('/network');\n   74        scope.$digest();\n   75:       expect(elm.find('li:first')).toHaveClass('active');\n   76        $location.path('/network/config');\n   77        scope.$digest();\n   78:       expect(elm.find('li:first')).toHaveClass('active');\n   79      });\n   80  \n   ..\n   83        $location.path('/network');\n   84        scope.$digest();\n   85:       expect(elm.find('li:nth-child(1)')).toHaveClass('active');\n   86        $location.path('/profile');\n   87        scope.$digest();\n   88:       expect(elm.find('li:nth-child(1)')).not.toHaveClass('active');\n   89:       expect(elm.find('li:nth-child(2)')).toHaveClass('active');\n   90      });\n   91  \n   ..\n  100          $location.path('/network');\n  101          scope.$digest();\n  102:         expect(elm.find('li:nth-child(1)')).toHaveClass('active');\n  103          $location.path('/profile');\n  104          scope.$digest();\n  105:         expect(elm.find('li:nth-child(1)')).not.toHaveClass('active');\n  106:         expect(elm.find('li:nth-child(2)')).toHaveClass('active');\n  107        });\n  108  \n  ...\n  115          $location.path('/network');\n  116          scope.$digest();\n  117:         expect(elm.find('li:nth-child(1)')).toHaveClass(scope.activeClass);\n  118          $location.path('/profile');\n  119          scope.$digest();\n  120:         expect(elm.find('li:nth-child(1)')).not.toHaveClass(scope.activeClass);\n  121:         expect(elm.find('li:nth-child(2)')).toHaveClass(scope.activeClass);\n  122        });\n  123  \n\n/Users/olivier/Projects/angular-strap/src/popover/test/popover.spec.js:\n  128        var elm = compileDirective('default');\n  129        angular.element(elm[0]).triggerHandler('click');\n  130:       expect(sandboxEl.find('.popover-title').html()).toBe(scope.popover.title);\n  131:       expect(sandboxEl.find('.popover-content').html()).toBe(scope.popover.content);\n  132      });\n  133  \n  ...\n  135        var elm = compileDirective('markup-scope');\n  136        angular.element(elm[0]).triggerHandler('click');\n  137:       expect(sandboxEl.find('.popover-title').html()).toBe(scope.popover.title);\n  138:       expect(sandboxEl.find('.popover-content').html()).toBe(scope.popover.content);\n  139      });\n  140  \n  141      it('should support ngRepeat markup', function() {\n  142        var elm = compileDirective('markup-ngRepeat');\n  143:       angular.element(elm.find('[bs-popover]')).triggerHandler('click');\n  144:       expect(sandboxEl.find('.popover-title').html()).toBe(scope.items[0].popover.title);\n  145:       expect(sandboxEl.find('.popover-content').html()).toBe(scope.items[0].popover.content);\n  146      });\n  147  \n  ...\n  307          var elm = compileDirective('default', {popover: {title: 'title<br>next', content: 'content<br>next'}});\n  308          angular.element(elm[0]).triggerHandler('click');\n  309:         expect(sandboxEl.find('.popover-title').html()).not.toBe(scope.popover.title);\n  310:         expect(sandboxEl.find('.popover-content').html()).not.toBe(scope.popover.content);\n  311        });\n  312  \n  ...\n  314          var elm = compileDirective('options-html', {html: 'true'});\n  315          angular.element(elm[0]).triggerHandler('click');\n  316:         expect(sandboxEl.find('.popover-title').html()).toBe(scope.popover.title);\n  317:         expect(sandboxEl.find('.popover-content').html()).toBe(scope.popover.content);\n  318        });\n  319  \n  ...\n  321          var elm = compileDirective('options-html', {html: 'false'});\n  322          angular.element(elm[0]).triggerHandler('click');\n  323:         expect(sandboxEl.find('.popover-title').html()).not.toBe(scope.popover.title);\n  324:         expect(sandboxEl.find('.popover-content').html()).not.toBe(scope.popover.content);\n  325        });\n  326  \n  ...\n  365          var elm = compileDirective('options-template');\n  366          angular.element(elm[0]).triggerHandler('click');\n  367:         expect(sandboxEl.find('.popover-content').text()).toBe('foo: ' + scope.popover.content);\n  368        });\n  369  \n  ...\n  372          var elm = compileDirective('options-template');\n  373          angular.element(elm[0]).triggerHandler('click');\n  374:         expect(sandboxEl.find('.popover-content').text()).toBe('foobarbaz');\n  375          // Consecutive toggles\n  376          angular.element(elm[0]).triggerHandler('click');\n  377          angular.element(elm[0]).triggerHandler('click');\n  378:         expect(sandboxEl.find('.popover-content').text()).toBe('foobarbaz');\n  379        });\n  380  \n  ...\n  383          var elm = compileDirective('options-template');\n  384          angular.element(elm[0]).triggerHandler('click');\n  385:         expect(angular.element(sandboxEl.find('.popover-content > .btn')[0]).triggerHandler('click'));\n  386          expect(scope.popover.counter).toBe(1);\n  387          // Consecutive toggles\n  388          angular.element(elm[0]).triggerHandler('click');\n  389          angular.element(elm[0]).triggerHandler('click');\n  390:         expect(angular.element(sandboxEl.find('.popover-content > .btn')[0]).triggerHandler('click'));\n  391          expect(scope.popover.counter).toBe(2);\n  392        });\n  ...\n  411          $timeout.flush();\n  412          expect(sandboxEl.children().length).toBe(2);\n  413:         angular.element(sandboxEl.find('.popover')[0]).triggerHandler('click');\n  414          expect(sandboxEl.children().length).toBe(2);\n  415        });\n  ...\n  431          $timeout.flush();\n  432          expect(sandboxEl.children().length).toBe(2);\n  433:         angular.element(sandboxEl.find('.popover')[0]).triggerHandler('click');\n  434          expect(sandboxEl.children().length).toBe(2);\n  435        });\n  ...\n  444          // sandboxEl.children().length === 2 indicates popover is in DOM/visible\n  445          expect(sandboxEl.children().length).toBe(2);\n  446:         angular.element(sandboxEl.find('.popover-content > .btn')[0]).triggerHandler('click');\n  447:         angular.element(sandboxEl.find('.popover-content > .btn')[0]).triggerHandler('click');\n  448          expect(scope.popover.counter).toBe(2);\n  449          expect(sandboxEl.children().length).toBe(2);\n  ...\n  460          // sandboxEl.children().length === 2 indicates popover is in DOM/visible\n  461          expect(sandboxEl.children().length).toBe(2);\n  462:         angular.element(sandboxEl.find('.popover-content > .form-control')[0]).triggerHandler('click');\n  463          expect(sandboxEl.children().length).toBe(2);\n  464:         angular.element(sandboxEl.find('.popover-content > .btn')[0]).triggerHandler('click');\n  465          expect(sandboxEl.children().length).toBe(2);\n  466          angular.element($window.document).triggerHandler('click');\n\n/Users/olivier/Projects/angular-strap/src/select/test/select.spec.js:\n  158        expect(elm.text().trim()).toBe('Choose among the following...');\n  159        angular.element(elm[0]).triggerHandler('focus');\n  160:       angular.element(sandboxEl.find('.dropdown-menu li:eq(1) a')[0]).triggerHandler('click');\n  161        expect(scope.selectedIcon).toBe(scope.icons[1].value);\n  162      });\n  ...\n  165        var elm = compileDirective('default');\n  166        angular.element(elm[0]).triggerHandler('focus');\n  167:       expect(sandboxEl.find('.dropdown-menu li').length).toBe(scope.icons.length);\n  168:       expect(sandboxEl.find('.dropdown-menu li:eq(0)').text().trim()).toBe(scope.icons[0].label);\n  169      });\n  170  \n  171      it('should support ngRepeat markup', function() {\n  172        var elm = compileDirective('markup-ngRepeat');\n  173:       angular.element(elm.find('[bs-select]:eq(0)')).triggerHandler('focus');\n  174:       expect(sandboxEl.find('.dropdown-menu li').length).toBe(scope.icons.length);\n  175:       expect(sandboxEl.find('.dropdown-menu li:eq(0)').text().trim()).toBe(scope.icons[0].label);\n  176      });\n  177  \n  ...\n  179        var elm = compileDirective('markup-select');\n  180        angular.element(elm.next('button')[0]).triggerHandler('focus');\n  181:       expect(sandboxEl.find('.dropdown-menu li').length).toBe(scope.icons.length);\n  182:       expect(sandboxEl.find('.dropdown-menu li:eq(0)').text().trim()).toBe(scope.icons[0].label);\n  183      });\n  184  \n  ...\n  186        var elm = compileDirective('default', { selectedIcon: null });\n  187        expect(function() { angular.element(elm[0]).triggerHandler('focus') }).not.toThrow();\n  188:       angular.element(sandboxEl.find('.dropdown-menu li:eq(1) a')[0]).triggerHandler('click');\n  189        expect(scope.selectedIcon).toBe(scope.icons[1].value);\n  190      });\n  ...\n  193        var elm = compileDirective('default', { selectedIcon: null });\n  194        expect(function() { angular.element(elm[0]).triggerHandler('focus') }).not.toThrow();\n  195:       angular.element(sandboxEl.find('.dropdown-menu li:eq(1) a')[0]).triggerHandler('click');\n  196        expect(scope.selectedIcon).toBe(scope.icons[1].value);\n  197      });\n  ...\n  204        var elm = compileDirective('default');\n  205        angular.element(elm[0]).triggerHandler('focus');\n  206:       expect(sandboxEl.find('.active').length).toBe(0);\n  207        $timeout.flush();\n  208        triggerKeyDown( elm, 40 );\n  209:       expect(sandboxEl.find('.active').length).toBe(1);\n  210      });\n  211  \n  ...\n  213        var elm = compileDirective('default');\n  214        angular.element(elm[0]).triggerHandler('focus');\n  215:       expect(sandboxEl.find('.active').length).toBe(0);\n  216        $timeout.flush();\n  217        triggerKeyDown( elm, 38 );\n  218:       expect(sandboxEl.find('.active').length).toBe(1);\n  219      });\n  220  \n  ...\n  228        scope.$digest();\n  229        angular.element(elm[0]).triggerHandler('focus');\n  230:       expect(sandboxEl.find('.dropdown-menu li').length).toBe(scope.icons.length);\n  231:       expect(sandboxEl.find('.dropdown-menu li:eq(0)').text().trim()).toBe(scope.icons[0].label);\n  232      });\n  233  \n  ...\n  235        var elm = compileDirective('markup-bsOptions-filtered');\n  236        angular.element(elm[0]).triggerHandler('focus');\n  237:       expect(sandboxEl.find('.dropdown-menu li').length).toBe(scope.icons.length);\n  238      });\n  239  \n  ...\n  242        angular.element(elm[0]).triggerHandler('focus');\n  243        expect(elm.text().trim()).toBe(scope.months[scope.selectedMonth]);\n  244:       expect(sandboxEl.find('.dropdown-menu li').length).toBe(scope.months.length);\n  245        angular.element(elm[0]).triggerHandler('focus');\n  246:       angular.element(sandboxEl.find('.dropdown-menu li:eq(1) a')[0]).triggerHandler('click');\n  247        scope.$digest();\n  248        expect(scope.selectedMonth).toBe(1);\n  ...\n  259        expect(elm.text().trim()).toBe(scope.icons[2].label);\n  260        angular.element(elm[0]).triggerHandler('focus');\n  261:       expect(sandboxEl.find('.dropdown-menu li.active').length).toBe(1);\n  262:       expect(sandboxEl.find('.dropdown-menu li.active').index()).toBe(2);\n  263      });\n  264  \n  ...\n  269        expect(elm.text().trim()).toBe(scope.icons[2].label);\n  270        angular.element(elm[0]).triggerHandler('focus');\n  271:       expect(sandboxEl.find('.dropdown-menu li.active').length).toBe(1);\n  272:       expect(sandboxEl.find('.dropdown-menu li.active').index()).toBe(2);\n  273  \n  274        scope.selectedIcon = null;\n  275        scope.$digest();\n  276        angular.element(elm[0]).triggerHandler('focus');\n  277:       expect(sandboxEl.find('.dropdown-menu li.active').length).toBe(0);\n  278:       expect(sandboxEl.find('.dropdown-menu li.active').index()).toBe(-1);\n  279      });\n  280    });\n  ...\n  287          var elm = compileDirective('options-multiple');\n  288          angular.element(elm[0]).triggerHandler('focus');\n  289:         expect(sandboxEl.find('.dropdown-menu li').length).toBe(scope.icons.length);\n  290:         expect(sandboxEl.find('.dropdown-menu li:eq(0)').text().trim()).toBe(scope.icons[0].label);\n  291:         expect(sandboxEl.find('.dropdown-menu li > a > i').length).toBe(scope.selectedIcons.length);\n  292        });\n  293  \n  ...\n  295          var elm = compileDirective('options-multiple-all-none-buttons', {allNoneButtons: 'true'});\n  296          angular.element(elm[0]).triggerHandler('focus');\n  297:         expect(sandboxEl.find('.dropdown-menu li > div > button').length).toBe(2);\n  298  \n  299:         expect(angular.element(sandboxEl.find('.dropdown-menu li > div > button')[0]).triggerHandler('click'));\n  300:         expect(sandboxEl.find('.dropdown-menu li.active').length).toBe(4);\n  301  \n  302:         expect(angular.element(sandboxEl.find('.dropdown-menu li > div > button')[1]).triggerHandler('click'));\n  303:         expect(sandboxEl.find('.dropdown-menu li.active').length).toBe(0);\n  304        });\n  305  \n  ...\n  308          angular.element(elm[0]).triggerHandler('focus');\n  309          expect(elm.hasClass('ng-invalid-required')).toBe(false);\n  310:         angular.element(sandboxEl.find('.dropdown-menu li:eq(1) a')[0]).triggerHandler('click');\n  311          expect(elm.hasClass('ng-invalid-required')).toBe(true);\n  312        });\n  ...\n  316          angular.element(elm[0]).triggerHandler('focus');\n  317  \n  318:         expect(sandboxEl.find('.dropdown-menu li > div > button:eq(0)').text()).toBe('All');\n  319:         expect(sandboxEl.find('.dropdown-menu li > div > button:eq(1)').text()).toBe('None');\n  320        });\n  321  \n  ...\n  324          angular.element(elm[0]).triggerHandler('focus');\n  325  \n  326:         expect(sandboxEl.find('.dropdown-menu li > div > button:eq(0)').text()).toBe('select all');\n  327:         expect(sandboxEl.find('.dropdown-menu li > div > button:eq(1)').text()).toBe('select none');\n  328        });\n  329  \n  ...\n  331          var elm = compileDirective('options-multiple-all-none-buttons', {allNoneButtons: 'false'});\n  332          angular.element(elm[0]).triggerHandler('focus');\n  333:         expect(sandboxEl.find('.dropdown-menu li > div > button').length).toBe(0);\n  334  \n  335        });\n  ...\n  338          var elm = compileDirective('options-multiple', { selectedIcons: null });\n  339          expect(function() { angular.element(elm[0]).triggerHandler('focus') }).not.toThrow();\n  340:         angular.element(sandboxEl.find('.dropdown-menu li:eq(1) a')[0]).triggerHandler('click');\n  341          expect(scope.selectedIcons).toEqual([ scope.icons[1].value ]);\n  342        });\n  ...\n  424          var elm = compileDirective('options-html', {html: 'true'});\n  425          angular.element(elm[0]).triggerHandler('focus');\n  426:         expect(sandboxEl.find('.dropdown-menu li').length).toBe(scope.icons.length);\n  427:         expect(sandboxEl.find('.dropdown-menu li:eq(0) a > span').html()).toBe(scope.icons[0].label);\n  428        });\n  429  \n  ...\n  431          var elm = compileDirective('options-html', {html: 'false'});\n  432          angular.element(elm[0]).triggerHandler('focus');\n  433:         expect(sandboxEl.find('.dropdown-menu li').length).toBe(scope.icons.length);\n  434:         expect(sandboxEl.find('.dropdown-menu li:eq(0) a > span').html()).not.toBe(scope.icons[0].label);\n  435        });\n  436  \n  ...\n  443          var elm = compileDirective('options-template');\n  444          angular.element(elm[0]).triggerHandler('focus');\n  445:         expect(sandboxEl.find('.dropdown-inner').text().trim()).toBe('foo: ' + scope.icons.length);\n  446        });\n  447  \n  ...\n  450          var elm = compileDirective('options-template');\n  451          angular.element(elm[0]).triggerHandler('focus');\n  452:         expect(sandboxEl.find('.dropdown-inner').text().trim()).toBe(scope.icons.map(function(obj) { return obj.label; }).join(''));\n  453          // Consecutive toggles\n  454          angular.element(elm[0]).triggerHandler('blur');\n  455          angular.element(elm[0]).triggerHandler('focus');\n  456:         expect(sandboxEl.find('.dropdown-inner').text().trim()).toBe(scope.icons.map(function(obj) { return obj.label; }).join(''));\n  457        });\n  458  \n  ...\n  462          scope.dropdown = {counter: 0};\n  463          angular.element(elm[0]).triggerHandler('focus');\n  464:         expect(angular.element(sandboxEl.find('.dropdown-inner > .btn')[0]).triggerHandler('click'));\n  465          expect(scope.dropdown.counter).toBe(1);\n  466          // Consecutive toggles\n  467          angular.element(elm[0]).triggerHandler('blur');\n  468          angular.element(elm[0]).triggerHandler('focus');\n  469:         expect(angular.element(sandboxEl.find('.dropdown-inner > .btn')[0]).triggerHandler('click'));\n  470          expect(scope.dropdown.counter).toBe(2);\n  471        });\n  ...\n  478          var elm = compileDirective('options-multiple-sort');\n  479          angular.element(elm[0]).triggerHandler('focus');\n  480:         angular.element(sandboxEl.find('.dropdown-menu li:eq(3) a')[0]).triggerHandler('click');\n  481:         angular.element(sandboxEl.find('.dropdown-menu li:eq(1) a')[0]).triggerHandler('click');\n  482:         angular.element(sandboxEl.find('.dropdown-menu li:eq(2) a')[0]).triggerHandler('click');\n  483:         angular.element(sandboxEl.find('.dropdown-menu li:eq(7) a')[0]).triggerHandler('click');\n  484:         angular.element(sandboxEl.find('.dropdown-menu li:eq(6) a')[0]).triggerHandler('click');\n  485:         angular.element(sandboxEl.find('.dropdown-menu li:eq(4) a')[0]).triggerHandler('click');\n  486:         angular.element(sandboxEl.find('.dropdown-menu li:eq(9) a')[0]).triggerHandler('click');\n  487:         angular.element(sandboxEl.find('.dropdown-menu li:eq(5) a')[0]).triggerHandler('click');\n  488:         angular.element(sandboxEl.find('.dropdown-menu li:eq(10) a')[0]).triggerHandler('click');\n  489:         angular.element(sandboxEl.find('.dropdown-menu li:eq(8) a')[0]).triggerHandler('click');\n  490:         angular.element(sandboxEl.find('.dropdown-menu li:eq(11) a')[0]).triggerHandler('click');\n  491          expect(scope.selectedIcons).toEqual([\n  492            scope.icons[1].value, scope.icons[2].value, scope.icons[3].value,\n  ...\n  500          var elm = compileDirective('options-multiple-sort', { sort: false });\n  501          angular.element(elm[0]).triggerHandler('focus');\n  502:         angular.element(sandboxEl.find('.dropdown-menu li:eq(3) a')[0]).triggerHandler('click');\n  503:         angular.element(sandboxEl.find('.dropdown-menu li:eq(1) a')[0]).triggerHandler('click');\n  504:         angular.element(sandboxEl.find('.dropdown-menu li:eq(2) a')[0]).triggerHandler('click');\n  505          expect(scope.selectedIcons).toEqual([scope.icons[3].value, scope.icons[1].value, scope.icons[2].value]);\n  506        });\n  ...\n  509          var elm = compileDirective('options-multiple-sort', { sort: '' });\n  510          angular.element(elm[0]).triggerHandler('focus');\n  511:         angular.element(sandboxEl.find('.dropdown-menu li:eq(3) a')[0]).triggerHandler('click');\n  512:         angular.element(sandboxEl.find('.dropdown-menu li:eq(1) a')[0]).triggerHandler('click');\n  513:         angular.element(sandboxEl.find('.dropdown-menu li:eq(2) a')[0]).triggerHandler('click');\n  514          expect(scope.selectedIcons).toEqual([scope.icons[3].value, scope.icons[1].value, scope.icons[2].value]);\n  515        });\n  ...\n  578          angular.element(elm[0]).triggerHandler('focus');\n  579          $animate.flush();\n  580:         angular.element(sandboxEl.find('.dropdown-menu li:eq(1) a')[0]).triggerHandler('click');\n  581  \n  582          angular.element(elm[0]).triggerHandler('blur');\n  ...\n  605  \n  606        angular.element(elm[0]).triggerHandler('focus');\n  607:       angular.element(sandboxEl.find('.dropdown-menu li:eq(1) a')[0]).triggerHandler('click');\n  608  \n  609        expect(selected).toBe(1);\n  ...\n  619  \n  620        angular.element(elm[0]).triggerHandler('focus');\n  621:       angular.element(sandboxEl.find('.dropdown-menu li:eq(1) a')[0]).triggerHandler('click');\n  622  \n  623        expect(selected).toBe(1);\n  ...\n  636        //scope.$digest();\n  637        angular.element(elm[0]).triggerHandler('focus');\n  638:       angular.element(sandboxEl.find('.dropdown-menu li:eq(1) a')[0]).triggerHandler('click');\n  639  \n  640        expect(id).toBe('select1');\n\n/Users/olivier/Projects/angular-strap/src/tab/test/tab.spec.js:\n  105      it('should correctly compile inner content', function() {\n  106        var elm = compileDirective('default');\n  107:       expect(sandboxEl.find('.nav-tabs > li').length).toBe(2);\n  108:       expect(sandboxEl.find('.nav-tabs > li:eq(0)').text()).toBe('title-1');\n  109:       expect(sandboxEl.find('.tab-content > .tab-pane').length).toBe(2);\n  110:       expect(sandboxEl.find('.tab-content > .tab-pane:eq(0)').text()).toBe('content-1');\n  111      });\n  112  \n  113      it('should navigate between panes on click', function() {\n  114        var elm = compileDirective('default');\n  115:       expect(sandboxEl.find('.nav-tabs > li.active').text()).toBe('title-1');\n  116:       expect(sandboxEl.find('.tab-content > .tab-pane.active').text()).toBe('content-1');\n  117:       sandboxEl.find('.nav-tabs > li:eq(1) > a').triggerHandler('click');\n  118:       expect(sandboxEl.find('.nav-tabs > li.active').text()).toBe('title-2');\n  119:       expect(sandboxEl.find('.tab-content > .tab-pane.active').text()).toBe('content-2');\n  120:       sandboxEl.find('.nav-tabs > li:eq(0) > a').triggerHandler('click');\n  121:       expect(sandboxEl.find('.nav-tabs > li.active').text()).toBe('title-1');\n  122:       expect(sandboxEl.find('.tab-content > .tab-pane.active').text()).toBe('content-1');\n  123      });\n  124  \n  ...\n  129      it('should correctly compile inner content', function() {\n  130        var elm = compileDirective('defaultNested');\n  131:       expect(sandboxEl.find('.nav-tabs:first > li').length).toBe(2);\n  132:       expect(sandboxEl.find('.nav-tabs:first > li:eq(0)').text()).toBe('title-1');\n  133:       expect(sandboxEl.find('.tab-content:first > .tab-pane').length).toBe(2);\n  134:       expect(sandboxEl.find('.tab-content:first > .tab-pane:eq(0) .tab-content:first > .tab-pane:eq(0)').text()).toBe('content-nested-11');\n  135      });\n  136  \n  137      it('should navigate between panes on click', function() {\n  138        var elm = compileDirective('defaultNested');\n  139:       expect(sandboxEl.find('.nav-tabs:first > li.active').text()).toBe('title-1');\n  140:       expect(sandboxEl.find('.tab-content:first > .tab-pane.active .tab-content:first > .tab-pane.active').text()).toBe('content-nested-11');\n  141:       sandboxEl.find('.nav-tabs:first > li:eq(1) > a').triggerHandler('click');\n  142:       expect(sandboxEl.find('.nav-tabs:first > li.active').text()).toBe('title-2');\n  143:       expect(sandboxEl.find('.tab-content:first > .tab-pane.active .tab-content:first > .tab-pane.active').text()).toBe('content-nested-21');\n  144:       sandboxEl.find('.nav-tabs:first > li:eq(0) > a').triggerHandler('click');\n  145:       expect(sandboxEl.find('.nav-tabs:first > li.active').text()).toBe('title-1');\n  146:       expect(sandboxEl.find('.tab-content:first > .tab-pane.active .tab-content:first > .tab-pane.active ').text()).toBe('content-nested-11');\n  147      });\n  148  \n  149      it('should navigate between nested panes on click', function() {\n  150        var elm = compileDirective('defaultNested');\n  151:       sandboxEl.find('.tab-content:first > .tab-pane.active .nav-tabs > li:eq(1) > a').triggerHandler('click');\n  152:       expect(sandboxEl.find('.tab-content:first > .tab-pane.active .nav-tabs > li.active').text()).toBe('title-nested-12');\n  153:       expect(sandboxEl.find('.tab-content:first > .tab-pane.active .tab-content:first > .tab-pane.active').text()).toBe('content-nested-12');\n  154:       sandboxEl.find('.tab-content:first > .tab-pane.active .nav-tabs > li:eq(0) > a').triggerHandler('click');\n  155:       expect(sandboxEl.find('.tab-content:first > .tab-pane.active .nav-tabs > li.active').text()).toBe('title-nested-11');\n  156:       expect(sandboxEl.find('.tab-content:first > .tab-pane.active .tab-content:first > .tab-pane.active').text()).toBe('content-nested-11');\n  157      });\n  158  \n  ...\n  163      it('should correctly compile inner content', function() {\n  164        var elm = compileDirective('template-ngRepeat');\n  165:       expect(sandboxEl.find('.nav-tabs > li').length).toBe(scope.tabs.length);\n  166:       expect(sandboxEl.find('.nav-tabs > li:eq(0)').text()).toBe(scope.tabs[0].title);\n  167:       expect(sandboxEl.find('.tab-content > .tab-pane').length).toBe(scope.tabs.length);\n  168:       expect(sandboxEl.find('.tab-content > .tab-pane:eq(0)').text()).toBe(scope.tabs[0].content);\n  169      });\n  170  \n  171      it('should navigate between panes on click', function() {\n  172        var elm = compileDirective('template-ngRepeat');\n  173:       expect(sandboxEl.find('.nav-tabs > li.active').text()).toBe(scope.tabs[0].title);\n  174:       expect(sandboxEl.find('.tab-content > .tab-pane.active').text()).toBe(scope.tabs[0].content);\n  175:       sandboxEl.find('.nav-tabs > li:eq(1) > a').triggerHandler('click');\n  176:       expect(sandboxEl.find('.nav-tabs > li.active').text()).toBe(scope.tabs[1].title);\n  177:       expect(sandboxEl.find('.tab-content > .tab-pane.active').text()).toBe(scope.tabs[1].content);\n  178:       sandboxEl.find('.nav-tabs > li:eq(0) > a').triggerHandler('click');\n  179:       expect(sandboxEl.find('.nav-tabs > li.active').text()).toBe(scope.tabs[0].title);\n  180:       expect(sandboxEl.find('.tab-content > .tab-pane.active').text()).toBe(scope.tabs[0].content);\n  181      });\n  182  \n  183      it('should add pane dynamically', function() {\n  184        var elm = compileDirective('template-ngRepeat');\n  185:       expect(sandboxEl.find('.nav-tabs > li').length).toBe(scope.tabs.length);\n  186:       expect(sandboxEl.find('.tab-content > .tab-pane').length).toBe(scope.tabs.length);\n  187        scope.tabs.push({title:'New Tab', content: 'New tab content...'});\n  188        scope.$digest();\n  189:       expect(sandboxEl.find('.nav-tabs > li').length).toBe(scope.tabs.length);      \n  190:       expect(sandboxEl.find('.tab-content > .tab-pane').length).toBe(scope.tabs.length);\n  191      });\n  192  \n  193      it('should remove tab dynamically', function() {\n  194        var elm = compileDirective('template-ngRepeat');\n  195:       expect(sandboxEl.find('.nav-tabs > li').length).toBe(scope.tabs.length);\n  196        scope.tabs.pop();\n  197        scope.$digest();\n  198:       expect(sandboxEl.find('.nav-tabs > li').length).toBe(scope.tabs.length);      \n  199      });\n  200  \n  ...\n  207        it('should correctly apply model changes to the view', function() {\n  208          var elm = compileDirective('binding-' + bindingAttribute);\n  209:         expect(sandboxEl.find('.nav-tabs > li.active').index()).toBe(scope.tab.active);\n  210:         expect(sandboxEl.find('.tab-content > .tab-pane.active').index()).toBe(scope.tab.active);\n  211          scope.tab.active = 0;\n  212          scope.$digest();\n  213:         expect(sandboxEl.find('.nav-tabs > li.active').index()).toBe(scope.tab.active);\n  214:         expect(sandboxEl.find('.tab-content > .tab-pane.active').index()).toBe(scope.tab.active);\n  215        });\n  216  \n  217        it('should correctly apply view changes to the model', function() {\n  218          var elm = compileDirective('binding-' + bindingAttribute);\n  219:         sandboxEl.find('.nav-tabs > li:eq(0) > a').triggerHandler('click');\n  220          expect(scope.tab.active).toBe(0);\n  221        });\n  ...\n  223        it('should set active tab by name', function() {\n  224          var elm = compileDirective('binding-named-' + bindingAttribute, {tab: {active: 'title-2'}});\n  225:         expect(sandboxEl.find('.nav-tabs > li.active').index()).toBe(1);\n  226:         expect(sandboxEl.find('.tab-content > .tab-pane.active').attr('name')).toBe('title-2');\n  227        });\n  228  \n  229        it('should set tab name into model if it is provided', function() {\n  230          var elm = compileDirective('binding-named-' + bindingAttribute);\n  231:         sandboxEl.find('.nav-tabs > li:eq(1) > a').triggerHandler('click');\n  232          expect(scope.tab.active).toBe('title-2');\n  233        });\n  ...\n  235        it('should keep active pane when adding a new pane after', function() {\n  236          var elm = compileDirective('template-' + bindingAttribute + '-ngRepeat');\n  237:         expect(sandboxEl.find('.nav-tabs > li.active').index()).toBe(1);\n  238          scope.tabs.push({title:'New Tab', content: 'New tab content...'});\n  239          scope.$digest();\n  240:         expect(sandboxEl.find('.nav-tabs > li').length).toBe(4);\n  241:         expect(sandboxEl.find('.nav-tabs > li.active').index()).toBe(1);\n  242        });\n  243  \n  244        it('should keep active pane when removing another pane before', function() {\n  245          var elm = compileDirective('template-' + bindingAttribute + '-ngRepeat');\n  246:         expect(sandboxEl.find('.nav-tabs > li.active').index()).toBe(1);\n  247          scope.tabs.shift();\n  248          scope.$digest();\n  249:         expect(sandboxEl.find('.nav-tabs > li').length).toBe(2);\n  250:         expect(sandboxEl.find('.nav-tabs > li.active').index()).toBe(0);\n  251        });\n  252  \n  253        it('should keep active pane when removing another pane after', function() {\n  254          var elm = compileDirective('template-' + bindingAttribute + '-ngRepeat');\n  255:         expect(sandboxEl.find('.nav-tabs > li.active').index()).toBe(1);\n  256          scope.tabs.pop();\n  257          scope.$digest();\n  258:         expect(sandboxEl.find('.nav-tabs > li').length).toBe(2);\n  259:         expect(sandboxEl.find('.nav-tabs > li.active').index()).toBe(1);\n  260        });\n  261  \n  262        it('should keep active pane index when removing selected pane', function() {\n  263          var elm = compileDirective('template-' + bindingAttribute + '-ngRepeat');\n  264:         expect(sandboxEl.find('.nav-tabs > li.active').index()).toBe(1);\n  265          scope.tabs.splice(1, 1);\n  266          scope.$digest();\n  267:         expect(sandboxEl.find('.nav-tabs > li').length).toBe(2);\n  268:         expect(sandboxEl.find('.nav-tabs > li.active').index()).toBe(1);\n  269        });\n  270  \n  271        it('should select previous pane when removed selected pane is last', function() {\n  272          var elm = compileDirective('template-' + bindingAttribute + '-ngRepeat', {tab: {active: 2}});\n  273:         expect(sandboxEl.find('.nav-tabs > li.active').index()).toBe(2);\n  274          scope.tabs.pop();\n  275          scope.$digest();\n  276:         expect(sandboxEl.find('.nav-tabs > li').length).toBe(2);\n  277:         expect(sandboxEl.find('.nav-tabs > li.active').index()).toBe(1);\n  278        });\n  279      }\n  ...\n  295        it('should default to `am-fade` animation', function() {\n  296          var elm = compileDirective('default');\n  297:         expect(sandboxEl.find('[bs-pane]').hasClass('am-fade')).toBeTruthy();\n  298        });\n  299  \n  300        it('should support custom animation', function() {\n  301          var elm = compileDirective('options-animation');\n  302:         expect(sandboxEl.find('[bs-pane]').hasClass('am-flip-x')).toBeTruthy();\n  303        });\n  304  \n  ...\n  310          $templateCache.put('custom', '<div ng-transclude class=\"tab-content-primary\"></div>');\n  311          var elm = compileDirective('options-template');\n  312:         expect(sandboxEl.find('.tab-content-primary .tab-pane:eq(0)').text()).toBe('content-1');\n  313        });\n  314  \n  ...\n  319        it('should support custom navClass', function() {\n  320          var elm = compileDirective('options-navClass');\n  321:         expect(sandboxEl.find('.nav')[0].className).toBe('nav nav-pills nav-stacked');\n  322        });\n  323  \n  ...\n  328        it('should support custom activeClass', function() {\n  329          var elm = compileDirective('options-activeClass');\n  330:         expect(sandboxEl.find('.nav-tabs > li.active').length).toBe(0);\n  331:         expect(sandboxEl.find('.nav-tabs > li.in').text()).toBe('title-1');\n  332:         expect(sandboxEl.find('.tab-content > .tab-pane.in').text()).toBe('content-1');\n  333:         sandboxEl.find('.nav-tabs > li:eq(1) > a').triggerHandler('click');\n  334:         expect(sandboxEl.find('.nav-tabs > li.in').text()).toBe('title-2');\n  335:         expect(sandboxEl.find('.tab-content > .tab-pane.in').text()).toBe('content-2');\n  336:         sandboxEl.find('.nav-tabs > li:eq(0) > a').triggerHandler('click');\n  337:         expect(sandboxEl.find('.nav-tabs > li.in').text()).toBe('title-1');\n  338:         expect(sandboxEl.find('.tab-content > .tab-pane.in').text()).toBe('content-1');\n  339        });\n  340  \n  ...\n  349        it('should disable pane', function() {\n  350          var elm = compileDirective('pane-options-disabled');\n  351:         expect(sandboxEl.find('.nav-tabs > li:eq(1)').hasClass('disabled')).toBeTruthy();\n  352        });\n  353  \n\n/Users/olivier/Projects/angular-strap/src/timepicker/test/timepicker.spec.js:\n  198        var elm = compileDirective('default');\n  199        angular.element(elm[0]).triggerHandler('focus');\n  200:       expect(sandboxEl.find('.dropdown-menu tbody tr').length).toBe($timepicker.defaults.length);\n  201:       expect(sandboxEl.find('.dropdown-menu tbody .btn').length).toBe($timepicker.defaults.length * 4);\n  202      });\n  203  \n  ...\n  205        var elm = compileDirective('default');\n  206        angular.element(elm[0]).triggerHandler('focus');\n  207:       expect(sandboxEl.find('.dropdown-menu tbody tr:eq(2) td:eq(0) .btn-primary').text()).toBe(dateFilter(scope.selectedTime, 'h'));\n  208:       expect(sandboxEl.find('.dropdown-menu tbody tr:eq(2) td:eq(2) .btn-primary').text()).toBe(dateFilter(scope.selectedTime, 'mm'));\n  209:       expect(sandboxEl.find('.dropdown-menu tbody tr:eq(2) td:eq(6) .btn-primary').text()).toBe(dateFilter(scope.selectedTime, 'a'));\n  210      });\n  211  \n  ...\n  216        // Should correctly set the model value if set via the timepicker\n  217        angular.element(elm[0]).triggerHandler('focus');\n  218:       angular.element(sandboxEl.find('.dropdown-menu tbody .btn:contains(12)')).triggerHandler('click');\n  219        expect(elm.val()).toBe('12:30 PM');\n  220        expect(scope.selectedTime.toISOString().substr(0, 10)).toBe('1970-01-01');\n  221:       angular.element(sandboxEl.find('.dropdown-menu tbody .btn:contains(12)')).triggerHandler('click');\n  222        expect(scope.selectedTime.toISOString().substr(0, 10)).toBe('1970-01-01');\n  223:       angular.element(sandboxEl.find('.dropdown-menu tbody .btn:contains(11)')).triggerHandler('click');\n  224        expect(elm.val()).toBe('11:30 AM');\n  225        expect(scope.selectedTime).toEqual(new Date(1970, 0, 1, 11, 30, 42));\n  ...\n  243        angular.element(elm[0]).triggerHandler('focus');\n  244        expect(elm.val()).toBe('');\n  245:       expect(sandboxEl.find('.dropdown-menu tbody tr').length).toBe($timepicker.defaults.length);\n  246:       expect(sandboxEl.find('.dropdown-menu tbody .btn').length).toBe($timepicker.defaults.length * 4);\n  247        elm.val('0');\n  248        angular.element(elm[0]).triggerHandler('change');\n  ...\n  253        angular.element(elm[0]).triggerHandler('focus');\n  254        expect(elm.val()).toBe('');\n  255:       expect(sandboxEl.find('.dropdown-menu tbody tr').length).toBe($timepicker.defaults.length);\n  256:       expect(sandboxEl.find('.dropdown-menu tbody .btn').length).toBe($timepicker.defaults.length * 4);\n  257:       angular.element(sandboxEl.find('.dropdown-menu tbody button:eq(0)')[0]).triggerHandler('click');\n  258        expect(angular.isDate(scope.selectedTime)).toBeTruthy();\n  259      });\n  ...\n  263        expect(elm.val()).toBe('');\n  264        angular.element(elm[0]).triggerHandler('focus');\n  265:       var amButton = angular.element(sandboxEl.find('.dropdown-menu tbody td:eq(6) button:eq(0)')[0]);\n  266        spyOn(scope.$$childHead, '$switchMeridian');\n  267        amButton.triggerHandler('click');\n  ...\n  275        angular.element(elm[0]).triggerHandler('change');\n  276        angular.element(elm[0]).triggerHandler('focus');\n  277:       expect(sandboxEl.find('.dropdown-menu tbody tr:eq(2) td:eq(0) .btn-primary').text().trim() * 1 % 12).toBe(today.getHours() % 12);\n  278:       angular.element(sandboxEl.find('.dropdown-menu tbody tr:eq(0) td:eq(0) .btn')[0]).triggerHandler('click');\n  279        expect(scope.selectedTime.getHours()).not.toBe(today.getHours());\n  280      });\n  ...\n  289      it('should support ngRepeat markup', function() {\n  290        var elm = compileDirective('markup-ngRepeat');\n  291:       angular.element(elm.find('[bs-timepicker]:eq(0)')).triggerHandler('focus');\n  292:       expect(sandboxEl.find('.dropdown-menu tbody tr').length).toBe($timepicker.defaults.length);\n  293:       expect(sandboxEl.find('.dropdown-menu tbody .btn').length).toBe($timepicker.defaults.length * 4);\n  294      });\n  295  \n  ...\n  298        angular.element(elm[0]).triggerHandler('focus');\n  299        var spy = spyOn(scope, 'onChange').and.callThrough();\n  300:       angular.element(sandboxEl.find('.dropdown-menu tbody .btn:eq(1)')[0]).triggerHandler('click');\n  301        expect(spy).toHaveBeenCalled();\n  302      });\n  ...\n  310  \n  311        angular.element(elm[0]).triggerHandler('focus');\n  312:       expect(sandboxEl.find('.dropdown-menu tbody tr:eq(2) td:eq(0) .btn-primary').text()).toBe(dateFilter(scope.selectedTime, 'h'));\n  313:       expect(sandboxEl.find('.dropdown-menu tbody tr:eq(2) td:eq(2) .btn-primary').text()).toBe(dateFilter(scope.selectedTime, 'mm'));\n  314:       expect(sandboxEl.find('.dropdown-menu tbody tr:eq(2) td:eq(6) .btn-primary').text()).toBe(dateFilter(scope.selectedTime, 'a'));\n  315  \n  316      });\n  ...\n  554          angular.element(elm[0]).triggerHandler('focus');\n  555          expect(sandboxEl.children('.dropdown-menu.timepicker').length).toBe(1);\n  556:         angular.element(sandboxEl.find('.dropdown-menu tbody .btn:first')).triggerHandler('click');\n  557          $timeout.flush();\n  558          expect(sandboxEl.children('.dropdown-menu.timepicker').length).toBe(0);\n  ...\n  563          angular.element(elm[0]).triggerHandler('focus');\n  564          expect(sandboxEl.children('.dropdown-menu.timepicker').length).toBe(1);\n  565:         angular.element(sandboxEl.find('.dropdown-menu tbody .btn:first')).triggerHandler('click');\n  566          $timeout.flush();\n  567          expect(sandboxEl.children('.dropdown-menu.timepicker').length).toBe(1);\n  ...\n  618          var elm = compileDirective('options-template');\n  619          angular.element(elm[0]).triggerHandler('focus');\n  620:         expect(sandboxEl.find('.dropdown-inner').text()).toBe('foo: \"' + scope.selectedTime.toISOString() + '\"');\n  621        });\n  622  \n  ...\n  625          var elm = compileDirective('options-template');\n  626          angular.element(elm[0]).triggerHandler('focus');\n  627:         expect(sandboxEl.find('.dropdown-inner').text()).toBe('123');\n  628          // Consecutive toggles\n  629          angular.element(elm[0]).triggerHandler('blur');\n  630          angular.element(elm[0]).triggerHandler('focus');\n  631:         expect(sandboxEl.find('.dropdown-inner').text()).toBe('123');\n  632        });\n  633  \n  ...\n  637          scope.dropdown = {counter: 0};\n  638          angular.element(elm[0]).triggerHandler('focus');\n  639:         expect(angular.element(sandboxEl.find('.dropdown-inner > .btn')[0]).triggerHandler('click'));\n  640          expect(scope.dropdown.counter).toBe(1);\n  641          // Consecutive toggles\n  642          angular.element(elm[0]).triggerHandler('blur');\n  643          angular.element(elm[0]).triggerHandler('focus');\n  644:         expect(angular.element(sandboxEl.find('.dropdown-inner > .btn')[0]).triggerHandler('click'));\n  645          expect(scope.dropdown.counter).toBe(2);\n  646        });\n  ...\n  653          var elm = compileDirective('options-timeFormat');\n  654          angular.element(elm[0]).triggerHandler('focus');\n  655:         expect(sandboxEl.find('.dropdown-menu thead .btn').length).toBe(2);\n  656:         expect(sandboxEl.find('.dropdown-menu tbody .btn').length).toBe($timepicker.defaults.length * 2);\n  657:         expect(sandboxEl.find('.dropdown-menu tfoot .btn').length).toBe(2);\n  658        });\n  659  \n  ...\n  661          var elm = compileDirective('options-timeFormat-seconds');\n  662          angular.element(elm[0]).triggerHandler('focus');\n  663:         expect(sandboxEl.find('.dropdown-menu thead .btn').length).toBe(3);\n  664:         expect(sandboxEl.find('.dropdown-menu tbody .btn').length).toBe($timepicker.defaults.length * 3);\n  665:         expect(sandboxEl.find('.dropdown-menu tfoot .btn').length).toBe(3);\n  666        });\n  667  \n  ...\n  680          $animate.flush();\n  681          expect(sandboxEl.children('.dropdown-menu.timepicker').length).toBe(1);\n  682:         expect(sandboxEl.find('.dropdown-menu tbody tr:eq(2) td:eq(0) .btn-primary').text()).toBe('8');\n  683  \n  684          // cursor up\n  685          triggerKeyDown(elm, 38);\n  686:         expect(sandboxEl.find('.dropdown-menu tbody tr:eq(2) td:eq(0) .btn-primary').text()).toBe('7');\n  687          // cursor down\n  688          triggerKeyDown(elm, 40);\n  689:         expect(sandboxEl.find('.dropdown-menu tbody tr:eq(2) td:eq(0) .btn-primary').text()).toBe('8');\n  690  \n  691          // cursor right -> select minutes\n  692          triggerKeyDown(elm, 39);\n  693:         expect(sandboxEl.find('.dropdown-menu tbody tr:eq(2) td:eq(2) .btn-primary').text()).toBe('30');\n  694          // cursor up\n  695          triggerKeyDown(elm, 38);\n  696:         expect(sandboxEl.find('.dropdown-menu tbody tr:eq(2) td:eq(2) .btn-primary').text()).toBe('25');\n  697          // cursor down\n  698          triggerKeyDown(elm, 40);\n  699:         expect(sandboxEl.find('.dropdown-menu tbody tr:eq(2) td:eq(2) .btn-primary').text()).toBe('30');\n  700        });\n  701  \n  ...\n  710          $animate.flush();\n  711          expect(sandboxEl.children('.dropdown-menu.timepicker').length).toBe(1);\n  712:         expect(sandboxEl.find('.dropdown-menu tbody tr:eq(2) td:eq(0) .btn-primary').text()).toBe('08');\n  713  \n  714          // cursor right -> select minutes\n  ...\n  716          // cursor right -> select seconds\n  717          triggerKeyDown(elm, 39);\n  718:         expect(sandboxEl.find('.dropdown-menu tbody tr:eq(2) td:eq(4) .btn-primary').text()).toBe('40');\n  719          // cursor up\n  720          triggerKeyDown(elm, 38);\n  721:         expect(sandboxEl.find('.dropdown-menu tbody tr:eq(2) td:eq(4) .btn-primary').text()).toBe('35');\n  722          // cursor down\n  723          triggerKeyDown(elm, 40);\n  724:         expect(sandboxEl.find('.dropdown-menu tbody tr:eq(2) td:eq(4) .btn-primary').text()).toBe('40');\n  725        });\n  726  \n  ...\n  739          $animate.flush();\n  740          expect(sandboxEl.children('.dropdown-menu.timepicker').length).toBe(1);\n  741:         expect(sandboxEl.find('.dropdown-menu tbody tr:eq(2) td:eq(0) .btn-primary').text()).toBe('8');\n  742  \n  743          // cursor down -> select hours -> 9\n  ...\n  778          $animate.flush();\n  779          expect(sandboxEl.children('.dropdown-menu.timepicker').length).toBe(1);\n  780:         expect(sandboxEl.find('.dropdown-menu tbody tr:eq(2) td:eq(0) .btn-primary').text()).toBe('8');\n  781  \n  782          // cursor down -> select hours\n  ...\n  811          expect(elm.val()).toBe('10:30');\n  812          angular.element(elm[0]).triggerHandler('focus');\n  813:         angular.element(sandboxEl.find('.dropdown-menu tbody .btn:contains(09)')).triggerHandler('click');\n  814          expect(elm.val()).toBe('09:30');\n  815        });\n  ...\n  818          var elm = compileDirective('options-timeFormat-seconds-meridian');\n  819          angular.element(elm[0]).triggerHandler('focus');\n  820:         expect(sandboxEl.find('.dropdown-menu tbody tr:eq(2) td:eq(0) .btn-primary').text()).toBe(dateFilter(scope.selectedTime, 'h'));\n  821:         expect(sandboxEl.find('.dropdown-menu tbody tr:eq(2) td:eq(2) .btn-primary').text()).toBe(dateFilter(scope.selectedTime, 'mm'));\n  822:         expect(sandboxEl.find('.dropdown-menu tbody tr:eq(2) td:eq(4) .btn-primary').text()).toBe(dateFilter(scope.selectedTime, 'ss'));\n  823:         expect(sandboxEl.find('.dropdown-menu tbody tr:eq(2) td:eq(6) .btn-primary').text()).toBe(dateFilter(scope.selectedTime, 'a'));\n  824        });\n  825  \n  ...\n  828          expect(elm.val()).toBe('10:30:42');\n  829          angular.element(elm[0]).triggerHandler('focus');\n  830:         angular.element(sandboxEl.find('.dropdown-menu tbody .btn:contains(47)')).triggerHandler('click');\n  831          expect(elm.val()).toBe('10:30:47');\n  832        });\n  ...\n  868          expect(scope.selectedTime).toBe('10:30');\n  869          angular.element(elm[0]).triggerHandler('focus');\n  870:         angular.element(sandboxEl.find('.dropdown-menu tbody .btn:contains(09)')).triggerHandler('click');\n  871          expect(elm.val()).toBe('09:30');\n  872          expect(scope.selectedTime).toBe('09:30');\n  ...\n  878          expect(scope.selectedTime).toBe(null);\n  879          angular.element(elm[0]).triggerHandler('focus');\n  880:         angular.element(sandboxEl.find('.dropdown-menu tbody .btn:eq(0)')).triggerHandler('click');\n  881          expect(elm.val()).toBeTruthy();\n  882          expect(scope.selectedTime).toBeTruthy();\n  ...\n  888          expect(scope.selectedTime).toBe(new Date(1970, 0, 1, 10, 30, 42).getTime());\n  889          angular.element(elm[0]).triggerHandler('focus');\n  890:         angular.element(sandboxEl.find('.dropdown-menu tbody .btn:contains(09)')).triggerHandler('click');\n  891          expect(elm.val()).toBe('09:30');\n  892          expect(scope.selectedTime).toBe(new Date(1970, 0, 1, 9, 30, 42).getTime());\n  ...\n  898          expect(scope.selectedTime).toBe(new Date(1970, 0, 1, 10, 30, 42).getTime() / 1000);\n  899          angular.element(elm[0]).triggerHandler('focus');\n  900:         angular.element(sandboxEl.find('.dropdown-menu tbody .btn:contains(09)')).triggerHandler('click');\n  901          expect(elm.val()).toBe('09:30');\n  902          expect(scope.selectedTime).toBe(new Date(1970, 0, 1, 9, 30, 42) / 1000);\n  ...\n  909          expect(scope.selectedTime).toBe(new Date(1970, 0, 1, 10, 30, 42).toISOString());\n  910          angular.element(elm[0]).triggerHandler('focus');\n  911:         angular.element(sandboxEl.find('.dropdown-menu tbody .btn:contains(09)')).triggerHandler('click');\n  912          expect(elm.val()).toBe('09:30');\n  913          expect(scope.selectedTime).toBe(new Date(1970, 0, 1, 9, 30, 42).toISOString());\n  ...\n  921          var elm = compileDirective('options-minTime');\n  922          angular.element(elm[0]).triggerHandler('focus');\n  923:         expect(sandboxEl.find('.dropdown-menu tbody button:contains(8)').is(':disabled')).toBeTruthy();\n  924          scope.minTime = '08:30 AM';\n  925          scope.$digest();\n  926:         expect(sandboxEl.find('.dropdown-menu tbody button:contains(8)').is(':disabled')).toBeFalsy();\n  927        });\n  928  \n  ...\n  932          var todayHour = today.getHours();\n  933          // @TODO fixme\n  934:         // expect(sandboxEl.find('.dropdown-menu tbody button:contains(' + (todayHour - 1) + ')').is(':disabled')).toBeTruthy();\n  935        });\n  936  \n  ...\n  938          var elm = compileDirective('options-minTime', { minTime: new Date(1970, 0, 1, 9, 30)});\n  939          angular.element(elm[0]).triggerHandler('focus');\n  940:         expect(sandboxEl.find('.dropdown-menu tbody button:contains(8)').is(':disabled')).toBeTruthy();\n  941          scope.minTime = new Date(1970, 0, 1, 8, 30);\n  942          scope.$digest();\n  943:         expect(sandboxEl.find('.dropdown-menu tbody button:contains(8)').is(':disabled')).toBeFalsy();\n  944        });\n  945  \n  ...\n  947          var elm = compileDirective('options-minTime', { minTime: new Date(1987, 6, 13, 9, 30)});\n  948          angular.element(elm[0]).triggerHandler('focus');\n  949:         expect(sandboxEl.find('.dropdown-menu tbody button:contains(8)').is(':disabled')).toBeTruthy();\n  950          scope.minTime = new Date(1987, 6, 13, 8, 30);\n  951          scope.$digest();\n  952:         expect(sandboxEl.find('.dropdown-menu tbody button:contains(8)').is(':disabled')).toBeFalsy();\n  953        });\n  954  \n  ...\n  956          var elm = compileDirective('options-minTime');\n  957          angular.element(elm[0]).triggerHandler('focus');\n  958:         expect(sandboxEl.find('.dropdown-menu tbody button:contains(8)').is(':disabled')).toBeTruthy();\n  959          scope.minTime = '';\n  960          scope.$digest();\n  961:         expect(sandboxEl.find('.dropdown-menu tbody button:contains(8)').is(':disabled')).toBeFalsy();\n  962        });\n  963  \n  ...\n 1003          var elm = compileDirective('options-maxTime');\n 1004          angular.element(elm[0]).triggerHandler('focus');\n 1005:         expect(sandboxEl.find('.dropdown-menu tbody button:contains(11)').is(':disabled')).toBeFalsy();\n 1006          scope.maxTime = '10:30 AM';\n 1007          scope.$digest();\n 1008:         expect(sandboxEl.find('.dropdown-menu tbody button:contains(11)').is(':disabled')).toBeTruthy();\n 1009        });\n 1010  \n ....\n 1014          var todayHour = today.getHours();\n 1015          // @TODO fixme\n 1016:         // expect(sandboxEl.find('.dropdown-menu tbody button:contains(' + (todayHour + 1) + ')').is(':disabled')).toBeTruthy();\n 1017        });\n 1018  \n ....\n 1020          var elm = compileDirective('options-maxTime', { maxTime: new Date(1970, 0, 1, 22, 30)});\n 1021          angular.element(elm[0]).triggerHandler('focus');\n 1022:         expect(sandboxEl.find('.dropdown-menu tbody button:contains(11)').is(':disabled')).toBeFalsy();\n 1023          scope.maxTime = new Date(1970, 0, 1, 10, 30);\n 1024          scope.$digest();\n 1025:         expect(sandboxEl.find('.dropdown-menu tbody button:contains(11)').is(':disabled')).toBeTruthy();\n 1026        });\n 1027  \n ....\n 1029          var elm = compileDirective('options-maxTime', { maxTime: new Date(1927, 6, 13, 22, 30)});\n 1030          angular.element(elm[0]).triggerHandler('focus');\n 1031:         expect(sandboxEl.find('.dropdown-menu tbody button:contains(11)').is(':disabled')).toBeFalsy();\n 1032          scope.maxTime = new Date(1927, 6, 13, 10, 30);\n 1033          scope.$digest();\n 1034:         expect(sandboxEl.find('.dropdown-menu tbody button:contains(11)').is(':disabled')).toBeTruthy();\n 1035        });\n 1036  \n ....\n 1040          scope.maxTime = '10:30 AM';\n 1041          scope.$digest();\n 1042:         expect(sandboxEl.find('.dropdown-menu tbody button:contains(11)').is(':disabled')).toBeTruthy();\n 1043          scope.maxTime = '';\n 1044          scope.$digest();\n 1045:         expect(sandboxEl.find('.dropdown-menu tbody button:contains(11)').is(':disabled')).toBeFalsy();\n 1046        });\n 1047  \n ....\n 1102          // Should correctly set the model value if set via the timepicker\n 1103          angular.element(elm[0]).triggerHandler('focus');\n 1104:         angular.element(sandboxEl.find('.dropdown-menu tbody .btn:contains(13)')).triggerHandler('click');\n 1105          expect(elm.val()).toBe('13:20');\n 1106          expect(scope.selectedTime).toBe('13:20:10');\n ....\n 1122  \n 1123          angular.element(elm[0]).triggerHandler('focus');\n 1124:         expect(sandboxEl.find('.dropdown-menu tbody tr:eq(2) td:eq(0) .btn-primary').text()).toBe(dateFilter(scope.selectedTime, 'h'));\n 1125  \n 1126:         sandboxEl.find('.dropdown-menu thead button:eq(0)').triggerHandler('click');\n 1127  \n 1128          // picker should scroll 5 hours (data-length)\n 1129          var newMiddleHour = new Date(scope.selectedTime.getTime() - (5 * 60 * 60 * 1000));\n 1130:         expect(sandboxEl.find('.dropdown-menu tbody tr:eq(2) td:eq(0)').text()).toBe(dateFilter(newMiddleHour, 'h'));\n 1131        });\n 1132  \n ....\n 1138  \n 1139          angular.element(elm[0]).triggerHandler('focus');\n 1140:         expect(sandboxEl.find('.dropdown-menu tbody tr:eq(2) td:eq(0) .btn-primary').text()).toBe(dateFilter(scope.selectedTime, 'h'));\n 1141:         sandboxEl.find('.dropdown-menu thead button:eq(0)').triggerHandler('click');\n 1142          expect(scope.selectedTime).toEqual(testTime);\n 1143        });\n ....\n 1150  \n 1151          angular.element(elm[0]).triggerHandler('focus');\n 1152:         expect(sandboxEl.find('.dropdown-menu tbody tr:eq(2) td:eq(0) .btn-primary').text()).toBe(dateFilter(scope.selectedTime, 'h'));\n 1153:         sandboxEl.find('.dropdown-menu thead button:eq(0)').triggerHandler('click');\n 1154          expect(scope.selectedTime).toEqual(dateFilter(testTime, 'h:00 a'));\n 1155        });\n ....\n 1184            currentTime.setMinutes(currentTime.getMinutes() - currentTime.getMinutes() % 15);\n 1185            angular.element(elm[0]).triggerHandler('focus');\n 1186:           expect(sandboxEl.find('.dropdown-menu tbody tr:eq(2) td:eq(0)').text()).toBe(dateFilter(currentTime, 'h'));\n 1187:           expect(sandboxEl.find('.dropdown-menu tbody tr:eq(2) td:eq(2)').text()).toBe(dateFilter(currentTime, 'mm'));\n 1188          });\n 1189  \n ....\n 1193            currentTime.setSeconds(0);\n 1194            angular.element(elm[0]).triggerHandler('focus');\n 1195:           expect(sandboxEl.find('.dropdown-menu tbody tr:eq(2) td:eq(0)').text()).toBe(dateFilter(currentTime, 'HH'));\n 1196:           expect(sandboxEl.find('.dropdown-menu tbody tr:eq(2) td:eq(2)').text()).toBe(dateFilter(currentTime, 'mm'));\n 1197:           expect(sandboxEl.find('.dropdown-menu tbody tr:eq(2) td:eq(4)').text()).toBe(dateFilter(currentTime, 'ss'));\n 1198          });\n 1199        });\n ....\n 1207          currentTime.setMinutes(currentTime.getMinutes() - currentTime.getMinutes() % 15);\n 1208          angular.element(elm[0]).triggerHandler('focus');\n 1209:         expect(sandboxEl.find('.dropdown-menu tbody tr:eq(2) td:eq(2)').text()).not.toBe(dateFilter(currentTime, 'mm'));\n 1210        });\n 1211  */\n\n/Users/olivier/Projects/angular-strap/src/tooltip/test/tooltip.spec.js:\n  223        angular.element(elm[0]).triggerHandler('mouseenter');\n  224        $animate.flush();\n  225:       expect(sandboxEl.find('.tooltip-inner').html()).toBe(scope.tooltip.title);\n  226      });\n  227  \n  ...\n  230        angular.element(elm[0]).triggerHandler('mouseenter');\n  231        $animate.flush();\n  232:       expect(sandboxEl.find('.tooltip-inner').html()).toBe(scope.tooltip.title);\n  233      });\n  234  \n  235      it('should support ngRepeat markup', function() {\n  236        var elm = compileDirective('markup-ngRepeat');\n  237:       angular.element(elm.find('[bs-tooltip]')).triggerHandler('mouseenter');\n  238        $animate.flush();\n  239:       expect(sandboxEl.find('.tooltip-inner').html()).toBe(scope.items[0].tooltip);\n  240      });\n  241  \n  ...\n  432        angular.element(elm[0]).triggerHandler('mouseenter');\n  433        $animate.flush();\n  434:       expect(sandboxEl.find('.tooltip-inner').html()).toBe(scope.tooltip.title);\n  435      });\n  436  \n  437      it('should support string value from within ngRepeat markup', function() {\n  438        var elm = compileDirective('bsTooltip-ngRepeat-string');\n  439:       angular.element(elm.find('[bs-tooltip]')).triggerHandler('mouseenter');\n  440        $animate.flush();\n  441:       expect(sandboxEl.find('.tooltip-inner').html()).toBe(scope.items[0].tooltip);\n  442      });\n  443  \n  ...\n  446        angular.element(elm[0]).triggerHandler('mouseenter');\n  447        $animate.flush();\n  448:       expect(sandboxEl.find('.tooltip-inner').html()).toBe('');\n  449      });\n  450  \n  ...\n  815          var elm = compileDirective('default', {tooltip: {title: 'title<br>next'}});\n  816          angular.element(elm[0]).triggerHandler('mouseenter');\n  817:         expect(sandboxEl.find('.tooltip-inner').html()).not.toBe('title<br>next');\n  818        });\n  819  \n  ...\n  821          var elm = compileDirective('options-html', {html: 'true'});\n  822          angular.element(elm[0]).triggerHandler('mouseenter');\n  823:         expect(sandboxEl.find('.tooltip-inner').html()).toBe('title<br>next');\n  824        });\n  825  \n  ...\n  827          var elm = compileDirective('options-html', {html: 'false'});\n  828          angular.element(elm[0]).triggerHandler('mouseenter');\n  829:         expect(sandboxEl.find('.tooltip-inner').html()).not.toBe('title<br>next');\n  830        });\n  831  \n  ...\n  839          var elm = compileDirective('options-template');\n  840          angular.element(elm[0]).triggerHandler('mouseenter');\n  841:         expect(sandboxEl.find('.tooltip-inner').text()).toBe('foo: ' + scope.tooltip.title);\n  842        });\n  843  \n  ...\n  846          var elm = compileDirective('options-template');\n  847          angular.element(elm[0]).triggerHandler('mouseenter');\n  848:         expect(sandboxEl.find('.tooltip-inner').text()).toBe('foo: ' + scope.tooltip.title);\n  849        });\n  850  \n  ...\n  854          $httpBackend.flush();\n  855          angular.element(elm[0]).triggerHandler('mouseenter');\n  856:         expect(sandboxEl.find('.tooltip-inner').text()).toBe('foo: ' + scope.tooltip.title);\n  857        });\n  858  \n  ...\n  863          $httpBackend.flush();\n  864          angular.element(elm[0]).triggerHandler('mouseenter');\n  865:         expect(sandboxEl.find('.tooltip-inner').text()).toBe('foo: ' + scope.tooltip.title);\n  866        });\n  867  \n  ...\n  870          var elm = compileDirective('options-template');\n  871          angular.element(elm[0]).triggerHandler('mouseenter');\n  872:         expect(sandboxEl.find('.tooltip-inner').text()).toBe('foobarbaz');\n  873          // Consecutive toggles\n  874          angular.element(elm[0]).triggerHandler('mouseleave');\n  875          angular.element(elm[0]).triggerHandler('mouseenter');\n  876:         expect(sandboxEl.find('.tooltip-inner').text()).toBe('foobarbaz');\n  877        });\n  878  \n  ...\n  881          var elm = compileDirective('options-template');\n  882          angular.element(elm[0]).triggerHandler('mouseenter');\n  883:         expect(angular.element(sandboxEl.find('.tooltip-inner > .btn')[0]).triggerHandler('click'));\n  884          expect(scope.tooltip.counter).toBe(1);\n  885          // Consecutive toggles\n  886          angular.element(elm[0]).triggerHandler('mouseleave');\n  887          angular.element(elm[0]).triggerHandler('mouseenter');\n  888:         expect(angular.element(sandboxEl.find('.tooltip-inner > .btn')[0]).triggerHandler('click'));\n  889          expect(scope.tooltip.counter).toBe(2);\n  890        });\n  ...\n  899          angular.element(elm[0]).triggerHandler('mouseenter');\n  900          // @TODO fixme\n  901:         // expect(sandboxEl.find('.tooltip-inner').text()).toBe('foo: ' + scope.tooltip.title);\n  902        });\n  903  \n  ...\n  973          angular.element(elm[0]).triggerHandler('mouseenter');\n  974  \n  975:         // Find the tip in the sandbox and grab it's\n  976          // top and left styles\n  977          var tipElement = sandboxEl.children('.tooltip')[0];\n\n/Users/olivier/Projects/angular-strap/src/tooltip/tooltip.js:\n  118              tipContainer = options.container;\n  119            } else if(options.container) {\n  120:             tipContainer = findElement(options.container);\n  121            }\n  122  \n  ...\n  126            // Options: target\n  127            if(options.target) {\n  128:             options.target = angular.isElement(options.target) ? options.target : findElement(options.target);\n  129            }\n  130  \n  ...\n  351  \n  352            // Refresh viewport position\n  353:           $tooltip.$viewport = options.viewport && findElement(options.viewport.selector || options.viewport);\n  354  \n  355            // If we're auto placing, we need to check the positioning\n  ...\n  653  \n  654          function replaceArrow(delta, dimension, isHorizontal) {\n  655:           var $arrow = findElement('.tooltip-arrow, .arrow', tipElement[0]);\n  656  \n  657            $arrow.css(isHorizontal ? 'left' : 'top', 50 * (1 - delta / dimension) + '%')\n  ...\n  694        }\n  695  \n  696:       function findElement(query, element) {\n  697          return angular.element((element || document).querySelectorAll(query));\n  698        }\n\n/Users/olivier/Projects/angular-strap/src/typeahead/test/typeahead.spec.js:\n  155        var elm = compileDirective('default');\n  156        angular.element(elm[0]).triggerHandler('focus');\n  157:       expect(sandboxEl.find('.dropdown-menu li').length).toBe($typeahead.defaults.limit);\n  158:       expect(sandboxEl.find('.dropdown-menu li:eq(0)').text()).toBe(scope.states[0]);\n  159        expect(elm.val()).toBe('');\n  160      });\n  ...\n  174        expect(elm.val()).toBe(scope.states[0].substr(0, 2 + 4));\n  175        angular.element(elm[0]).triggerHandler('change');\n  176:       expect(sandboxEl.find('.dropdown-menu li').length).toBe(1);\n  177:       expect(sandboxEl.find('.dropdown-menu li:eq(0)').text()).toBe(scope.states[0]);\n  178      });\n  179  \n  ...\n  181        var elm = compileDirective('default');\n  182        angular.element(elm[0]).triggerHandler('focus');\n  183:       expect(sandboxEl.find('.dropdown-menu li').length).toBe($typeahead.defaults.limit);\n  184:       angular.element(sandboxEl.find('.dropdown-menu li:eq(0) a').get(0)).triggerHandler('click');\n  185        expect(scope.selectedState).toBe(scope.states[0]);\n  186      });\n  ...\n  192        expect(elm.val()).toBe(scope.codes[0].substr(0, 5));\n  193        angular.element(elm[0]).triggerHandler('change');\n  194:       expect(sandboxEl.find('.dropdown-menu li').length).toBe(2); // 000000 & 000001\n  195        elm.val(scope.codes[0].substr(0, 6)); // 000000\n  196        expect(elm.val()).toBe(scope.codes[0].substr(0, 6));\n  197        angular.element(elm[0]).triggerHandler('change');\n  198:       expect(sandboxEl.find('.dropdown-menu li').length).toBe(1); // 000000\n  199      });\n  200  \n  ...\n  207        var elm = compileDirective('default-with-promise');\n  208        angular.element(elm[0]).triggerHandler('focus');\n  209:       expect(sandboxEl.find('.dropdown-menu li').length).toBe($typeahead.defaults.limit);\n  210:       angular.element(sandboxEl.find('.dropdown-menu li:eq(0) a').get(0)).triggerHandler('click');\n  211        expect(scope.selectedState).toBe(scope.states[0]);\n  212      });\n  ...\n  220        expect(elm.val()).toBe(scope.codes[0].substr(0, 3));\n  221        angular.element(elm[0]).triggerHandler('change');\n  222:       expect(sandboxEl.find('.dropdown-menu li').length).toBe(2); // 001000, 002001\n  223      });\n  224  \n  ...\n  232        expect(elm.val()).toBe(scope.codes[0].substr(0, 3));\n  233        angular.element(elm[0]).triggerHandler('change');\n  234:       expect(sandboxEl.find('.dropdown-menu li').length).toBe(1); // Our comparator should only match the beginning - 001000\n  235      });\n  236  \n  237      it('should support ngRepeat markup', function() {\n  238        var elm = compileDirective('markup-ngRepeat');\n  239:       angular.element(elm.find('[bs-typeahead]:eq(0)')).triggerHandler('focus');\n  240:       expect(sandboxEl.find('.dropdown-menu li').length).toBe($typeahead.defaults.limit);\n  241:       expect(sandboxEl.find('.dropdown-menu li:eq(0)').text()).toBe(scope.states[0]);\n  242      });\n  243  \n  ...\n  245        var elm = compileDirective('markup-objectValue');\n  246        angular.element(elm[0]).triggerHandler('focus');\n  247:       expect(sandboxEl.find('.dropdown-menu li:eq(0) a').html()).toBe(scope.icons[0].label);\n  248:       angular.element(sandboxEl.find('.dropdown-menu li:eq(0) a').get(0)).triggerHandler('click');\n  249        expect(scope.selectedIcon).toBe(scope.icons[0]);\n  250        expect(elm.val()).toBe(jQuery('div').html(scope.icons[0].label).text().trim());\n  ...\n  257        expect(elm.val()).toBe(jQuery('<div></div>').html(scope.icons[1].fr_FR).text().trim());\n  258        angular.element(elm[0]).triggerHandler('focus');\n  259:       expect(sandboxEl.find('.dropdown-menu li:eq(0) a').html()).toBe(scope.icons[1].fr_FR);\n  260        elm.val('');\n  261        angular.element(elm[0]).triggerHandler('change');\n  262:       angular.element(sandboxEl.find('.dropdown-menu li:eq(0) a').get(0)).triggerHandler('click');\n  263        expect(scope.selectedIcon).toBe(scope.icons[0]);\n  264        expect(elm.val()).toBe(jQuery('<div></div>').html(scope.icons[0].fr_FR).text().trim());\n  ...\n  272        angular.element(elem[0]).triggerHandler('focus');\n  273        scope.$digest();\n  274:       expect(sandboxEl.find('.dropdown-menu li a').length).toBe(4);\n  275  \n  276        elem.val(target.alt);\n  ...\n  279        expect(elem.val()).toBe(target.alt);\n  280  \n  281:       angular.element(sandboxEl.find('.dropdown-menu li:eq(0) a').get(0)).triggerHandler('click');\n  282        scope.$digest();\n  283  \n  ...\n  288        var elm = compileDirective('default', { states: [1, 2, 3] });\n  289        angular.element(elm[0]).triggerHandler('focus');\n  290:       expect(sandboxEl.find('.dropdown-menu li:eq(0) a').html()).toBe('1');\n  291:       angular.element(sandboxEl.find('.dropdown-menu li:eq(0) a').get(0)).triggerHandler('click');\n  292        expect(scope.selectedState).toBe(scope.states[0]);\n  293        expect(elm.val()).toBe(jQuery('div').html(scope.states[0]).text().trim());\n  ...\n  322        scope.$digest();\n  323        angular.element(elm[0]).triggerHandler('focus');\n  324:       expect(sandboxEl.find('.dropdown-menu li:eq(0)').text().trim()).toBe(scope.states[0]);\n  325      });\n  326  \n  ...\n  430          var elm = compileDirective('options-html', {html: 'true'});\n  431          angular.element(elm[0]).triggerHandler('focus');\n  432:         expect(sandboxEl.find('.dropdown-menu li').length).toBe(scope.icons.length);\n  433:         expect(sandboxEl.find('.dropdown-menu li:eq(0) a').html()).toBe(scope.icons[0].label);\n  434        });\n  435  \n  ...\n  437          var elm = compileDirective('options-html', {html: 'false'});\n  438          angular.element(elm[0]).triggerHandler('focus');\n  439:         expect(sandboxEl.find('.dropdown-menu li').length).toBe(scope.icons.length);\n  440:         expect(sandboxEl.find('.dropdown-menu li:eq(0) a').html()).not.toBe(scope.icons[0].label);\n  441        });\n  442  \n  ...\n  450          var elm = compileDirective('options-container', angular.extend({}, templates.default.scope, {container: '#testElm'}));\n  451          angular.element(elm[0]).triggerHandler('focus');\n  452:         expect(testElm.find('ul.typeahead').length).toBe(1);\n  453        });\n  454  \n  ...\n  456          var elm = compileDirective('options-container', angular.extend({}, templates.default.scope, {container: 'false'}));\n  457          angular.element(elm[0]).triggerHandler('focus');\n  458:         expect(sandboxEl.find('ul.typeahead').length).toBe(1);\n  459        });\n  460  \n  ...\n  467          var elm = compileDirective('options-template');\n  468          angular.element(elm[0]).triggerHandler('focus');\n  469:         expect(sandboxEl.find('.dropdown-inner').text()).toBe('foo: ' + scope.states.length);\n  470        });\n  471  \n  ...\n  474          var elm = compileDirective('options-template');\n  475          angular.element(elm[0]).triggerHandler('focus');\n  476:         expect(sandboxEl.find('.dropdown-inner').text()).toBe(scope.states.join(''));\n  477          // Consecutive toggles\n  478          angular.element(elm[0]).triggerHandler('blur');\n  479          angular.element(elm[0]).triggerHandler('focus');\n  480:         expect(sandboxEl.find('.dropdown-inner').text()).toBe(scope.states.join(''));\n  481        });\n  482  \n  ...\n  486          scope.dropdown = {counter: 0};\n  487          angular.element(elm[0]).triggerHandler('focus');\n  488:         expect(angular.element(sandboxEl.find('.dropdown-inner > .btn')[0]).triggerHandler('click'));\n  489          expect(scope.dropdown.counter).toBe(1);\n  490          // Consecutive toggles\n  491          angular.element(elm[0]).triggerHandler('blur');\n  492          angular.element(elm[0]).triggerHandler('focus');\n  493:         expect(angular.element(sandboxEl.find('.dropdown-inner > .btn')[0]).triggerHandler('click'));\n  494          expect(scope.dropdown.counter).toBe(2);\n  495        });\n  ...\n  502          var elm = compileDirective('options-trimValue', {trimValue: 'true'});\n  503          angular.element(elm[0]).triggerHandler('focus');\n  504:         angular.element(sandboxEl.find('.dropdown-menu li:eq(0) a').get(0)).triggerHandler('click');\n  505          expect(elm.val()).toBe(scope.states[0].trim());\n  506        });\n  ...\n  509          var elm = compileDirective('options-trimValue', {trimValue: 'false'});\n  510          angular.element(elm[0]).triggerHandler('focus');\n  511:         angular.element(sandboxEl.find('.dropdown-menu li:eq(0) a').get(0)).triggerHandler('click');\n  512          expect(elm.val()).toBe(scope.states[0]);\n  513        });\n  ...\n  529        angular.element(elm[0]).triggerHandler('focus');\n  530        scope.$digest();\n  531:       expect(sandboxEl.find('.dropdown-menu li').length).toBe($typeahead.defaults.limit);\n  532        expect(scope.$$childHead.$isVisible()).toBeTruthy();\n  533      });\n  ...\n  540        var elm = compileDirective('options-minLength', {});\n  541        angular.element(elm[0]).triggerHandler('focus');\n  542:       expect(sandboxEl.find('.dropdown-menu li').hasClass('active')).not.toBeTruthy();\n  543      });\n  544  \n  ...\n  546        var elm = compileDirective('options-autoSelect', {});\n  547        angular.element(elm[0]).triggerHandler('focus');\n  548:       expect(sandboxEl.find('.dropdown-menu li').hasClass('active')).toBeTruthy();\n  549      });\n  550  \n  ...\n  562  \n  563        angular.element(elm[0]).triggerHandler('focus');\n  564:       angular.element(sandboxEl.find('.dropdown-menu li:eq(1) a').get(0)).triggerHandler('click');\n  565  \n  566        expect(selected).toBe(1);\n  ...\n  576  \n  577        angular.element(elm[0]).triggerHandler('focus');\n  578:       angular.element(sandboxEl.find('.dropdown-menu li:eq(1) a').get(0)).triggerHandler('click');\n  579  \n  580        expect(id).toBe('typeahead1');\n  ...\n  624        angular.element(elm[0]).triggerHandler('focus');\n  625        $animate.flush();\n  626:       angular.element(sandboxEl.find('.dropdown-menu li:eq(1) a')[0]).triggerHandler('click');\n  627        angular.element(elm[0]).triggerHandler('blur');\n  628        $animate.flush();\n\n735 matches across 20 files\n",
			"settings":
			{
				"buffer_size": 143769,
				"line_ending": "Unix",
				"name": "Find Results",
				"scratch": true
			}
		},
		{
			"file": ".eslintrc",
			"settings":
			{
				"buffer_size": 359,
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/typeahead/test/typeahead.spec.js",
			"settings":
			{
				"buffer_size": 31962,
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/tooltip/test/tooltip.spec.js",
			"settings":
			{
				"buffer_size": 51791,
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/dropdown/test/dropdown.spec.js",
			"settings":
			{
				"buffer_size": 17883,
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/select/test/select.spec.js",
			"settings":
			{
				"buffer_size": 32045,
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/popover/test/popover.spec.js",
			"settings":
			{
				"buffer_size": 21934,
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/timepicker/test/timepicker.spec.js",
			"settings":
			{
				"buffer_size": 56495,
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/modal/test/modal.spec.js",
			"settings":
			{
				"buffer_size": 27885,
				"line_ending": "Unix"
			}
		}
	],
	"build_system": "Packages/JSHint/JSHint.sublime-build",
	"build_system_choices":
	[
	],
	"build_varint": "",
	"command_palette":
	{
		"height": 374.0,
		"last_filter": "",
		"selected_items":
		[
			[
				"insta",
				"Package Control: Install Package"
			],
			[
				"git dif",
				"git: diff"
			],
			[
				"remov",
				"Package Control: Remove Package"
			],
			[
				"git",
				"Git: Toggle Annotations"
			],
			[
				"remo",
				"Package Control: Remove Package"
			],
			[
				"install",
				"Package Control: Install Package"
			],
			[
				"up",
				"Package Control: Upgrade/Overwrite All Packages"
			],
			[
				"upgra",
				"Package Control: Upgrade/Overwrite All Packages"
			],
			[
				"previw",
				"Markdown Preview: Preview in Browser"
			],
			[
				"instal",
				"Package Control: Install Package"
			],
			[
				"css",
				"Run CSScomb JS"
			],
			[
				"sort",
				"Sort Lines"
			],
			[
				"prett",
				"HTMLPrettify"
			],
			[
				"rein",
				"Indentation: Reindent Lines"
			],
			[
				"remove",
				"Package Control: Remove Package"
			],
			[
				"blame",
				"Git: Blame"
			],
			[
				"mark",
				"Markdown Preview: Python Markdown: Preview in Browser"
			],
			[
				"previe",
				"Markdown Preview: Github Flavored Markdown: Preview in Browser"
			],
			[
				"mak",
				"Markdown Preview: Python Markdown: Preview in Browser"
			],
			[
				"markdown",
				"Set Syntax: Markdown"
			],
			[
				"hsl",
				"HSL: Convert All RGB to HSL"
			],
			[
				"sor",
				"Sort Lines"
			],
			[
				"pretti",
				"HTMLPrettify"
			],
			[
				"html",
				"HTMLPrettify"
			],
			[
				"sorc",
				"Sort Lines (Case Sensitive)"
			],
			[
				"hsla",
				"HSL: Convert All RGB to HSL"
			],
			[
				"cssco",
				"Sort via CSScomb"
			],
			[
				"h",
				"HTMLPrettify"
			],
			[
				"rett",
				"HTMLPrettify"
			],
			[
				"",
				"BracketHighlighter: Select Tag Name (closing and opening)"
			],
			[
				"pret",
				"HTMLPrettify"
			],
			[
				"htm",
				"HTMLPrettify"
			],
			[
				"task",
				"Tasks: New document"
			],
			[
				"in",
				"Package Control: Install Package"
			],
			[
				"subl",
				"Preferences: SublimeLinter Settings – Default"
			],
			[
				"linte",
				"Preferences: SublimeLinter Settings – User"
			],
			[
				"js",
				"JSHint"
			],
			[
				"rmeove",
				"Package Control: Remove Package"
			],
			[
				"pretty",
				"Pretty JSON: Reformat (Pretty Print) JSON"
			],
			[
				"ins",
				"Package Control: Install Package"
			],
			[
				"package",
				"Package Control: List Packages"
			],
			[
				"json",
				"Set Syntax: JSON"
			],
			[
				"rei",
				"Indentation: Reindent Lines"
			],
			[
				"upda",
				"Package Control: Upgrade/Overwrite All Packages"
			],
			[
				"reformat",
				"Pretty JSON: Reformat (Pretty Print) JSON"
			],
			[
				"re",
				"Indentation: Reindent Lines"
			],
			[
				"diff",
				"FileDiffs: Menu"
			],
			[
				"sub",
				"SublimeCodeIntel: Disable Plugin"
			],
			[
				"subli",
				"SublimeCodeIntel: Reset"
			],
			[
				"PRE",
				"Pretty JSON: Reformat (Pretty Print) JSON"
			],
			[
				"pre",
				"Pretty JSON: Reformat (Pretty Print) JSON"
			],
			[
				"pack",
				"Package Control: Disable Package"
			],
			[
				"git diff",
				"Git: Diff Current File"
			],
			[
				"git di",
				"Git: Diff Current File"
			],
			[
				"doc",
				"Snippet: Start Docblock"
			],
			[
				"Upgra",
				"Package Control: Upgrade/Overwrite All Packages"
			],
			[
				"diff cu",
				"Git: Diff Current File"
			],
			[
				"git log",
				"Git: Log Current File"
			],
			[
				"git lo",
				"Git: Log Current File"
			],
			[
				"git graph",
				"Git: Graph Current File"
			],
			[
				"git cu",
				"Git: Log Current File"
			],
			[
				"upg",
				"Package Control: Upgrade/Overwrite All Packages"
			],
			[
				"docblo",
				"Snippet: Start Docblock"
			],
			[
				"upgr",
				"Package Control: Upgrade/Overwrite All Packages"
			],
			[
				"Package Control: ",
				"Package Control: Remove Package"
			],
			[
				"add",
				"Package Control: Add Repository"
			],
			[
				"list",
				"Package Control: List Packages"
			],
			[
				"repos",
				"Package Control: Add Repository Channel"
			],
			[
				"add rep",
				"Package Control: Add Repository"
			],
			[
				"u",
				"SFTP: Upload File"
			],
			[
				"uplo",
				"SFTP: Upload File"
			],
			[
				"upl",
				"SFTP: Upload File"
			],
			[
				"Git",
				"Git: Annotate"
			],
			[
				"packa",
				"Package Control: Remove Package"
			],
			[
				"di",
				"Git: Diff Current File"
			],
			[
				"Lint",
				"SublimeLinter: Lint Current File"
			],
			[
				"Subli",
				"SublimeLinter: Lint Current File"
			],
			[
				"b",
				"Git: Blame"
			]
		],
		"width": 467.0
	},
	"console":
	{
		"height": 115.0,
		"history":
		[
			"import urllib2,os; pf='Package Control.sublime-package'; ipp=sublime.installed_packages_path(); os.makedirs(ipp) if not os.path.exists(ipp) else None; urllib2.install_opener(urllib2.build_opener(urllib2.ProxyHandler())); open(os.path.join(ipp,pf),'wb').write(urllib2.urlopen('http://sublime.wbond.net/'+pf.replace(' ','%20')).read()); print 'Please restart Sublime Text to finish installation'"
		]
	},
	"distraction_free":
	{
		"menu_visible": true,
		"show_minimap": false,
		"show_open_files": false,
		"show_tabs": false,
		"side_bar_visible": false,
		"status_bar_visible": false
	},
	"expanded_folders":
	[
		"/Users/olivier/Projects/angular-strap",
		"/Users/olivier/Projects/angular-strap/src",
		"/Users/olivier/Projects/angular-strap/src/affix",
		"/Users/olivier/Projects/angular-strap/src/datepicker",
		"/Users/olivier/Projects/angular-strap/src/datepicker/docs",
		"/Users/olivier/Projects/angular-strap/src/datepicker/test",
		"/Users/olivier/Projects/angular-strap/src/dropdown",
		"/Users/olivier/Projects/angular-strap/src/dropdown/test",
		"/Users/olivier/Projects/angular-strap/src/modal",
		"/Users/olivier/Projects/angular-strap/src/modal/test",
		"/Users/olivier/Projects/angular-strap/src/popover",
		"/Users/olivier/Projects/angular-strap/src/popover/test",
		"/Users/olivier/Projects/angular-strap/src/select",
		"/Users/olivier/Projects/angular-strap/src/select/test",
		"/Users/olivier/Projects/angular-strap/src/timepicker",
		"/Users/olivier/Projects/angular-strap/src/timepicker/test",
		"/Users/olivier/Projects/angular-strap/src/tooltip",
		"/Users/olivier/Projects/angular-strap/src/tooltip/test",
		"/Users/olivier/Projects/angular-strap/src/typeahead",
		"/Users/olivier/Projects/angular-strap/src/typeahead/test"
	],
	"file_history":
	[
		"/Users/olivier/Projects/angular-strap/src/tooltip/tooltip.js",
		"/Users/olivier/Projects/angular-strap/src/datepicker/datepicker.js",
		"/Users/olivier/Projects/angular-strap/src/typeahead/typeahead.js",
		"/Users/olivier/Projects/angular-strap/gulpfile.js",
		"/Users/olivier/Projects/angular-strap/src/tooltip/test/tooltip.spec.js",
		"/Users/olivier/Projects/angular-strap/docs/tooltip-viewport.html",
		"/Users/olivier/Projects/angular-strap/src/timepicker/timepicker.js",
		"/Users/olivier/Projects/angular-strap/docs/popover-viewport.html",
		"/Users/olivier/Projects/angular-strap/docs/scripts/app.js",
		"/Users/olivier/Projects/angular-strap/docs/views/sections/getting-started.html",
		"/Users/olivier/Projects/angular-strap/docs/scripts/directives/highlight-block.js",
		"/Users/olivier/Projects/angular-strap/.tmp/tooltip-viewport.html",
		"/Users/olivier/Projects/angular-strap/docs/index.html",
		"/Users/olivier/Projects/angular-strap/docs/styles/main.less",
		"/Users/olivier/Projects/angular-strap/test/~1.2.0/components/angular.js",
		"/Users/olivier/Projects/angular-strap/src/dropdown/dropdown.js",
		"/Users/olivier/Projects/angular-strap/src/dropdown/test/dropdown.spec.js",
		"/Users/olivier/Projects/angular-strap/test/~1.2.0/karma.conf.js",
		"/Users/olivier/Projects/angular-strap/src/modal/modal.js",
		"/Users/olivier/Projects/angular-strap/test/helpers.js",
		"/Users/olivier/Projects/angular-strap/test/~1.2.0/components/angular-sanitize.js",
		"/Users/olivier/Projects/angular-strap/test/~1.2.0/components/angular-mocks.js",
		"/Users/olivier/Projects/angular-strap/test/~1.2.0/components/angular-animate.js",
		"/Users/olivier/Projects/angular-strap/test/~1.4.0/karma.conf.js",
		"/Users/olivier/Projects/angular-strap/test/~1.4.0/components/angular-animate.js",
		"/Users/olivier/Projects/angular-strap/test/~1.4.0/components/angular-mocks.js",
		"/Users/olivier/Projects/angular-strap/test/~1.4.0/components/angular-sanitize.js",
		"/Users/olivier/Projects/angular-strap/test/~1.4.0/components/angular.js",
		"/Users/olivier/Projects/angular-strap/dist/angular-strap.js",
		"/Users/olivier/Projects/angular-strap/README.md",
		"/Users/olivier/Projects/angular-strap/test/karma.conf.js",
		"/Users/olivier/Projects/angular-strap/.tmp/modules/tooltip.tpl.min.js",
		"/Users/olivier/Projects/angular-strap/package.json",
		"/Users/olivier/Projects/angular-strap/pages/index.html",
		"/Users/olivier/Projects/angular-strap/src/tooltip/docs/tooltip.demo.html",
		"/Users/olivier/Projects/angular-strap/.tmp/modules/alert.tpl.min.js",
		"/Users/olivier/Projects/angular-strap/.tmp/angular-strap.tpl.min.js",
		"/Users/olivier/Projects/angular-strap/pages/styles/docs.css",
		"/Users/olivier/Projects/angular-strap/pages/dist/angular-strap.tpl.min.js",
		"/Users/olivier/Projects/angular-strap/.tmp/index.html",
		"/Users/olivier/Projects/angular-strap/dist/modules/tooltip.js",
		"/Users/olivier/Projects/angular-strap/src/select/select.js",
		"/Users/olivier/Projects/angular-strap/src/datepicker/test/datepicker.spec.js",
		"/Users/olivier/Projects/angular-strap/docs/bower.json",
		"/Users/olivier/Projects/angular-strap/.tmp/karma.conf.js",
		"/Users/olivier/Projects/ng-tools/ng-factory/test/karma.conf.js",
		"/Users/olivier/Projects/ng-tools/ng-factory/lib/tasks/index.js",
		"/Users/olivier/Projects/ng-tools/ng-factory/lib/tasks/test/karma.js",
		"/Users/olivier/Projects/angular-strap/test/gulp.js",
		"/Users/olivier/Projects/angular-strap/src/helpers/parse-options.js",
		"/Users/olivier/Projects/angular-strap/src/typeahead/test/typeahead.spec.js",
		"/Users/olivier/Projects/ng-tools/ng-factory/lib/tasks/docs/views.js",
		"/Users/olivier/Projects/ng-tools/gulp-ng-channels/lib/channels/index/dist.js",
		"/Users/olivier/Projects/ng-tools/gulp-ng-channels/lib/channels/index/cdn.js",
		"/Users/olivier/Projects/ng-tools/gulp-ng-channels/lib/channels/index/libs.js",
		"/Users/olivier/Projects/ng-tools/gulp-ng-channels/lib/channels/styles/dist.js",
		"/Users/olivier/Projects/ng-tools/gulp-ng-channels/lib/channels/scripts/dist.js",
		"/Users/olivier/Projects/ng-tools/gulp-ng-channels/package.json",
		"/Users/olivier/Projects/ng-tools/gulp-ng-channels/lib/channels/views/dist.js",
		"/Users/olivier/Projects/ng-tools/ng-factory/lib/config/index.js",
		"/Users/olivier/Projects/angular-strap/pages/docs.min.js",
		"/Users/olivier/Projects/angular-strap/pages/dist/angular-strap.js",
		"/Users/olivier/Projects/ng-tools/ng-factory/lib/config/defaults/library.js",
		"/Users/olivier/Projects/angular-strap/docs/views/partials/aside.tpl.html",
		"/Users/olivier/Projects/ng-tools/ng-factory/lib/tasks/docs/copy.js",
		"/Users/olivier/Projects/angular-strap/ngfactory.json",
		"/Users/olivier/Projects/ng-tools/gulp-ng-channels/lib/channels/index/src.js",
		"/Users/olivier/Projects/angular-strap/pages/docs.tpl.js",
		"/Users/olivier/Projects/angular-strap/pages/fontawesome-webfont.woff2",
		"/Users/olivier/Projects/ng-tools/ng-factory/lib/config/defaults/docs.js",
		"/Users/olivier/Projects/angular-strap/pages/angular-strap.tpl.js",
		"/Users/olivier/Projects/ng-tools/gulp-ng-channels/node_modules/gulp-nginclude/src/index.js",
		"/Users/olivier/Projects/angular-strap/src/modal/docs/modal.demo.html",
		"/Users/olivier/Projects/angular-strap/src/aside/docs/aside.demo.html",
		"/Users/olivier/Projects/angular-strap/src/popover/docs/popover.demo.html",
		"/Users/olivier/Projects/angular-strap/src/alert/docs/alert.demo.html",
		"/Users/olivier/Projects/ng-tools/ng-factory/lib/tasks/src/views.js",
		"/Users/olivier/Projects/angular-strap/pages/docs.js",
		"/Users/olivier/Projects/ng-tools/ng-factory/lib/tasks/docs/scripts.js",
		"/Users/olivier/Projects/angular-strap/pages/docs",
		"/Users/olivier/Projects/angular-strap/src/navbar/navbar.js",
		"/Users/olivier/Projects/bootstrap-additions/docs/index.html",
		"/Users/olivier/Projects/angular-strap/docs/scripts/services/indent.js",
		"/Users/olivier/Projects/angular-strap/docs/scripts/directives/code.js",
		"/Users/olivier/Projects/angular-strap/docs/scripts/angular-plunkr.js",
		"/Users/olivier/Projects/angular-strap/docs/scripts/controllers/main.js",
		"/Users/olivier/Projects/angular-strap/docs/scripts/directives/append-source.js",
		"/Users/olivier/Projects/angular-strap/docs/styles/docs/sidebar.less",
		"/Users/olivier/Projects/angular-strap/pages/angular-strap.tpl.min.js",
		"/Users/olivier/Projects/angular-strap/docs/styles/docs.less",
		"/Users/olivier/Projects/angular-strap/docs/scripts/angular-strap.tpl.js",
		"/Users/olivier/Projects/angular-strap/docs/scripts/script.min.js",
		"/Users/olivier/Projects/angular-strap/.dev/dev.html",
		"/Users/olivier/Projects/angular-strap/src/modal/modal.tpl.html",
		"/Users/olivier/Projects/angular-strap/src/tooltip/tooltip.tpl.html",
		"/Users/olivier/Projects/angular-motion/ngfactory.json",
		"/Users/olivier/Projects/angular-motion/dist/angular-motion.css",
		"/Users/olivier/Projects/angular-motion/gulpfile.js",
		"/Users/olivier/Projects/angular-strap/gulpfile.new.js",
		"/Users/olivier/Projects/angular-motion/dist/angular-motion.min.css.map",
		"/Users/olivier/Projects/angular-strap/src/typeahead/docs/typeahead.demo.html",
		"/Users/olivier/Projects/angular-strap/.travis.yml",
		"/Users/olivier/Projects/angular-strap/bower.json",
		"/Users/olivier/Projects/angular-strap/src/tab/test/tab.spec.js",
		"/Users/olivier/Projects/angular-strap/src/modal/test/modal.spec.js",
		"/Users/olivier/Projects/angular-strap/dist/modules/timepicker.js",
		"/Users/olivier/Projects/angular-strap/node_modules/gulp-connect/node_modules/connect/node_modules/multiparty/test/standalone/test-invalid.js",
		"/Users/olivier/Projects/angular-strap/src/scrollspy/scrollspy.js",
		"/Users/olivier/Projects/angular-strap/src/affix/affix.js",
		"/Users/olivier/Projects/angular-strap/src/tab/tab.js",
		"/Users/olivier/Projects/angular-strap/src/button/button.js",
		"/Users/olivier/Projects/angular-strap/src/dropdown/docs/dropdown.demo.js",
		"/Users/olivier/Projects/angular-strap/docs/styles/docs/examples.less",
		"/Users/olivier/Projects/angular-strap/src/dropdown/docs/dropdown.demo.html",
		"/Users/olivier/Dropbox/Developer/angular/angular-stepper/bower.json",
		"/Users/olivier/Dropbox/Developer/angular/angular-stepper/package.json",
		"/Users/olivier/Dropbox/Projects/ng-factory/lib/templates/docs/modules/ng-factory/services/hljs.js",
		"/Users/olivier/Dropbox/Projects/ng-factory/lib/templates/docs/modules/ng-factory/services/indent.js",
		"/Users/olivier/Dropbox/Projects/ng-factory/lib/templates/docs/scripts/directives/append-source.tpl.js",
		"/Users/olivier/Dropbox/Projects/angular-strap/src/popover/docs/popover.tpl.content.demo.html",
		"/Users/olivier/Dropbox/Projects/angular-strap/src/popover/docs/popover.tpl.demo.html",
		"/Users/olivier/Dropbox/Projects/angular-strap/src/popover/docs/popover.demo.html",
		"/Users/olivier/Dropbox/Projects/angular-strap/src/tooltip/tooltip.js",
		"/Users/olivier/Dropbox/Projects/angular-strap/bower_components/angular-animate/angular-animate.js",
		"/Users/olivier/Dropbox/Projects/angular-strap/src/typeahead/typeahead.tpl.html",
		"/Users/olivier/Dropbox/Library/Application Support/Sublime Text 3/Packages/User/Preferences.sublime-settings",
		"/Users/olivier/Dropbox/Projects/angular-strap/src/helpers/parse-options.js",
		"/Users/olivier/Dropbox/Projects/angular-strap/src/timepicker/timepicker.js"
	],
	"find":
	{
		"height": 35.0
	},
	"find_in_files":
	{
		"height": 93.0,
		"where_history":
		[
			"/Users/olivier/Projects/angular-strap/src",
			"/Users/olivier/Projects/angular-strap/bower_components",
			"/Users/olivier/Projects/angular-strap/src",
			"/Users/olivier/Projects/angular-strap/docs/views",
			"/Users/olivier/DropboxBackup/Projects/angular-strap",
			"/Users/olivier/DropboxBackup/Projects/angular-strap/src",
			"/Users/olivier/Dropbox/Projects/angular-strap",
			"/Users/olivier/Dropbox/Projects/angular-strap/src",
			"/Users/olivier/Dropbox/Projects/angular-strap",
			"/Users/olivier/Dropbox/Projects/angular-strap/src",
			"/Users/olivier/Dropbox/Projects/angular-strap/bower_components/angular",
			"/Users/olivier/Dropbox/Projects/angular-strap/src",
			"/Users/olivier/Dropbox/Projects/angular-strap/bower_components/bootstrap/less",
			"/Users/olivier/Dropbox/Projects/angular-strap/bower_components/angular",
			"/Users/olivier/Dropbox/Projects/angular-strap/src",
			"/Users/olivier/Dropbox/Projects/angular-strap/bower_components",
			"/Users/olivier/Dropbox/Projects/angular-strap/src",
			"/Users/olivier/Dropbox/Projects/angular-strap-bs3/src",
			"/Users/olivier/Dropbox/Projects/angular-strap-bs3/bower_components",
			"/Users/olivier/Dropbox/Projects/angular-strap/src/directives",
			"/Users/olivier/Dropbox/Developer/angular/angular-strap/src/directives",
			"/Users/olivier/Dropbox/Developer/angular/angular-strap/src",
			"/Users/olivier/Downloads/openssl-1.0.1c",
			"/opt/local/include/openssl",
			"/Users/olivier/Downloads/openssl-1.0.1c",
			"/Users/olivier/Dropbox/Sites/node-mdm",
			"/Users/olivier/Downloads/openssl-1.0.1c",
			"/Users/olivier/Downloads/openssl-1.0.1c/crypto/cms",
			"/Users/olivier/Downloads/openssl-1.0.1c/demos/cms",
			"/Users/olivier/Downloads/openssl-1.0.1c/crypto/cms",
			"/opt/local/include/node",
			"/Users/olivier/Dropbox/Sites/node-mdm/node_modules",
			"/Users/olivier/Dropbox/Sites/beelink/mobile/sencha/Beelink/app",
			"/Users/olivier/Dropbox/Sites/beelink/mobile/sencha/Beelink",
			"/Users/olivier/Dropbox/Sites/beelink/mobile/sencha/Beelink/app",
			"/Users/olivier/Dropbox/Sites/beelink/libraries/lithium",
			"/Users/olivier/Dropbox/Sites/beelink/mobile/sencha/Beelink",
			"/Users/olivier/Dropbox/Sites/beelink/mobile/sencha/Beelink/app",
			"/Users/olivier/Dropbox/Sites/beelink/mobile/sencha/Beelink",
			"/Users/olivier/Dropbox/Sites/beelink/mobile/sencha/Beelink/app",
			"/Users/olivier/Dropbox/Sites/beelink/mobile/sencha/Beelink",
			"/Users/olivier/Dropbox/Sites/beelink/mobile/sencha/Beelink/app",
			"/Users/olivier/Dropbox/Sites/beelink/mobile/sencha/Beelink/app/ux",
			"/Users/olivier/Dropbox/Sites/beelink/mobile/sencha/Beelink/app",
			"/Users/olivier/Dropbox/Sites/beelink/mobile/sencha/Beelink",
			"/Users/olivier/Dropbox/Sites/beelink/mobile/sencha/Beelink/app",
			"/Users/olivier/Dropbox/Sites/beelink/mobile/sencha/Beelink/extensions",
			"/Users/olivier/Dropbox/Sites/beelink/mobile/sencha/Beelink/app",
			"/Users/olivier/Dropbox/Sites/beelink/mobile/sencha/Beelink/extensions",
			"/Users/olivier/Dropbox/Sites/beelink/beelink",
			"/Users/olivier/Dropbox/Sites/beelink/mobile/cordova/android/Beelink/assets/www",
			"/Users/olivier/Dropbox/Sites/beelink/mobile/sencha/Beelink",
			"/Users/olivier/Dropbox/Sites/beelink/mobile/sencha/Beelink/app",
			"/Users/olivier/Dropbox/Sites/beelink/mobile/sencha/Beelink/extensions",
			"/Users/olivier/Dropbox/Sites/beelink/mobile/sencha/Beelink/app/view",
			"/Users/olivier/Dropbox/Sites/beelink/mobile/sencha/Beelink/app",
			"/Users/olivier/Dropbox/Developer/lithium/assetic/src/Assetic",
			"/Users/olivier/Dropbox/Sites/beelink/mobile/sencha/Beelink",
			"/Users/olivier/Dropbox/Sites/beelink/mobile/sencha/Beelink/app",
			"/Users/olivier/Dropbox/Sites/beelink/mobile/sencha/Beelink",
			"/Users/olivier/Dropbox/Sites/beelink/mobile/sencha/Beelink/app",
			"/Users/olivier/Dropbox/Sites/beelink/beelink",
			"/Users/olivier/Dropbox/Sites/beelink/beelink/libraries/assetic",
			"/Users/olivier/Dropbox/Sites/beelink/beelink",
			"/Users/olivier/Dropbox/Sites/beelink/beelink/webroot/js",
			"/Users/olivier/Dropbox/Sites/beelink/beelink/webroot/js/mobile",
			"/Users/olivier/Dropbox/Sites/beelink/beelink",
			"/Users/olivier/Dropbox/Sites/beelink/beelink/controllers",
			"/Users/olivier/Dropbox/Sites/beelink/beelink/webroot/js",
			"/Users/olivier/Dropbox/Sites/beelink/beelink/webroot/js/mobile",
			"/Users/olivier/Dropbox/Sites/beelink/beelink/webroot/js/mobile/store",
			"/Users/olivier/Dropbox/Sites/beelink/beelink/webroot/js/mobile",
			"/Users/olivier/Dropbox/Sites/beelink/beelink/webroot/js",
			"/Users/olivier/Dropbox/Sites/beelink/beelink/controllers",
			"/Users/olivier/Dropbox/Sites/beelink/beelink/webroot/js/mobile",
			"/Users/olivier/Dropbox/Sites/beelink/beelink/controllers",
			"/Users/olivier/Dropbox/Sites/beelink/beelink/webroot/js",
			"/Users/olivier/Dropbox/Sites/beelink/beelink",
			"/Users/olivier/Dropbox/Sites/beelink/beelink/webroot/js/mobile/view",
			"/Users/olivier/Dropbox/Sites/beelink/beelink/webroot/js",
			"/Users/olivier/Dropbox/Sites/beelink/beelink/webroot/css/mobile",
			"/Users/olivier/Dropbox/Sites/beelink/beelink",
			"/Users/olivier/Dropbox/Sites/beelink/beelink/webroot/js/mobile",
			"/Users/olivier/Dropbox/Sites/beelink/beelink/webroot",
			"/Users/olivier/Dropbox/Sites/beelink/beelink/webroot/js/mobile",
			"/Users/olivier/Dropbox/Sites/beelink/beelink/webroot/js/mobile/view",
			"/Users/olivier/Dropbox/Sites/beelink/beelink/webroot/js",
			"/Users/olivier/Dropbox/Sites/beelink/beelink/webroot/js/mobile",
			"/Users/olivier/Dropbox/Sites/beelink/libraries/Cake",
			"/Users/olivier/Dropbox/Sites/beelink/beelink",
			"/Users/olivier/Dropbox/Sites/beelink/beelink/config",
			"/Users/olivier/Dropbox/Sites/beelink/beelink/controllers",
			"/Users/olivier/Dropbox/Sites/beelink/beelink/webroot/js/mobile",
			"/Users/olivier/Dropbox/Sites/wimi-mobile/wimi/webroot/js/mobile",
			"/Users/olivier/Dropbox/Sites/wimi-mobile/wimi/webroot/js",
			"/Users/olivier/Dropbox/Sites/wimi-mobile/wimi/webroot/css/mobile",
			"/Users/olivier/Dropbox/Sites/wimi-mobile/libraries/lithium/template",
			"/Users/olivier/Dropbox/Sites/wimi-mobile/libraries/lithium",
			"/Users/olivier/Dropbox/Sites/wimi-mobile/libraries/lithium/template"
		]
	},
	"find_state":
	{
		"case_sensitive": false,
		"find_history":
		[
			"find",
			"findElement",
			"trigger",
			"animate",
			"$animate.flush();",
			"tooltip",
			"$animate.flush();",
			"$animate.flush",
			"$animate.flush();",
			"$animate.flush();\n      expect",
			"$animate.flush",
			"tooltip",
			"datepicker show / hide events should dispatch hide and hide.before events FAILED",
			"2.1.2",
			"applyPlacement",
			"viewportPosition",
			"$viewport",
			"viewport",
			"$applyPlacement",
			"applyPlacement",
			"getViewportAdjustedDelta",
			"getCalculatedOffset",
			"applyPlacement",
			"getViewportAdjustedDelta",
			"$viewport",
			"cursor:",
			"1.3",
			"1.3 ",
			"$tooltip.$element",
			"$dropdown.$element",
			"tipElement",
			"template",
			"2",
			"1.2.0",
			"$emit",
			"angular.module",
			"'ng:test/clean', ",
			"docs",
			"serve",
			"ngOptionsDire",
			"ngOptions",
			"ng-options",
			"ng-select",
			"1.3.13",
			"countScopes",
			"countScopes\ncountScopes",
			"countScopes",
			"defer",
			"Promise",
			"q",
			"templates:test",
			"clean:test",
			"fileName",
			"options",
			"assetsDirs",
			"src",
			"dist",
			"docs",
			"src",
			"\"",
			".tpl.demo.html",
			"build",
			"$location",
			"Keyboard",
			"keyboard",
			"Keyboard",
			"keyboard",
			"liElement",
			"liElements",
			"['backdrop']",
			"backdrop",
			"\"\"",
			"['backdrop']",
			"backdropElement",
			"6",
			"modalLinker",
			"fetchTemplate",
			"scope.$is",
			"$isShown",
			"html",
			"scope.title",
			"template",
			"\"",
			"html",
			"'<div class=\"tooltip\"><div class=\"tooltip-inner\">foo: {{title}}</div></div>'",
			"$sce",
			"template",
			"tooltip",
			"templates",
			"countScopes",
			"\"",
			"$affix",
			"$affix.",
			"'",
			"$affix",
			"fetchTemplate",
			"httpBackend",
			"templateCache",
			"$compile",
			"options-template",
			"$tab",
			"bsTabsCtrl",
			"alert",
			"$$rAF",
			"minL",
			"show",
			"Bottom",
			"options.delay",
			"isNumeric",
			", { panel: { active: 1 } }",
			"prefixEvent",
			"$animate.leave",
			"21",
			"}}",
			" gaze: ",
			"{glob: ",
			"tab",
			"18",
			"step",
			"parsedTime",
			"20",
			"1.3.0-beta.13",
			"bsTabs",
			"tab",
			"active",
			"in",
			"bower",
			"2.0.0/"
		],
		"highlight": true,
		"in_selection": false,
		"preserve_case": false,
		"regex": false,
		"replace_history":
		[
			".demo.tpl.html",
			"if(angular.isString(newValue)) newValue = !!newValue.match",
			"$$rAF.flush();",
			"$$rAF",
			" ",
			"am-flip-x",
			"am-fade",
			"",
			"module to be loaded",
			"helpers.dimensions",
			"github.com/mgcrea/angular-strap/blob/master/src/helpers/dimensions.js",
			"ngStrap.helpers",
			"clog.info",
			" ",
			"=\"",
			"AppiraterPlugin",
			"Appirater",
			"(CDVInvokedUrlCommand *)command;",
			"command",
			"",
			"CDVInvokedUrlCommand *",
			"PushNotification",
			"-emailcomposer",
			"EmailComposer",
			"cordova-authorization-status",
			"AuthorizationStatus",
			"ActionSheet",
			"Ext.form.Panel",
			"Beelink.ux",
			"Ext.define('Beelink.ux",
			"'Beelink",
			"Ext.define('Beelink",
			"Ext.define('Ext.ux",
			"Ext.define('Mg.ux",
			"Mg.ux",
			"'Beelink",
			"Ext.define('Beelink",
			"Assetic\\Util\\Process",
			"Assetic\\Util\\ProcessBuilder",
			"\"",
			"@import \"./../",
			"@import \"libs/bootstrap/",
			"@import \"libs/bootstrap",
			"$this->_renderJson",
			"$authUser->email",
			"$linkedUser->email",
			"App.getStore('RestoreContact')",
			"App.getStore('Contact')",
			"App.getModel('Contact')",
			"App.getModel('Email')",
			"App.getModel('PhoneNumber')",
			"App.getViewport().mask();",
			"App.getViewport().unmask();",
			"getStore('Network')",
			"this.getStore('Network')",
			"getStore('Network')",
			"Ext.getStore",
			"App.getStore('SyncContact')",
			"App.getStore('RestoreContact')",
			"App.getStore('Backup')",
			"App.getStore('Network')",
			"App.getStore('Contact')",
			"App.getStore('Network')",
			"App.getStore('Backup')",
			" ",
			"var self = this, displayName;"
		],
		"reverse": false,
		"show_context": true,
		"use_buffer2": true,
		"whole_word": false,
		"wrap": true
	},
	"groups":
	[
		{
			"selected": 2,
			"sheets":
			[
				{
					"buffer": 0,
					"file": "src/datepicker/test/datepicker.spec.js",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 67040,
						"regions":
						{
						},
						"selection":
						[
							[
								2824,
								2831
							]
						],
						"settings":
						{
							"incomplete_sync": null,
							"remote_loading": false,
							"synced": false,
							"syntax": "Packages/JavaScriptNext - ES6 Syntax/JavaScriptNext.tmLanguage",
							"tab_size": 2,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 653.0,
						"zoom_level": 1.0
					},
					"stack_index": 2,
					"type": "text"
				},
				{
					"buffer": 1,
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 143769,
						"regions":
						{
							"match":
							{
								"flags": 112,
								"regions":
								[
									[
										273,
										277
									],
									[
										561,
										565
									],
									[
										801,
										805
									],
									[
										1059,
										1063
									],
									[
										1354,
										1358
									],
									[
										1654,
										1658
									],
									[
										1741,
										1745
									],
									[
										1976,
										1980
									],
									[
										2063,
										2067
									],
									[
										2304,
										2308
									],
									[
										2379,
										2383
									],
									[
										2475,
										2479
									],
									[
										2723,
										2727
									],
									[
										2795,
										2799
									],
									[
										3094,
										3098
									],
									[
										3185,
										3189
									],
									[
										3446,
										3450
									],
									[
										3533,
										3537
									],
									[
										3791,
										3795
									],
									[
										3882,
										3886
									],
									[
										4131,
										4135
									],
									[
										4385,
										4389
									],
									[
										4631,
										4635
									],
									[
										4885,
										4889
									],
									[
										5209,
										5213
									],
									[
										5535,
										5539
									],
									[
										5665,
										5669
									],
									[
										5874,
										5878
									],
									[
										6128,
										6132
									],
									[
										6258,
										6262
									],
									[
										6467,
										6471
									],
									[
										6766,
										6770
									],
									[
										6979,
										6983
									],
									[
										7233,
										7237
									],
									[
										7488,
										7492
									],
									[
										7764,
										7768
									],
									[
										7848,
										7852
									],
									[
										8081,
										8085
									],
									[
										8165,
										8169
									],
									[
										8404,
										8408
									],
									[
										8479,
										8483
									],
									[
										8572,
										8576
									],
									[
										8878,
										8882
									],
									[
										8966,
										8970
									],
									[
										9225,
										9229
									],
									[
										9309,
										9313
									],
									[
										9565,
										9569
									],
									[
										9653,
										9657
									],
									[
										9900,
										9904
									],
									[
										10154,
										10158
									],
									[
										10400,
										10404
									],
									[
										10654,
										10658
									],
									[
										10978,
										10982
									],
									[
										11288,
										11292
									],
									[
										11527,
										11531
									],
									[
										11763,
										11767
									],
									[
										11897,
										11901
									],
									[
										12155,
										12159
									],
									[
										12289,
										12293
									],
									[
										12551,
										12555
									],
									[
										12685,
										12689
									],
									[
										12950,
										12954
									],
									[
										13080,
										13084
									],
									[
										13289,
										13293
									],
									[
										13543,
										13547
									],
									[
										13673,
										13677
									],
									[
										13882,
										13886
									],
									[
										14181,
										14185
									],
									[
										14529,
										14533
									],
									[
										14853,
										14857
									],
									[
										15241,
										15245
									],
									[
										15612,
										15616
									],
									[
										15911,
										15915
									],
									[
										16266,
										16270
									],
									[
										16601,
										16605
									],
									[
										16689,
										16693
									],
									[
										16779,
										16783
									],
									[
										16873,
										16877
									],
									[
										16961,
										16965
									],
									[
										17051,
										17055
									],
									[
										17304,
										17308
									],
									[
										17392,
										17396
									],
									[
										17482,
										17486
									],
									[
										17576,
										17580
									],
									[
										17664,
										17668
									],
									[
										17754,
										17758
									],
									[
										18009,
										18013
									],
									[
										18097,
										18101
									],
									[
										18187,
										18191
									],
									[
										18281,
										18285
									],
									[
										18436,
										18440
									],
									[
										18740,
										18744
									],
									[
										18929,
										18933
									],
									[
										19182,
										19186
									],
									[
										19472,
										19476
									],
									[
										19725,
										19729
									],
									[
										19986,
										19990
									],
									[
										20082,
										20086
									],
									[
										20176,
										20180
									],
									[
										20268,
										20272
									],
									[
										20368,
										20372
									],
									[
										20657,
										20661
									],
									[
										20733,
										20737
									],
									[
										21079,
										21083
									],
									[
										21155,
										21159
									],
									[
										21489,
										21493
									],
									[
										21572,
										21576
									],
									[
										21664,
										21668
									],
									[
										21754,
										21758
									],
									[
										21846,
										21850
									],
									[
										22124,
										22128
									],
									[
										22208,
										22212
									],
									[
										22300,
										22304
									],
									[
										22389,
										22393
									],
									[
										22481,
										22485
									],
									[
										22774,
										22778
									],
									[
										22873,
										22877
									],
									[
										22964,
										22968
									],
									[
										23058,
										23062
									],
									[
										23157,
										23161
									],
									[
										23249,
										23253
									],
									[
										23343,
										23347
									],
									[
										23442,
										23446
									],
									[
										23732,
										23736
									],
									[
										23831,
										23835
									],
									[
										23922,
										23926
									],
									[
										24016,
										24020
									],
									[
										24114,
										24118
									],
									[
										24409,
										24413
									],
									[
										24507,
										24511
									],
									[
										24606,
										24610
									],
									[
										24869,
										24873
									],
									[
										24967,
										24971
									],
									[
										25066,
										25070
									],
									[
										25243,
										25247
									],
									[
										25342,
										25346
									],
									[
										25440,
										25444
									],
									[
										25727,
										25731
									],
									[
										26097,
										26101
									],
									[
										26195,
										26199
									],
									[
										26291,
										26295
									],
									[
										26385,
										26389
									],
									[
										26483,
										26487
									],
									[
										26586,
										26590
									],
									[
										26684,
										26688
									],
									[
										27003,
										27007
									],
									[
										27086,
										27090
									],
									[
										27174,
										27178
									],
									[
										27347,
										27351
									],
									[
										27719,
										27723
									],
									[
										28110,
										28114
									],
									[
										28400,
										28404
									],
									[
										28568,
										28572
									],
									[
										28674,
										28678
									],
									[
										29068,
										29072
									],
									[
										29171,
										29175
									],
									[
										29527,
										29531
									],
									[
										29630,
										29634
									],
									[
										29936,
										29940
									],
									[
										30241,
										30245
									],
									[
										30344,
										30348
									],
									[
										30429,
										30433
									],
									[
										30516,
										30520
									],
									[
										30789,
										30793
									],
									[
										30892,
										30896
									],
									[
										31163,
										31167
									],
									[
										31273,
										31277
									],
									[
										31578,
										31582
									],
									[
										31690,
										31694
									],
									[
										31793,
										31797
									],
									[
										31878,
										31882
									],
									[
										31968,
										31972
									],
									[
										32241,
										32245
									],
									[
										32353,
										32357
									],
									[
										32456,
										32460
									],
									[
										32706,
										32710
									],
									[
										32789,
										32793
									],
									[
										33073,
										33077
									],
									[
										33156,
										33160
									],
									[
										33462,
										33466
									],
									[
										33588,
										33592
									],
									[
										33845,
										33849
									],
									[
										33931,
										33935
									],
									[
										34014,
										34018
									],
									[
										34266,
										34270
									],
									[
										34501,
										34505
									],
									[
										34952,
										34956
									],
									[
										35230,
										35234
									],
									[
										35511,
										35515
									],
									[
										35827,
										35831
									],
									[
										36211,
										36215
									],
									[
										36566,
										36570
									],
									[
										36845,
										36849
									],
									[
										37087,
										37091
									],
									[
										37321,
										37325
									],
									[
										37650,
										37654
									],
									[
										37947,
										37951
									],
									[
										38254,
										38258
									],
									[
										38558,
										38562
									],
									[
										38859,
										38863
									],
									[
										39161,
										39165
									],
									[
										39466,
										39470
									],
									[
										39789,
										39793
									],
									[
										40112,
										40116
									],
									[
										40462,
										40466
									],
									[
										40806,
										40810
									],
									[
										40918,
										40922
									],
									[
										41104,
										41108
									],
									[
										41216,
										41220
									],
									[
										41470,
										41474
									],
									[
										41574,
										41578
									],
									[
										41699,
										41703
									],
									[
										42001,
										42005
									],
									[
										42113,
										42117
									],
									[
										42386,
										42390
									],
									[
										42498,
										42502
									],
									[
										42766,
										42770
									],
									[
										42878,
										42882
									],
									[
										43056,
										43060
									],
									[
										43167,
										43171
									],
									[
										43435,
										43439
									],
									[
										43546,
										43550
									],
									[
										43766,
										43770
									],
									[
										43877,
										43881
									],
									[
										44132,
										44136
									],
									[
										44236,
										44240
									],
									[
										44361,
										44365
									],
									[
										44663,
										44667
									],
									[
										44774,
										44778
									],
									[
										45048,
										45052
									],
									[
										45159,
										45163
									],
									[
										45428,
										45432
									],
									[
										45539,
										45543
									],
									[
										45718,
										45722
									],
									[
										45829,
										45833
									],
									[
										46099,
										46103
									],
									[
										46199,
										46203
									],
									[
										46456,
										46460
									],
									[
										46556,
										46560
									],
									[
										46809,
										46813
									],
									[
										47143,
										47147
									],
									[
										47455,
										47459
									],
									[
										47704,
										47708
									],
									[
										47951,
										47955
									],
									[
										48321,
										48325
									],
									[
										48685,
										48689
									],
									[
										48796,
										48800
									],
									[
										48907,
										48911
									],
									[
										49018,
										49022
									],
									[
										49129,
										49133
									],
									[
										49240,
										49244
									],
									[
										49351,
										49355
									],
									[
										49634,
										49638
									],
									[
										49746,
										49750
									],
									[
										49857,
										49861
									],
									[
										49969,
										49973
									],
									[
										50080,
										50084
									],
									[
										50192,
										50196
									],
									[
										50303,
										50307
									],
									[
										50597,
										50601
									],
									[
										50706,
										50710
									],
									[
										50815,
										50819
									],
									[
										50924,
										50928
									],
									[
										51033,
										51037
									],
									[
										51142,
										51146
									],
									[
										51251,
										51255
									],
									[
										51542,
										51546
									],
									[
										51651,
										51655
									],
									[
										51760,
										51764
									],
									[
										51870,
										51874
									],
									[
										51980,
										51984
									],
									[
										52090,
										52094
									],
									[
										52200,
										52204
									],
									[
										52491,
										52495
									],
									[
										52600,
										52604
									],
									[
										52710,
										52714
									],
									[
										52820,
										52824
									],
									[
										52929,
										52933
									],
									[
										53039,
										53043
									],
									[
										53148,
										53152
									],
									[
										53439,
										53443
									],
									[
										53548,
										53552
									],
									[
										53658,
										53662
									],
									[
										53768,
										53772
									],
									[
										53877,
										53881
									],
									[
										53987,
										53991
									],
									[
										54096,
										54100
									],
									[
										54394,
										54398
									],
									[
										54504,
										54508
									],
									[
										54613,
										54617
									],
									[
										54722,
										54726
									],
									[
										54832,
										54836
									],
									[
										54942,
										54946
									],
									[
										55051,
										55055
									],
									[
										55354,
										55358
									],
									[
										55503,
										55507
									],
									[
										55612,
										55616
									],
									[
										55722,
										55726
									],
									[
										55831,
										55835
									],
									[
										55940,
										55944
									],
									[
										56049,
										56053
									],
									[
										56370,
										56374
									],
									[
										56463,
										56467
									],
									[
										56562,
										56566
									],
									[
										56667,
										56671
									],
									[
										56763,
										56767
									],
									[
										56862,
										56866
									],
									[
										56967,
										56971
									],
									[
										57076,
										57080
									],
									[
										57172,
										57176
									],
									[
										57262,
										57266
									],
									[
										57523,
										57527
									],
									[
										57607,
										57611
									],
									[
										57700,
										57704
									],
									[
										57979,
										57983
									],
									[
										58045,
										58049
									],
									[
										58128,
										58132
									],
									[
										58194,
										58198
									],
									[
										58448,
										58452
									],
									[
										58543,
										58547
									],
									[
										58815,
										58819
									],
									[
										58910,
										58914
									],
									[
										59173,
										59177
									],
									[
										59434,
										59438
									],
									[
										59679,
										59683
									],
									[
										59932,
										59936
									],
									[
										60262,
										60266
									],
									[
										60600,
										60604
									],
									[
										60915,
										60919
									],
									[
										61291,
										61295
									],
									[
										61605,
										61609
									],
									[
										61919,
										61923
									],
									[
										62233,
										62237
									],
									[
										62531,
										62535
									],
									[
										62751,
										62755
									],
									[
										63095,
										63099
									],
									[
										63179,
										63183
									],
									[
										63412,
										63416
									],
									[
										63496,
										63500
									],
									[
										63735,
										63739
									],
									[
										63810,
										63814
									],
									[
										63903,
										63907
									],
									[
										64189,
										64193
									],
									[
										64319,
										64323
									],
									[
										64528,
										64532
									],
									[
										64782,
										64786
									],
									[
										64912,
										64916
									],
									[
										65121,
										65125
									],
									[
										65345,
										65349
									],
									[
										65419,
										65423
									],
									[
										65711,
										65715
									],
									[
										65799,
										65803
									],
									[
										66056,
										66060
									],
									[
										66140,
										66144
									],
									[
										66395,
										66399
									],
									[
										66479,
										66483
									],
									[
										66733,
										66737
									],
									[
										66821,
										66825
									],
									[
										67081,
										67085
									],
									[
										67169,
										67173
									],
									[
										67425,
										67429
									],
									[
										67513,
										67517
									],
									[
										67768,
										67772
									],
									[
										67856,
										67860
									],
									[
										68103,
										68107
									],
									[
										68357,
										68361
									],
									[
										68585,
										68589
									],
									[
										68813,
										68817
									],
									[
										69067,
										69071
									],
									[
										69313,
										69317
									],
									[
										69567,
										69571
									],
									[
										69891,
										69895
									],
									[
										70201,
										70205
									],
									[
										70440,
										70444
									],
									[
										70695,
										70699
									],
									[
										71025,
										71029
									],
									[
										71235,
										71239
									],
									[
										71369,
										71373
									],
									[
										71631,
										71635
									],
									[
										71765,
										71769
									],
									[
										72027,
										72031
									],
									[
										72161,
										72165
									],
									[
										72393,
										72397
									],
									[
										72536,
										72540
									],
									[
										72612,
										72616
									],
									[
										72784,
										72788
									],
									[
										72927,
										72931
									],
									[
										73092,
										73096
									],
									[
										73235,
										73239
									],
									[
										73311,
										73315
									],
									[
										73489,
										73493
									],
									[
										73638,
										73642
									],
									[
										73716,
										73720
									],
									[
										73896,
										73900
									],
									[
										74054,
										74058
									],
									[
										74141,
										74145
									],
									[
										74440,
										74444
									],
									[
										74528,
										74532
									],
									[
										74768,
										74772
									],
									[
										74856,
										74860
									],
									[
										75095,
										75099
									],
									[
										75172,
										75176
									],
									[
										75269,
										75273
									],
									[
										75584,
										75588
									],
									[
										75678,
										75682
									],
									[
										75946,
										75950
									],
									[
										76036,
										76040
									],
									[
										76301,
										76305
									],
									[
										76395,
										76399
									],
									[
										76651,
										76655
									],
									[
										76913,
										76917
									],
									[
										77163,
										77167
									],
									[
										77421,
										77425
									],
									[
										77751,
										77755
									],
									[
										78024,
										78028
									],
									[
										78287,
										78291
									],
									[
										78605,
										78609
									],
									[
										78707,
										78711
									],
									[
										79077,
										79081
									],
									[
										79248,
										79252
									],
									[
										79693,
										79697
									],
									[
										79989,
										79993
									],
									[
										80079,
										80083
									],
									[
										80331,
										80335
									],
									[
										80413,
										80417
									],
									[
										80503,
										80507
									],
									[
										80772,
										80776
									],
									[
										80862,
										80866
									],
									[
										81180,
										81184
									],
									[
										81546,
										81550
									],
									[
										81842,
										81846
									],
									[
										81976,
										81980
									],
									[
										82182,
										82186
									],
									[
										82316,
										82320
									],
									[
										82500,
										82504
									],
									[
										82590,
										82594
									],
									[
										82856,
										82860
									],
									[
										83117,
										83121
									],
									[
										83279,
										83283
									],
									[
										83587,
										83591
									],
									[
										83667,
										83671
									],
									[
										83906,
										83910
									],
									[
										83986,
										83990
									],
									[
										84207,
										84211
									],
									[
										84287,
										84291
									],
									[
										84532,
										84536
									],
									[
										84624,
										84628
									],
									[
										84731,
										84735
									],
									[
										85040,
										85044
									],
									[
										85154,
										85158
									],
									[
										85257,
										85261
									],
									[
										85363,
										85367
									],
									[
										85466,
										85470
									],
									[
										85724,
										85728
									],
									[
										85985,
										85989
									],
									[
										86085,
										86089
									],
									[
										86289,
										86293
									],
									[
										86396,
										86400
									],
									[
										86706,
										86710
									],
									[
										87025,
										87029
									],
									[
										87360,
										87364
									],
									[
										87452,
										87456
									],
									[
										87732,
										87736
									],
									[
										87824,
										87828
									],
									[
										88095,
										88099
									],
									[
										88360,
										88364
									],
									[
										88665,
										88669
									],
									[
										88962,
										88966
									],
									[
										89291,
										89295
									],
									[
										89603,
										89607
									],
									[
										89707,
										89711
									],
									[
										89811,
										89815
									],
									[
										89915,
										89919
									],
									[
										90019,
										90023
									],
									[
										90123,
										90127
									],
									[
										90227,
										90231
									],
									[
										90331,
										90335
									],
									[
										90435,
										90439
									],
									[
										90540,
										90544
									],
									[
										90644,
										90648
									],
									[
										91040,
										91044
									],
									[
										91144,
										91148
									],
									[
										91248,
										91252
									],
									[
										91641,
										91645
									],
									[
										91745,
										91749
									],
									[
										91849,
										91853
									],
									[
										92193,
										92197
									],
									[
										92442,
										92446
									],
									[
										92667,
										92671
									],
									[
										92916,
										92920
									],
									[
										93244,
										93248
									],
									[
										93314,
										93318
									],
									[
										93398,
										93402
									],
									[
										93478,
										93482
									],
									[
										93718,
										93722
									],
									[
										93803,
										93807
									],
									[
										93893,
										93897
									],
									[
										93981,
										93985
									],
									[
										94066,
										94070
									],
									[
										94156,
										94160
									],
									[
										94244,
										94248
									],
									[
										94329,
										94333
									],
									[
										94582,
										94586
									],
									[
										94658,
										94662
									],
									[
										94748,
										94752
									],
									[
										94834,
										94838
									],
									[
										95131,
										95135
									],
									[
										95222,
										95226
									],
									[
										95364,
										95368
									],
									[
										95458,
										95462
									],
									[
										95549,
										95553
									],
									[
										95691,
										95695
									],
									[
										95785,
										95789
									],
									[
										95876,
										95880
									],
									[
										96176,
										96180
									],
									[
										96302,
										96306
									],
									[
										96433,
										96437
									],
									[
										96575,
										96579
									],
									[
										96701,
										96705
									],
									[
										96832,
										96836
									],
									[
										97141,
										97145
									],
									[
										97227,
										97231
									],
									[
										97321,
										97325
									],
									[
										97417,
										97421
									],
									[
										97677,
										97681
									],
									[
										97772,
										97776
									],
									[
										97872,
										97876
									],
									[
										97960,
										97964
									],
									[
										98055,
										98059
									],
									[
										98155,
										98159
									],
									[
										98243,
										98247
									],
									[
										98338,
										98342
									],
									[
										98588,
										98592
									],
									[
										98674,
										98678
									],
									[
										98880,
										98884
									],
									[
										98972,
										98976
									],
									[
										99213,
										99217
									],
									[
										99360,
										99364
									],
									[
										99638,
										99642
									],
									[
										99733,
										99737
									],
									[
										99907,
										99911
									],
									[
										100002,
										100006
									],
									[
										100280,
										100284
									],
									[
										100612,
										100616
									],
									[
										100692,
										100696
									],
									[
										100974,
										100978
									],
									[
										101318,
										101322
									],
									[
										101512,
										101516
									],
									[
										101584,
										101588
									],
									[
										101868,
										101872
									],
									[
										102015,
										102019
									],
									[
										102087,
										102091
									],
									[
										102370,
										102374
									],
									[
										102515,
										102519
									],
									[
										102587,
										102591
									],
									[
										102871,
										102875
									],
									[
										103023,
										103027
									],
									[
										103095,
										103099
									],
									[
										103404,
										103408
									],
									[
										103549,
										103553
									],
									[
										103621,
										103625
									],
									[
										103861,
										103865
									],
									[
										104099,
										104103
									],
									[
										104382,
										104386
									],
									[
										104643,
										104647
									],
									[
										104900,
										104904
									],
									[
										104979,
										104983
									],
									[
										105062,
										105066
									],
									[
										105150,
										105154
									],
									[
										105240,
										105244
									],
									[
										105323,
										105327
									],
									[
										105411,
										105415
									],
									[
										105501,
										105505
									],
									[
										105584,
										105588
									],
									[
										105830,
										105834
									],
									[
										106143,
										106147
									],
									[
										106248,
										106252
									],
									[
										106502,
										106506
									],
									[
										106643,
										106647
									],
									[
										106785,
										106789
									],
									[
										107105,
										107109
									],
									[
										107354,
										107358
									],
									[
										107554,
										107558
									],
									[
										107898,
										107902
									],
									[
										108003,
										108007
									],
									[
										108313,
										108317
									],
									[
										108418,
										108422
									],
									[
										108538,
										108542
									],
									[
										108857,
										108861
									],
									[
										109179,
										109183
									],
									[
										109331,
										109335
									],
									[
										109666,
										109670
									],
									[
										109752,
										109756
									],
									[
										109857,
										109861
									],
									[
										110135,
										110139
									],
									[
										110370,
										110374
									],
									[
										110511,
										110515
									],
									[
										110653,
										110657
									],
									[
										110985,
										110989
									],
									[
										111369,
										111373
									],
									[
										111720,
										111724
									],
									[
										111999,
										112003
									],
									[
										112241,
										112245
									],
									[
										112475,
										112479
									],
									[
										112804,
										112808
									],
									[
										113104,
										113108
									],
									[
										113187,
										113191
									],
									[
										113300,
										113304
									],
									[
										113551,
										113555
									],
									[
										113634,
										113638
									],
									[
										113747,
										113751
									],
									[
										113981,
										113985
									],
									[
										114168,
										114172
									],
									[
										114349,
										114353
									],
									[
										114557,
										114561
									],
									[
										114737,
										114741
									],
									[
										114919,
										114923
									],
									[
										115182,
										115186
									],
									[
										115446,
										115450
									],
									[
										115626,
										115630
									],
									[
										115808,
										115812
									],
									[
										116071,
										116075
									],
									[
										116367,
										116371
									],
									[
										116659,
										116663
									],
									[
										116981,
										116985
									],
									[
										117124,
										117128
									],
									[
										117268,
										117272
									],
									[
										117412,
										117416
									],
									[
										117710,
										117714
									],
									[
										118019,
										118023
									],
									[
										118362,
										118366
									],
									[
										118734,
										118738
									],
									[
										119156,
										119160
									],
									[
										119572,
										119576
									],
									[
										119952,
										119956
									],
									[
										120138,
										120142
									],
									[
										120361,
										120365
									],
									[
										120692,
										120696
									],
									[
										120895,
										120899
									],
									[
										121204,
										121208
									],
									[
										121408,
										121412
									],
									[
										121675,
										121679
									],
									[
										121853,
										121857
									],
									[
										122120,
										122124
									],
									[
										122306,
										122310
									],
									[
										122531,
										122535
									],
									[
										122863,
										122867
									],
									[
										123067,
										123071
									],
									[
										123379,
										123383
									],
									[
										123584,
										123588
									],
									[
										123802,
										123806
									],
									[
										123981,
										123985
									],
									[
										124277,
										124281
									],
									[
										124568,
										124572
									],
									[
										124712,
										124716
									],
									[
										124978,
										124982
									],
									[
										125206,
										125210
									],
									[
										125342,
										125346
									],
									[
										125597,
										125601
									],
									[
										125733,
										125737
									],
									[
										126105,
										126109
									],
									[
										126230,
										126234
									],
									[
										126499,
										126503
									],
									[
										126625,
										126629
									],
									[
										126751,
										126755
									],
									[
										127078,
										127082
									],
									[
										127402,
										127406
									],
									[
										127617,
										127621
									],
									[
										127852,
										127856
									],
									[
										127965,
										127969
									],
									[
										128183,
										128187
									],
									[
										128453,
										128457
									],
									[
										128566,
										128570
									],
									[
										128784,
										128788
									],
									[
										129046,
										129050
									],
									[
										129311,
										129315
									],
									[
										129573,
										129577
									],
									[
										129826,
										129830
									],
									[
										130089,
										130093
									],
									[
										130326,
										130330
									],
									[
										130563,
										130567
									],
									[
										130826,
										130830
									],
									[
										131084,
										131088
									],
									[
										131345,
										131349
									],
									[
										131683,
										131687
									],
									[
										131954,
										131958
									],
									[
										132148,
										132152
									],
									[
										132493,
										132497
									],
									[
										132721,
										132725
									],
									[
										132895,
										132899
									],
									[
										133154,
										133158
									],
									[
										133362,
										133366
									],
									[
										133714,
										133718
									],
									[
										133811,
										133815
									],
									[
										134100,
										134104
									],
									[
										134173,
										134177
									],
									[
										134409,
										134413
									],
									[
										134515,
										134519
									],
									[
										134826,
										134830
									],
									[
										135108,
										135112
									],
									[
										135347,
										135351
									],
									[
										135453,
										135457
									],
									[
										135764,
										135768
									],
									[
										136013,
										136017
									],
									[
										136292,
										136296
									],
									[
										136377,
										136381
									],
									[
										136474,
										136478
									],
									[
										136721,
										136725
									],
									[
										136830,
										136834
									],
									[
										137251,
										137255
									],
									[
										137449,
										137453
									],
									[
										137808,
										137812
									],
									[
										137999,
										138003
									],
									[
										138277,
										138281
									],
									[
										138369,
										138373
									],
									[
										138716,
										138720
									],
									[
										138986,
										138990
									],
									[
										139078,
										139082
									],
									[
										139351,
										139355
									],
									[
										139443,
										139447
									],
									[
										139776,
										139780
									],
									[
										140072,
										140076
									],
									[
										140300,
										140304
									],
									[
										140559,
										140563
									],
									[
										140817,
										140821
									],
									[
										141067,
										141071
									],
									[
										141396,
										141400
									],
									[
										141725,
										141729
									],
									[
										142069,
										142073
									],
									[
										142337,
										142341
									],
									[
										142649,
										142653
									],
									[
										142901,
										142905
									],
									[
										143099,
										143103
									],
									[
										143328,
										143332
									],
									[
										143585,
										143589
									]
								],
								"scope": ""
							}
						},
						"selection":
						[
							[
								132295,
								132295
							]
						],
						"settings":
						{
							"default_dir": "/Users/olivier/Projects/angular-strap",
							"detect_indentation": false,
							"incomplete_sync": null,
							"line_numbers": false,
							"output_tag": 1,
							"result_base_dir": "",
							"result_file_regex": "^([A-Za-z\\\\/<].*):$",
							"result_line_regex": "^ +([0-9]+):",
							"scroll_past_end": true,
							"syntax": "Packages/Default/Find Results.hidden-tmLanguage",
							"translate_tabs_to_spaces": false
						},
						"translation.x": 0.0,
						"translation.y": 36239.0,
						"zoom_level": 1.0
					},
					"stack_index": 1,
					"type": "text"
				},
				{
					"buffer": 2,
					"file": ".eslintrc",
					"semi_transient": true,
					"settings":
					{
						"buffer_size": 359,
						"regions":
						{
						},
						"selection":
						[
							[
								0,
								359
							]
						],
						"settings":
						{
							"incomplete_sync": null,
							"remote_loading": false,
							"synced": false,
							"syntax": "Packages/JavaScript/JSON.sublime-syntax",
							"tab_size": 2,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 0,
					"type": "text"
				},
				{
					"buffer": 3,
					"file": "src/typeahead/test/typeahead.spec.js",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 31962,
						"regions":
						{
						},
						"selection":
						[
							[
								912,
								912
							]
						],
						"settings":
						{
							"incomplete_sync": null,
							"remote_loading": false,
							"synced": false,
							"syntax": "Packages/JavaScriptNext - ES6 Syntax/JavaScriptNext.tmLanguage",
							"tab_size": 2,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 9,
					"type": "text"
				},
				{
					"buffer": 4,
					"file": "src/tooltip/test/tooltip.spec.js",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 51791,
						"regions":
						{
						},
						"selection":
						[
							[
								855,
								855
							]
						],
						"settings":
						{
							"incomplete_sync": null,
							"remote_loading": false,
							"synced": false,
							"syntax": "Packages/JavaScriptNext - ES6 Syntax/JavaScriptNext.tmLanguage",
							"tab_size": 2,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 8,
					"type": "text"
				},
				{
					"buffer": 5,
					"file": "src/dropdown/test/dropdown.spec.js",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 17883,
						"regions":
						{
						},
						"selection":
						[
							[
								873,
								873
							]
						],
						"settings":
						{
							"incomplete_sync": null,
							"remote_loading": false,
							"synced": false,
							"syntax": "Packages/JavaScriptNext - ES6 Syntax/JavaScriptNext.tmLanguage",
							"tab_size": 2,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 7,
					"type": "text"
				},
				{
					"buffer": 6,
					"file": "src/select/test/select.spec.js",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 32045,
						"regions":
						{
						},
						"selection":
						[
							[
								841,
								841
							]
						],
						"settings":
						{
							"incomplete_sync": null,
							"remote_loading": false,
							"synced": false,
							"syntax": "Packages/JavaScriptNext - ES6 Syntax/JavaScriptNext.tmLanguage",
							"tab_size": 2,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 6,
					"type": "text"
				},
				{
					"buffer": 7,
					"file": "src/popover/test/popover.spec.js",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 21934,
						"regions":
						{
						},
						"selection":
						[
							[
								1013,
								1013
							]
						],
						"settings":
						{
							"incomplete_sync": null,
							"remote_loading": false,
							"synced": false,
							"syntax": "Packages/JavaScriptNext - ES6 Syntax/JavaScriptNext.tmLanguage",
							"tab_size": 2,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 5,
					"type": "text"
				},
				{
					"buffer": 8,
					"file": "src/timepicker/test/timepicker.spec.js",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 56495,
						"regions":
						{
						},
						"selection":
						[
							[
								864,
								864
							]
						],
						"settings":
						{
							"incomplete_sync": null,
							"remote_loading": false,
							"synced": false,
							"syntax": "Packages/JavaScriptNext - ES6 Syntax/JavaScriptNext.tmLanguage",
							"tab_size": 2,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 4,
					"type": "text"
				},
				{
					"buffer": 9,
					"file": "src/modal/test/modal.spec.js",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 27885,
						"regions":
						{
						},
						"selection":
						[
							[
								0,
								0
							]
						],
						"settings":
						{
							"incomplete_sync": null,
							"remote_loading": false,
							"synced": false,
							"syntax": "Packages/JavaScriptNext - ES6 Syntax/JavaScriptNext.tmLanguage",
							"tab_size": 2,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 3,
					"type": "text"
				}
			]
		}
	],
	"incremental_find":
	{
		"height": 23.0
	},
	"input":
	{
		"height": 30.0
	},
	"layout":
	{
		"cells":
		[
			[
				0,
				0,
				1,
				1
			]
		],
		"cols":
		[
			0.0,
			1.0
		],
		"rows":
		[
			0.0,
			1.0
		]
	},
	"menu_visible": true,
	"output.exec":
	{
		"height": 102.0
	},
	"output.find_results":
	{
		"height": 0.0
	},
	"output.git":
	{
		"height": 102.0
	},
	"output.sftp":
	{
		"height": 98.0
	},
	"pinned_build_system": "",
	"project": "angular-strap.sublime-project",
	"replace":
	{
		"height": 72.0
	},
	"save_all_on_build": true,
	"select_file":
	{
		"height": 0.0,
		"last_filter": "",
		"selected_items":
		[
			[
				"tool",
				"angular-strap/dist/modules/tooltip.js"
			],
			[
				"datepick",
				"angular-strap/src/datepicker/datepicker.js"
			],
			[
				"index",
				"angular-strap/docs/index.html"
			],
			[
				"angu",
				"angular-strap/bower_components/angular/angular.js"
			],
			[
				"bow",
				"angular-strap/bower.json"
			],
			[
				"dev",
				"angular-strap/.dev/dev.html"
			],
			[
				"gulp",
				"angular-strap/gulpfile.js"
			],
			[
				"datepicker",
				"angular-strap/src/datepicker/datepicker.js"
			],
			[
				"datepi",
				"angular-strap/dist/modules/datepicker.js"
			],
			[
				"tootl",
				"angular-strap/src/tooltip/tooltip.js"
			],
			[
				"toolt",
				"angular-strap/dist/modules/tooltip.js"
			],
			[
				"modal",
				"angular-strap/dist/modules/modal.js"
			],
			[
				"inde",
				"angular-strap/docs/index.html"
			],
			[
				"toolti",
				"angular-strap/dist/modules/tooltip.js"
			],
			[
				"alert",
				"angular-strap/dist/modules/alert.js"
			],
			[
				"angular.js",
				"angular-strap/bower_components/angular/angular.js"
			],
			[
				".tra",
				"angular-strap/.travis.yml"
			],
			[
				"dev.",
				"angular-strap/.dev/dev.html"
			],
			[
				"tooltip",
				"angular-strap/dist/modules/tooltip.js"
			],
			[
				"select",
				"angular-strap/dist/modules/select.js"
			],
			[
				"typeahead.sp",
				"angular-strap/src/typeahead/test/typeahead.spec.js"
			],
			[
				"momen",
				"angular-strap/bower_components/momentjs/moment.js"
			],
			[
				"gruntfile",
				"angular-strap/Gruntfile.js"
			],
			[
				"tooltip.less",
				"angular-strap-bs3/bower_components/bootstrap/less/tooltip.less"
			],
			[
				"modal.less",
				"angular-strap-bs3/bower_components/bootstrap/less/modals.less"
			],
			[
				"app.js",
				"angular-strap-docs/js/app.js"
			],
			[
				"modal.de",
				"angular-strap-bs3/src/modal/docs/modal.demo.html"
			],
			[
				"animations",
				"angular-strap-bs3/.dev/styles/animations.less"
			],
			[
				".dev/index",
				"angular-strap-bs3/.dev/index.html"
			],
			[
				"main",
				"angular-strap-bs3/.dev/styles/main.less"
			],
			[
				"main.less",
				"app/styles/main.less"
			],
			[
				"basic",
				"beelink/config/bootstrap/basics.php"
			],
			[
				"basics",
				"beelink/config/bootstrap/basics.php"
			],
			[
				"web",
				"beelink/views/layouts/webfront.html.php"
			],
			[
				"login",
				"Beelink/app/view/sessions/LoginForm.js"
			],
			[
				"model",
				"beelink/models/Model.php"
			],
			[
				"default.json",
				"Beelink/resources/locale/en/default.json"
			],
			[
				"documentset",
				"lithium/lithium/data/collection/DocumentSet.php"
			],
			[
				"mongodb",
				"lithium/lithium/data/source/MongoDb.php"
			],
			[
				"collect",
				"lithium/lithium/util/Collection.php"
			],
			[
				"collection",
				"lithium/lithium/data/Collection.php"
			],
			[
				"user",
				"beelink/models/Users.php"
			],
			[
				"simpleme",
				"beelink/libraries/Swift/classes/Swift/Mime/SimpleMessage.php"
			],
			[
				"stats",
				"beelink/controllers/StatsController.php"
			],
			[
				"default",
				"Beelink/resources/locale/fr/default.json"
			],
			[
				"backupscontr",
				"beelink/controllers/BackupsController.php"
			],
			[
				"under",
				"beelink/webroot/js/libs/underscore.string.js"
			],
			[
				"mobile",
				"beelink/views/layouts/mobile.html.php"
			],
			[
				"se",
				"beelink/views/layouts/sencha.html.php"
			],
			[
				"webfro",
				"beelink/views/layouts/webfront.html.php"
			],
			[
				"mobile.",
				"beelink/views/layouts/mobile.html.php"
			],
			[
				"helium",
				"beelink/webroot/js/libs/helium.js"
			],
			[
				"bootstrap.js",
				"beelink/webroot/js/libs/bootstrap.js"
			],
			[
				"cardform",
				"beelink/webroot/js/webapp/views/CardForm.js"
			],
			[
				"side",
				"beelink/views/elements/layouts/sidebar.html.php"
			],
			[
				"heliu",
				"beelink/webroot/js/libs/helium.js"
			],
			[
				"bootstrap",
				"beelink/webroot/js/libs/bootstrap.js"
			],
			[
				"webap",
				"beelink/views/layouts/webapp.html.php"
			],
			[
				"weba",
				"beelink/views/layouts/webapp.html.php"
			],
			[
				"webapp.le",
				"beelink/webroot/css/webapp/webapp.less"
			],
			[
				"back",
				"beelink/webroot/js/libs/backbone.js"
			],
			[
				"webapp.less",
				"beelink/webroot/css/webapp/webapp.less"
			],
			[
				"sencha",
				"beelink/webroot/js/libs/sencha-touch-all-debug-2.0.js"
			],
			[
				"",
				"beelink/webroot/js/libs/helium.js"
			],
			[
				"webapp",
				"beelink/views/layouts/webapp.html.php"
			],
			[
				"webfr",
				"beelink/webroot/js/webfront/webfront.js"
			],
			[
				"sessions/",
				"beelink/views/sessions/home.html.php"
			],
			[
				"webfront",
				"beelink/views/layouts/webfront.html.php"
			],
			[
				"bootstrap.css",
				"beelink/webroot/css/libs/bootstrap.css"
			],
			[
				"usersro",
				"beelink/webroot/js/webapp/routers/UsersRouter.js"
			],
			[
				"backups",
				"beelink/controllers/BackupsController.php"
			],
			[
				"sessions",
				"beelink/webroot/js/mobile/controller/Sessions.js"
			],
			[
				"phonegap",
				"beelink/webroot/js/libs/phonegap-1.4.1-ios.js"
			],
			[
				"sessio",
				"beelink/controllers/SessionsController.php"
			],
			[
				"backupform",
				"beelink/webroot/js/mobile/view/backup/BackupForm.js"
			],
			[
				"networkshow",
				"beelink/webroot/js/mobile/view/network/NetworkShowPendingSource.js"
			],
			[
				"networklist",
				"beelink/webroot/js/mobile/view/network/NetworkList.js"
			],
			[
				"button",
				"beelink/webroot/css/mobile/button.less"
			],
			[
				"contactproxy",
				"beelink/webroot/js/mobile/model/proxy/ContactProxy.js"
			],
			[
				"sessions.js",
				"beelink/webroot/js/mobile/controller/Sessions.js"
			],
			[
				"use",
				"beelink/controllers/UsersController.php"
			],
			[
				"core.les",
				"beelink/webroot/css/webapp/core.less"
			],
			[
				"cardcontainer",
				"beelink/webroot/js/webapp/views/CardContainer.js"
			],
			[
				"core.less",
				"beelink/webroot/css/webapp/core.less"
			],
			[
				"sessi",
				"beelink/config/bootstrap/session.php"
			],
			[
				"backbone",
				"beelink/webroot/js/libs/backbone.js"
			],
			[
				"session",
				"beelink/controllers/SessionsController.php"
			],
			[
				"cardfor",
				"beelink/webroot/js/webapp/views/CardForm.js"
			],
			[
				"cardfrom",
				"beelink/libraries/_source/swiftmailer/test-suite/lib/simpletest/docs/source/fr/overview.xml"
			],
			[
				"formhelper",
				"libraries/Cake/View/Helper/FormHelper.php"
			],
			[
				"phonenu",
				"beelink/views/elements/templates/phoneNumber.html.php"
			],
			[
				"field",
				"beelink/webroot/js/webapp/extensions/form/FieldGroup.js"
			],
			[
				"email",
				"beelink/webroot/js/webapp/extensions/field/Email.js"
			],
			[
				"phonenumb",
				"beelink/views/elements/templates/phoneNumber.html.php"
			],
			[
				"phonenum",
				"beelink/webroot/js/webapp/extensions/field/PhoneNumber.js"
			],
			[
				"fieldgrou",
				"beelink/webroot/js/webapp/extensions/form/FieldGroup.js"
			],
			[
				"desk",
				"beelink/views/layouts/desktop.html.bak.php"
			],
			[
				"backbon",
				"beelink/webroot/js/libs/backbone.js"
			],
			[
				"sess",
				"beelink/controllers/SessionsController.php"
			],
			[
				"pages",
				"beelink/controllers/PagesController.php"
			],
			[
				"senc",
				"beelink/views/layouts/sencha.html.php"
			],
			[
				"form",
				"libraries/lithium/template/helper/Form.php"
			],
			[
				"html",
				"beelink/extensions/helper/Html.php"
			],
			[
				"add",
				"beelink/views/sessions/add.html.php"
			],
			[
				"controller",
				"libraries/lithium/action/Controller.php"
			],
			[
				"add.",
				"beelink/views/posts/add.html.php"
			],
			[
				"dispatch",
				"libraries/lithium/action/DispatchException.php"
			],
			[
				"inflec",
				"libraries/lithium/util/Inflector.php"
			],
			[
				"core.",
				"beelink/webroot/js/desktop/core.js"
			],
			[
				"core.js",
				"beelink/webroot/js/desktop/core.js"
			],
			[
				"form.php",
				"libraries/lithium/template/helper/Form.php"
			],
			[
				"htmlhelp",
				"libraries/lithium/template/helper/Html.php"
			],
			[
				"butt",
				"beelink/webroot/css/mobile/button.less"
			],
			[
				"locale",
				"beelink/webroot/js/mobile/lib/i18n/Locale.js"
			],
			[
				"contactpro",
				"beelink/webroot/js/mobile/model/proxy/ContactProxy.js"
			],
			[
				"cards",
				"beelink/webroot/js/mobile/view/card/CardEditForm.js"
			],
			[
				"backupfo",
				"beelink/webroot/js/mobile/view/backup/BackupForm.js"
			],
			[
				"users",
				"beelink/controllers/UsersController.php"
			],
			[
				"backups.js",
				"beelink/webroot/js/mobile/controller/Backups.js"
			],
			[
				"phonega",
				"beelink/webroot/js/mobile/lib/PhonegapPicker.js"
			],
			[
				"backupfor",
				"beelink/webroot/js/mobile/view/backup/BackupForm.js"
			],
			[
				"app",
				"beelink/webroot/js/mobile/app.js"
			],
			[
				"backup",
				"beelink/controllers/BackupsController.php"
			],
			[
				"local",
				"beelink/webroot/js/mobile/lib/i18n/Locale.js"
			],
			[
				"logi",
				"beelink/webroot/js/sencha/view/Login.js"
			],
			[
				"backupf",
				"beelink/webroot/js/mobile/view/backup/BackupForm.js"
			],
			[
				"phone",
				"beelink/webroot/js/mobile/lib/PhonegapPicker.js"
			],
			[
				"butto",
				"beelink/webroot/css/mobile/button.less"
			]
		],
		"width": 0.0
	},
	"select_project":
	{
		"height": 500.0,
		"last_filter": "",
		"selected_items":
		[
			[
				"",
				"/Users/olivier/Dropbox/Sites/beelink/beelink/beelink.sublime-project"
			]
		],
		"width": 380.0
	},
	"select_symbol":
	{
		"height": 0.0,
		"last_filter": "",
		"selected_items":
		[
		],
		"width": 0.0
	},
	"selected_group": 0,
	"settings":
	{
	},
	"show_minimap": true,
	"show_open_files": true,
	"show_tabs": true,
	"side_bar_visible": true,
	"side_bar_width": 271.0,
	"status_bar_visible": true,
	"template_settings":
	{
	}
}
